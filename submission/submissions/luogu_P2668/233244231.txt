//  OJ: 洛谷
//  提交ID: 233244231
//  题目ID: P2668
#include<bits/stdc++.h>
#include<array>
#define int long long
#define file(name) freopen(#name".in", "r", stdin), freopen(#name".out", "w", stdout);
using namespace std;
constexpr int p = 131;
using ull = unsigned long long;
ull hsh(array<int, 14>& now) {
	ull res = 0, pp = 1;
	for (int i = 0; i < 14; ++i) res += now[i] * pp, pp *= p;
	return res;
}
unordered_map<ull, int> mp; int curans;
int dfs(array<int, 14>& now, int stp) {
	if (stp > curans) return 100;
	int key = hsh(now);
	if (key == 0) curans = min(curans, stp);
	if (mp.count(key)) return mp[key];
	int& val = mp[key];
	val = 100;
	if (now[0] >= 1) now[0] -= 1, val = min(val, dfs(now, stp + 1)), now[0] += 1;
	if (now[0] >= 2) now[0] -= 2, val = min(val, dfs(now, stp + 1)), now[0] += 2;
	for (int i = 1; i < 14; ++i) {
		if (now[i] >= 1) {
			now[i] -= 1;
			val = min(val, dfs(now, stp + 1));
			now[i] += 1;
		}
		if (now[i] >= 2) {
			now[i] -= 2;
			val = min(val, dfs(now, stp + 1));
			now[i] += 2;
		}
		if (now[i] >= 3) {
			now[i] -= 3;
			for (int j = 0; j < 14; ++j) {
				if (now[j] >= 1) {
					now[j] -= 1;
					val = min(val, dfs(now, stp + 1));
					now[j] += 1;
				}
				if (j && now[j] >= 2) {
					now[j] -= 2;
					val = min(val, dfs(now, stp + 1));
					now[j] += 2;
				}
			}
			val = min(val, dfs(now, stp + 1));
			now[i] += 3;
		}
		if (now[i] >= 4) {
			now[i] -= 4;
			for (int j = 0; j < 14; ++j) {
				for (int k = 0; k < 14; ++k) {
					if (j == k) {
						if (now[j] >= 2) {
							now[j] -= 2;
							val = min(val, dfs(now, stp + 1));
							now[j] += 2;
						}
						if (j && now[j] >= 4) {
							now[j] -= 4;
							val = min(val, dfs(now, stp + 1));
							now[j] += 4;
						}
						continue;
					}
					if (now[j] >= 1 && now[k] >= 1) {
						now[j] -= 1; now[k] -= 1;
						val = min(val, dfs(now, stp + 1));
						now[j] += 1; now[k] += 1;
					}
					if (j && k && now[j] >= 2 && now[k] >= 2) {
						now[j] -= 2; now[k] -= 2;
						val = min(val, dfs(now, stp + 1));
						now[j] += 2; now[k] += 2;
					}
				}
			}
			val = min(val, dfs(now, stp + 1));
			now[i] += 4;
		}
	}
	if (now[1] >= 1) {
		now[1] -= 1;
		for (int i = 3; i <= 10; ++i) {
			bool flg = 1;
			for (int k = i; k <= 13; ++k) if (now[k] < 1) flg = 0;
			if (flg) {
				for (int k = i; k <= 13; ++k) now[k] -= 1;
				val = min(val, dfs(now, stp + 1));
				for (int k = i; k <= 13; ++k) now[k] += 1;
			}
		}
		now[1] += 1;
	}
	for (int j = 7; j <= 13; ++j) {
		for (int i = j - 4; i >= 3; --i) {
			bool flg = 1;
			for (int k = i; k <= j; ++k) if (now[k] < 1) flg = 0;
			if (flg) {
				for (int k = i; k <= j; ++k) now[k] -= 1;
				val = min(val, dfs(now, stp + 1));
				for (int k = i; k <= j; ++k) now[k] += 1;
			}
		}
	}
	if (now[1] >= 2) {
		now[1] -= 2;
		for (int i = 3; i <= 12; ++i) {
			bool flg = 1;
			for (int k = i; k <= 13; ++k) if (now[k] < 2) flg = 0;
			if (flg) {
				for (int k = i; k <= 13; ++k) now[k] -= 2;
				val = min(val, dfs(now, stp + 1));
				for (int k = i; k <= 13; ++k) now[k] += 2;
			}
		}
		now[1] += 2;
	}
	for (int i = 3, j = 5; j <= 13; ++i, ++j) {
		for (int i = j - 2; i >= 3; --i) {
			bool flg = 1;
			for (int k = i; k <= j; ++k) if (now[k] < 2) flg = 0;
			if (flg) {
				for (int k = i; k <= j; ++k) now[k] -= 2;
				val = min(val, dfs(now, stp + 1));
				for (int k = i; k <= j; ++k) now[k] += 2;
			}
		}
	}
	if (now[1] >= 3) {
		now[1] -= 3;
		for (int i = 3; i <= 13; ++i) {
			bool flg = 1;
			for (int k = i; k <= 13; ++k) if (now[k] < 3) flg = 0;
			if (flg) {
				for (int k = i; k <= 13; ++k) now[k] -= 3;
				val = min(val, dfs(now, stp + 1));
				for (int k = i; k <= 13; ++k) now[k] += 3;
			}
		}
		now[1] += 3;
	}
	for (int i = 3, j = 4; j <= 13; ++i, ++j) {
		for (int i = j - 1; i >= 3; --i) {
			bool flg = 1;
			for (int k = i; k <= j; ++k) if (now[k] < 3) flg = 0;
			if (flg) {
				for (int k = i; k <= j; ++k) now[k] -= 3;
				val = min(val, dfs(now, stp + 1));
				for (int k = i; k <= j; ++k) now[k] += 3;
			}
		}
	}
	return ++val;
}
array<int, 14>now;
int32_t main() {
	//file(landlords);
	cin.tie(0)->sync_with_stdio(false);
	int T, n;
	cin >> T >> n; mp[0] = 0;
	while (T--) {
		curans = 100;
		for (auto& k : now) k = 0;
		for (int i = 1, k, t; i <= n; ++i) {
			cin >> k >> t; now[k]++;
		}
		cout << dfs(now, 0) << endl;
	}
	return 0;
}