//  OJ: 洛谷
//  提交ID: 166463104
//  题目ID: P5076
#include<bits/stdc++.h>
using namespace std;
class FHQ_Treap {
public:
	void ins(int x) {
		int a, b, c;
		split(root, x, a, b);
		c = merge(a, new_node(x));
		root = merge(c, b);
	}
	void del(int x) {
		int a, b, c, d;
		split(root, x, a, b);
		split(a, x - 1, c, d);
		root = merge(merge(c, merge(tree[d].lc, tree[d].rc)), b);
	}
	int get_rank(int x) {
		int a, b;
		split(root, x - 1, a, b);
		int ans = tree[a].size + 1;
		root = merge(a, b);
		return ans;
	}
	int get_val(int x) {
		return tree[val_get(root, x)].val;
	}
	int get_pre(int x) {
		int a, b;
		split(root, x - 1, a, b);
		int tmp = tree[a].size;
		root = merge(a, b);
		return get_val(tmp);
	}
	int get_nxt(int x) {
//		cout << "-----------past---------" << endl;
//		debug(root);
		int a, b;
		split(root, x, a, b);
//		cout << "-----------now(l)-------" << endl;
//		debug(a);
//		cout << "-----------now(r)-------" << endl;
//		debug(b);
		int tmp = tree[a].size + 1;
		root = merge(a, b);
//		cout << "-----------merged------" << endl;
//		debug(root);
//		cout << "-----------end---------" << endl;
		return get_val(tmp);
	}
protected:
	int root = 0, idx = 0;
	struct Point {
		int lc, rc, size, val, rnd;
		Point() :lc(0), rc(0), size(0), val(0), rnd(114514) {}
	}tree[100000 + 100];
	int new_node(int val) {
		++idx;
		tree[idx].rnd = rand();
		tree[idx].val = val;
		tree[idx].size = 1;
		return idx;
	}
	void push_up(int p) {
		tree[p].size = tree[tree[p].lc].size + tree[tree[p].rc].size + 1;
	}
	void split(int p, int val, int& x, int& y) {
		if (!p) {
			x = y = 0;
			return;
		}
		if (tree[p].val <= val) {
			x = p;
			split(tree[p].rc, val, tree[p].rc, y);
			push_up(p);
		}
		else {
			y = p;
			split(tree[p].lc, val, x, tree[p].lc);
			push_up(p);
		}
	}
	int merge(int x, int y) {
		if (!x || !y) return x + y;
		if (tree[x].rnd < tree[y].rnd) {
			tree[x].rc = merge(tree[x].rc, y);
			push_up(x); return x;
		}
		else {
			tree[y].lc = merge(x, tree[y].lc);
			push_up(y); return y;
		}
	}
	int val_get(int p, int x) {
		if (tree[tree[p].lc].size + 1 == x) return p;
		if (x <= tree[tree[p].lc].size)
			return val_get(tree[p].lc, x);
		return val_get(tree[p].rc, x - (tree[tree[p].lc].size + 1));
	}
	void debug(int p) {
		if (!p) {
			cout << "it's empty!" << endl;
			return;
		}
		cout << "begin " << p << endl;
		cout << p << "'s left child :" << endl;
		debug(tree[p].lc);
		cout << p << "'s right child :" << endl;
		debug(tree[p].rc);
		cout << "end " << p << endl;
	}
}lzj;
int n, opt, x;
signed main() {
	cin >> n;
	while (n--) {
		cin >> opt >> x;
		if (opt == 1)
			cout << lzj.get_rank(x) << endl;
		else if (opt == 2)
			cout << lzj.get_val(x) << endl;
		else if (opt == 3)
			cout << lzj.get_pre(x) << endl;
		else if (opt == 4)
			cout << lzj.get_nxt(x) << endl;
		else if (opt == 5)
			lzj.ins(x);
	}
	return 0;
}