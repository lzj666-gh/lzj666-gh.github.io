//  OJ: 洛谷
//  提交ID: 218020688
//  题目ID: P2812
#include<bits/stdc++.h>
#define int long long 
using namespace std;
constexpr int N = 1e4 + 10, M = 5e4 + 10;
struct Edge {
	int u, v, nxt;
}edge[M];
int head[N], idx;
void add(int u, int v) {
	edge[++idx] = { u,v,head[u] };
	head[u] = idx;
}
int scc[N], dfn[N], low[N], idk;
int n, m;
namespace Main {
	struct Edge {
		int v, nxt;
	}edge[M];
	int head[N], idx, r[N];
	void add(int u, int v) {
		edge[++idx] = { v, head[u] };
		head[u] = idx;
		r[v]++;
	}
	int n;
	bool vis[10000 + 10];
	void main() {
		if (n == 1) {
			cout << 1 << endl << 0 << endl;
			return;
		}
		int ans = n;
		for (int i = 1; i <= n; ++i) if (r[i]) ans--;
		cout << ans << endl;
		int anss = 0;
		for (int i = 1; i <= n; ++i) if (head[i] == 0) anss++;
		cout << max(ans, anss) << endl;
	}
}
void Tarjan(int x) {
	static int idx;
	static stack<int>st;
	low[x] = dfn[x] = ++idx;
	st.push(x);
	for (int i = head[x]; i; i = edge[i].nxt)
		if (!dfn[edge[i].v])
			Tarjan(edge[i].v),
			low[x] = min(low[x], low[edge[i].v]);
		else if (!scc[edge[i].v])
			low[x] = min(low[x], dfn[edge[i].v]);
	if (low[x] == dfn[x]) {
		scc[x] = ++idk;
		while (st.top() ^ x) scc[st.top()] = idk, st.pop();
		st.pop();
	}
}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i <= n; ++i) {
		int tmp = 0;
		cin >> tmp;
		while (tmp) add(i, tmp), cin >> tmp;
	}
	for (int i = 1; i <= n; ++i)
		if (!dfn[i])
			Tarjan(i);
	for (int i = 1; i <= idx; ++i)
		if (scc[edge[i].u] ^ scc[edge[i].v])
			Main::add(scc[edge[i].u], scc[edge[i].v]);
	Main::n = idk;
	Main::main();
	return 0;
}