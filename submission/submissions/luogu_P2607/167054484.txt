//  OJ: 洛谷
//  提交ID: 167054484
//  题目ID: P2607
#include<bits/stdc++.h>
using namespace std;
struct Edge {
	int v, nxt;
}edge[1000000 + 10], edge2[1000000 + 10];
int idx, head[1000000 + 10];
void add(int u, int v) {
	edge[++idx] = { v,head[u] };
	head[u] = idx;
}
int idx2, head2[1000000 + 10];
void add2(int u, int v) {
	edge2[++idx2] = { v,head2[u] };
	head2[u] = idx2;
}
int n, d1[1000000 + 10], d2[1000000 + 10], r[1000000 + 10], f[1000000 + 10];
bool vis[1000000 + 10];
int pr[1000000 + 10];
int find(int x) {
	return x == pr[x] ? x : find(pr[x]);
}
bool Vis[1000000 + 10];
void dfs(int k) {
	if (Vis[k]) return;
	Vis[k] = 1;
	for (int i = head[k]; i; i = edge[i].nxt) {
		if (Vis[edge[i].v]) continue;
		dfs(edge[i].v);
		d1[k] += d2[edge[i].v];
		d2[k] += max(d1[edge[i].v], d2[edge[i].v]);
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i <= n; ++i) 
		pr[i] = i;
	for (int i = 1, v; i <= n; ++i){
		cin >> r[i] >> v; 
		d1[i] = r[i]; 
		add(v, i); 
		pr[find(v)] = find(i);
		f[i] = v;
	}
	for (int i = 1; i <= n; ++i) 
		add2(find(i), i);
	int tot = 0;
	for (int i = 1; i <= n; ++i) 
		if (!vis[i]) {
			int d1 = -1, d2 = -1;
			int gp = find(i);
			queue<int>q;
			q.push(gp);
			vis[gp] = 1;
			while (!q.empty()) {
				int now = q.front(); q.pop();
				for (int j = head[now]; j; j = edge[j].nxt){
					if(vis[edge[j].v]) {
						d1 = now; d2 = edge[i].v;
						break;
					}
					vis[edge[j].v] = 1;
					q.push(edge[j].v);
				}
				if (d1 ^ -1) break;
			}
			for (int j = head2[gp]; j; j = edge2[j].nxt) 
				/*cout << j << endl, */vis[edge2[j].v] = 1;
			dfs(d1);
			int ans = ::d2[d1];
			::d1[gp] = r[gp];
			::d2[gp] = 0;
			Vis[gp] = 0;
			for (int j = head2[gp]; j; j = edge2[j].nxt) 
				::d1[edge2[j].v] = r[edge2[j].v], ::d2[edge2[j].v] = 0, Vis[edge2[j].v] = 0;
			dfs(d2);
//			cout<<d2<<endl;
//			for(int i=1;i<=n;++i) cout<<::d2[i]<<' ';cout<<endl;
//			for(int i=1;i<=n;++i) cout<<::d1[i]<<' ';cout<<endl;
			ans = max(ans, ::d2[d2]);
			::d1[find(i)] = r[gp];
			::d2[gp] = 0;
			Vis[gp] = 0;
			for (int j = head2[gp]; j; j = edge2[j].nxt) 
				::d1[edge2[j].v] = r[edge2[j].v], ::d2[edge2[j].v] = 0, Vis[edge2[j].v] = 0;
			tot += ans;
		}
	cout << tot << endl;
	return 0;
}