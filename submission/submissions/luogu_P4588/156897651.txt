//  OJ: 洛谷
//  提交ID: 156897651
//  题目ID: P4588
#include<bits/stdc++.h>
using namespace std;
int M;
struct Tree {
#define lc(p) (p << 1)
#define rc(p) ((p << 1) + 1)
	struct point {
		int l, r;
		long long sum, lazy;
		point() :l(0), r(0), sum(1), lazy(1) {}
		point(int ll, int rr, long long ssum, long long lzy) :l(ll), r(rr), sum(ssum), lazy(lzy) {}
	}tree[4 * 100000 + 100];
	void pushdown(int p) {
		if (tree[p].lazy != 1) {
			tree[lc(p)].sum *= tree[p].lazy;
			tree[lc(p)].sum %= M;
			tree[rc(p)].sum *= tree[p].lazy;
			tree[rc(p)].sum %= M;
			tree[lc(p)].lazy *= tree[p].lazy;
			tree[lc(p)].lazy %= M;
			tree[rc(p)].lazy *= tree[p].lazy;
			tree[rc(p)].lazy %= M;
			tree[p].lazy = 1;
		}
	}
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum * tree[rc(p)].sum % M;
	}
	void add(int p, int l, int r, int k) {
		if (tree[p].l >= r || tree[p].r <= l) return;
		if (tree[p].l == tree[p].r - 1) {
			if (tree[p].lazy) tree[p].lazy = 1;
			tree[p].sum *= k;
			tree[p].sum %= M;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			tree[p].lazy *= k;
			tree[p].lazy %= M;
			pushdown(p);
			pushup(p);
			return;
		}
		pushdown(p);
		add(lc(p), l, r, k);
		add(rc(p), l, r, k);
		pushup(p);
	}
	void sett(int p, int x) {
		if (tree[p].l > x || tree[p].r <= x) return;
		if (tree[p].l == tree[p].r - 1 && tree[p].l == x) {
			if (tree[p].lazy) tree[p].lazy = 1;
			tree[p].sum = 1;
			return;
		}
		pushdown(p);
		sett(lc(p), x);
		sett(rc(p), x);
		pushup(p);
	}
	long long query(int p, int l, int r) {
		if (tree[p].l >= r || tree[p].r <= l) return 1;
		if (tree[p].l == tree[p].r - 1) {
			if (tree[p].lazy) tree[p].lazy = 1;
			return tree[p].sum;
		}
		if (l <= tree[p].l && tree[p].r <= r) return tree[p].sum;
		pushdown(p);
		long long ans = 1ll * query(lc(p), l, r) % M * query(rc(p), l, r) % M;
		pushup(p);
		return ans;
	}
	void build(int p, int l, int r) {
		tree[p].l = l, tree[p].r = r, tree[p].lazy = 1, tree[p].sum = 1;
		build(lc(p), l, l + r >> 1);
		build(rc(p), l + r >> 1, r);
	}
}t;
int T, q, m, opt;
int main() {
	ios_base::sync_with_stdio(false);
	cin >> T;
	while (T--) {
		cin >> q >> M;
		t.build(1, 1, q + 1);
		for (int i = 1; i <= q; ++i) {
			cin >> opt >> m;
			if (opt == 1) {
				t.add(1, i, i + 1, m); 
				//cerr << "output:";
				cout << t.query(1, 1, q) << endl;
			}
			else {
				t.sett(1, m);
				//cerr << "output:";
				cout << t.query(1, 1, q) << endl;
			}
		}
	}
	return 0;
}
/*
8 10
659 463 793 740 374 330 772 681
1 5 8 39
2 5 8
1 3 6 3
1 5 8 90
1 1 5 21
2 3 8
1 3 8 17
1 4 7 52
2 2 6
1 2 7 41

ans:
2313
4281
3278

*/