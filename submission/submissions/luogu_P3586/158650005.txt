//  OJ: 洛谷
//  提交ID: 158650005
//  题目ID: P3586
#include<bits/stdc++.h>
using namespace std;
struct Tree {
#define ok(p, L, R) if (p == -1) p = ++idx, tree[p].l = L, tree[p].r = R;
#define lc(p) (tree[p].ls)
#define rc(p) (tree[p].rs)
	struct point {
		int l, r, ls, rs;
		long long sum, lazy;
		point() :l(0), r(0), sum(0), lazy(0), ls(-1), rs(-1) {}
		point(int ll, int rr, long long ssum, long long lzy) :l(ll), r(rr), sum(ssum), lazy(lzy), ls(-1), rs(-1) {}
	}tree[4 * 1000000 + 10];
	int idx = 1;
	void pushdown(int p) {
		if (tree[p].lazy) {
			ok(lc(p), tree[p].l, tree[p].l + tree[p].r >> 1);
			ok(rc(p), tree[p].l + tree[p].r >> 1, tree[p].r);
			tree[lc(p)].sum += (tree[lc(p)].r - tree[lc(p)].l) * tree[p].lazy;
			tree[rc(p)].sum += (tree[rc(p)].r - tree[rc(p)].l) * tree[p].lazy;
			tree[lc(p)].lazy += tree[p].lazy;
			tree[rc(p)].lazy += tree[p].lazy;
			tree[p].lazy = 0;
		}
	}
	void pushup(int p) {
		ok(lc(p), tree[p].l, tree[p].l + tree[p].r >> 1);
		ok(rc(p), tree[p].l + tree[p].r >> 1, tree[p].r);
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
	}
	void add(int p, int l, int r, int k) {
		if (tree[p].l >= r || tree[p].r <= l) return;
		if (tree[p].l == tree[p].r - 1) {
			if (tree[p].lazy) tree[p].lazy = 0;
			tree[p].sum += k;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			tree[p].lazy += k;
			pushdown(p);
			pushup(p);
			return;
		}
		pushdown(p);
		add(lc(p), l, r, k);
		add(rc(p), l, r, k);
		pushup(p);
	}
	long long query(int p, int l, int r) {
		if (tree[p].l >= r || tree[p].r <= l) return 0;
		if (tree[p].l == tree[p].r - 1) {
			if (tree[p].lazy) tree[p].lazy = 0;
			return tree[p].sum;
		}
		if (l <= tree[p].l && tree[p].r <= r) return tree[p].sum;
		pushdown(p);
		long long ans = 1ll * query(lc(p), l, r) + query(rc(p), l, r);
		pushup(p);
		return ans;
	}
	void build(int p, int l, int r, const vector<int>& v) {
		tree[p].l = l, tree[p].r = r, tree[p].lazy = 0;
		if (l == r - 1) {
			tree[p] = { l,r,v[l],0 };
			return;
		}
		ok(lc(p), tree[p].l, tree[p].l + tree[p].r >> 1);
		ok(rc(p), tree[p].l + tree[p].r >> 1, tree[p].r);
		build(lc(p), l, l + r >> 1, v);
		build(rc(p), l + r >> 1, r, v);
		pushup(p);
	}
}s, c;
int n, m, k, a, lzj[1000000 + 10];
char opt;
signed main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	while (m--) {
		cin >> opt >> k >> a;
		if (opt == 'U') {
			if (lzj[k]) s.add(1, lzj[k], lzj[k], -1), c.add(1, lzj[k], lzj[k], -lzj[k]);
			if (a) s.add(1, a, a, 1), c.add(1, a, a, a);
			lzj[k] = a;
		}
		else {
			if (s.query(1, a, 1e9) * a + c.query(1, 1, a - 1) >= k * a) cout << "TAK" << endl;
			else cout << "NIE" << endl;
		}
	}
	return 0;
}