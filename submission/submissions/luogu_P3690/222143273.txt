//  OJ: 洛谷
//  提交ID: 222143273
//  题目ID: P3690
#include<bits/stdc++.h>
using namespace std;
struct LCT {
#define ls son[0]
#define rs son[1]
	struct iterator {
		using it = iterator*;
		int val, sum; bool tag;
		it fa, son[2];
		iterator() :val(), sum(), tag(), fa(), son() {}
	};
	using it = iterator*;
	it pt[100000 + 5];
	void pushup(it p) {
		p->sum = p->val;
		if (p->ls) p->sum ^= p->ls->sum;
		if (p->rs) p->sum ^= p->rs->sum;
	}
	void swap(it p) {
		if (!p) return;
		p->tag ^= 1;
		std::swap(p->ls, p->rs);
	}
	void pushdown(it p) {
		if (p->tag) {
			swap(p->ls); swap(p->rs);
			p->tag = 0;
		}
	}
	bool notroot(it p) {
		if (!p) return false;
		if (!p->fa) return false;
		return p->fa->ls == p || p->fa->rs == p;
	}
	void update(it p) {
		if (notroot(p)) update(p->fa);
		pushdown(p);
	}
	void rotate(it p) {
		if (!p) return;
		if (!notroot(p)) return;
		bool mode = p->fa->rs == p;
		it fa = p->fa, sp = p->son[!mode];
		if (notroot(fa)) fa->fa->son[fa->fa->son[1] == fa] = p, p->fa = fa->fa;
		else p->fa = fa->fa;
		p->son[!mode] = fa;
		fa->fa = p;
		fa->son[mode] = sp;
		if (sp) sp->fa = fa;
		pushup(fa);
		pushup(p);
	}
	void splay(it p) {
		update(p);
		while (notroot(p)) {
			it fa = p->fa;
			if (notroot(fa))
				rotate((fa->fa->son[1] == fa) != (fa->son[1] == p) ? p : fa);
			rotate(p);
		}
	}
	void access(it p) {
		it q = nullptr;
		while (p) {
			splay(p);
			p->rs = q;
			q = p;
			pushup(p);
			p = p->fa;
		}
	}
	void beroot(it p) {
		access(p);
		splay(p);
		swap(p);
	}
	int query(int x, int y) {
		beroot(pt[x]);
		access(pt[y]);
		splay(pt[y]);
		return pt[y]->sum;
	}
	it find(it p) {
		access(p);
		splay(p);
		while (p->ls) p = p->ls;
		return p;
	}
	void link(int x, int y) {
		if (find(pt[x]) != find(pt[y])) {
			beroot(pt[x]);
			pt[x]->fa = pt[y];
		}
	}
	void cut(int x, int y) {
		beroot(pt[x]);
		if (find(pt[y]) == pt[x] && !pt[y]->rs && pt[x]->fa == pt[y]) {
			pt[y]->ls = nullptr;
			pt[x]->fa = nullptr;
			pushup(pt[y]);
		}
	}
	void change(int x, int p) {
		beroot(pt[x]);
		pt[x]->val = p;
		pushup(pt[x]);
	}
	void init(int n) {
		for (int i = 1, x; i <= n; ++i) {
			cin >> x;
			pt[i] = new iterator;
			*pt[i] = iterator();
			pt[i]->val = pt[i]->sum = x;
		}
	}
	void debug(it p = nullptr) {
		if (p) {
			cerr << '{';
			if (p->fa) cerr << "fa: " << p->fa->val;
			cerr << ':';
			if (p->ls) p->ls;
			cerr << ',';
			if (p->rs) p->rs;
			cerr << '}';
			return;
		}
	}
}t;
int main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	t.init(n);
	for (int i = 1, opt, x, y; i <= m; ++i) {
		cin >> opt >> x >> y;
		if (opt == 0) cout << t.query(x, y) << endl;
		if (opt == 1) t.link(x, y);
		if (opt == 2) t.cut(x, y);
		if (opt == 3) t.change(x, y);
	}
	return 0;
}