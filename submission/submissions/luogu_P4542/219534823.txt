//  OJ: 洛谷
//  提交ID: 219534823
//  题目ID: P4542
#include<bits/stdc++.h>
using namespace std;
using ll = long long;
constexpr ll inf = 0x3f3f3f3f3f3f3f3f;
struct Edge {
	int v, c, nxt;
	ll w;
	Edge(int v = 0, int w = 0, int c = 0, int nxt = 0) :v(v), w(w), c(c), nxt(nxt) {}
}edge[200000 + 10];
int head[300 + 10], idx = 1;
void add(int u, int v, int w, int c) {
	edge[++idx] = { v,w,c,head[u] };
	head[u] = idx;
}
void addedge(int u, int v, int w, int c) {
	add(u, v, w, c); add(v, u, 0, -c);
}
int val[300 + 10][300 + 10];
bool vis[300 + 10];
int n, m, s, t, k;
ll dis[300 + 10], h[300 + 10];
void floyd(bool mode = 0) {
	for (int i = 0; i <= n; ++i) val[i][i] = 0;
	for (int k = 0; k <= n; ++k)
		for (int i = 0; i <= n; ++i)
			for (int j = 0; j <= n; ++j)
				if (mode || k < max(i, j))
					val[i][j] = min(val[i][j], val[i][k] + val[k][j]);
	if (mode) for (int i = 0; i <= n; ++i) h[i] = val[s][i];
}
pair<int, int>p[300 + 10];
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;
ll ans;
bool dij() {
	memset(p, 0, sizeof p);
	memset(dis, 0x3f, sizeof dis);
	memset(vis, 0, sizeof vis);
	dis[s] = 0; q.emplace(0, s);
	while (!q.empty()) {
		int now = q.top().second; q.pop();
		if (vis[now]) continue; vis[now] = 1;
		for (int i = head[now]; i; i = edge[i].nxt) {
			int v = edge[i].v, c = edge[i].c + h[now] - h[v];
			if (edge[i].w > 0 && dis[now] + c < dis[v]) {
				dis[v] = dis[now] + c;
				p[v].first = now; p[v].second = i;
				q.emplace(dis[v], v);
			}
		}
	}
	return dis[t] != inf;
}
int Dinic() {
	while (dij()) {
		ll flow = inf;
		for (int i = 1; i <= n; ++i)
			if (dis[i] != inf)
				h[i] += dis[i];
		for (int i = t; i ^ s; i = p[i].first)
			flow = min(flow, edge[p[i].second].w);
		for (int i = t; i ^ s; i = p[i].first)
			edge[p[i].second].w -= flow, edge[p[i].second ^ 1].w += flow;
		ans += flow * h[t];
	}
	return ans;
}
signed main() {
	memset(val, 0x3f, sizeof(val));
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m >> k;
	for (int i = 1, u, v, w; i <= m; i++) {
		cin >> u >> v >> w;
		val[u][v] = val[v][u] = min(val[u][v], w);
	}
	floyd();
	s = n + n + 1; t = s + 1;
	for (int i = 0; i <= n; i++) {
		addedge(i + n, t, 1, 0);
		if (i) addedge(s, i, 1, 0);
	}
	addedge(s, 0, k, 0);
	for (int i = 0; i <= n; i++)
		for (int j = i + 1; j <= n; j++)
			if (val[i][j] != inf)
				addedge(i, j + n, 1, val[i][j]);
	n = t;
	floyd(1);
	cout << Dinic() << endl;
	return 0;
}