//  OJ: 洛谷
//  提交ID: 168182092
//  题目ID: P4247
#include<bits/stdc++.h>
#define lc(p) (p<<1)
#define rc(p) (p<<1|1)
#define ls(p) lc(p),l,mid
#define rs(p) rc(p),mid+1,r
using namespace std;
const int mod=19940417;
struct Node{
	long long ans[20+1],ans1;
	int size;
	bool ans2;
	friend Node operator+(const Node&a,const Node&b){
		Node ans;
		ans.size=a.size+b.size;
		for(int i=0;i<=20&&i<=a.size;++i){
			for(int j=0;j+i<=20&&j<=b.size;++j){
				(ans.ans[i+j]+=a.ans[i]*b.ans[j]%mod)%=mod;
			}
		}
		return ans;
	}
}tree[200000+1];
int n,q,a[50000+1],A,B,C,c[50000+1][20+1];
char gy;
void push_up(int p){
	memset(tree[q].ans,0,sizeof(tree[q].ans));
	for(int i=0;i<=20&&i<=tree[lc(p)].size;++i){
		for(int j=0;j+i<=20 && j<=tree[rc(p)].size;++j){
			tree[p].ans[i+j]+=tree[lc(p)].ans[i]*tree[rc(p)].ans[j];
		}
	}
	for(int i=0;i<=20&&i<=tree[p].size;++i)
		tree[p].ans[i]%=mod;
}
void add_upd(int p,int x){
	if(!p) return;
	if(!x) return;
	static int tmp[20+1];
	tmp[0]=1;
	for(int i=1;i<=20&&i<=tree[p].size;++i)
		tmp[i]=tmp[i-1]*x%mod;
	for(int i=min(20,tree[p].size);i;--i)
		for(int j=0;j<i;++j)
			tree[p].ans[i]=(tree[p].ans[i]+tree[p].ans[j]*tmp[i-j]%mod*c[tree[p].size-j][i-j]%mod)%mod;
	tree[p].ans1=(tree[p].ans1+x)%mod;
}
void rev_upd(int p){
	if(!p) return;
	if(!q) return;
	for(int i=1;i<=20&&i<=tree[p].size;++i)
		tree[p].ans[i]=(i&1)?mod-tree[p].ans[i]:tree[p].ans[i];
	tree[p].ans1=mod-tree[p].ans1;
	tree[p].ans2^=1;
}
void push_down(int p){
	if(tree[p].ans2){
		rev_upd(lc(p));
		rev_upd(rc(p));
		tree[p].ans2=0;
	}
	if(tree[q].ans1){
		add_upd(lc(p),tree[p].ans1);
		add_upd(rc(p),tree[p].ans1);
		tree[p].ans1=0;
	}
}
void build(int p,int l,int r){
	tree[p].size=r-l+1;
	if(l==r){
		tree[p].ans[0]=1;
		tree[p].ans[1]=(a[l]%mod+mod)%mod; 
		return;
	}
	int mid=l+r>>1;
	build(ls(p));
	build(rs(p));
	push_up(q);
}
void add(int p,int l,int r,int L,int R,int x){
	if(l>=L&&r<=R){
		add_upd(p,x);
		return;
	}
	push_down(p);
	int mid=l+r>>1;
	if(mid>=L) add(ls(p),L,R,x);
	if(mid<R) add(rs(p),L,R,x);
	push_up(p);
}
void rev(int p,int l,int r,int L,int R){
	if(l>=L&&r<=R) {
		rev_upd(p);
		return;
	}
	push_down(p);
	int mid=l+r>>1;
	if(mid>=L) rev(ls(p),L,R);
	if(mid<R) rev(rs(p),L,R);
	push_up(q);
}
Node qry(int p,int l,int r,int L,int R){
	if(l>=L&&r<=R) return tree[p];
	push_down(p);
	int mid=l+r>>1;
	if(R<=mid) return qry(ls(p),L,R);
	else if(L>mid) return qry(rs(p),L,R);
	else return qry(ls(p),L,R)+qry(rs(p),L,R);
}
int main(){
	ios_base::sync_with_stdio(false);
	cin>>n>>q;
	for(int i=1;i<=n;++i) cin>>a[i];
	tree[0].ans[0]=1; 
	c[0][0]=1;
	for(int i=1;i<=n;++i){
		c[i][0]=1;
		for(int j=1;j<=20&&j<=i;++j)
			c[i][j]=(c[i-1][j]+c[i-1][j-1])%mod;
	}
	build(1,1,n);
	while(q--){
		cin>>gy;
		if(gy=='I'){
			cin>>A>>B>>C;
			add(1,1,n,A,B,C);
		}
		if(gy=='R'){
			cin>>A>>B;
			rev(1,1,n,A,B);
		}
		if(gy=='Q'){
			cin>>A>>B>>C;
			cout<<(qry(1,1,n,A,B).ans[C]%mod+mod)%mod<<endl;
		}
	}
	return 0;
}