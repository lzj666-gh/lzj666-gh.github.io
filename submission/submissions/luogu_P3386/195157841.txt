//  OJ: 洛谷
//  提交ID: 195157841
//  题目ID: P3386
#include<queue>
#include<stdio.h>
#include<string.h>
#include<algorithm>
using namespace std;
//#pragma GCC optimize(3,"Ofast","inline")
#define Fast_IO
#ifdef Fast_IO
namespace nanan {
#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 20, stdin), p1 == p2) ? 0 : *p1++)
#define endl '\n'
	char buf[1 << 20], * p1, * p2;
	class IN {
	public:
		friend IN& operator>>(IN& i, int& x) {
			bool f = 1; x = 0; char ch = getchar();
			while (ch < '0' || ch>'9') { if (ch == '-') f = !f; ch = getchar(); }
			while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }
			x = (f ? x : -x);
			return i;
		}
		int operator()() {
			bool f = 1; int x = 0; char ch = getchar();
			while (ch < '0' || ch>'9') { if (ch == '-') f = !f; ch = getchar(); }
			while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }
			return x = (f ? x : -x);
		}
	}cin, read;
	class OUT {
	public:
		friend OUT& operator<<(OUT& i, int x) {
			if (x > 9) i << (x / 10);
			putchar(x % 10 + '0');
			return i;
		}
		friend OUT& operator<<(OUT& i, const char& x) {
			putchar(x);
			return i;
		}
	}cout;
}
using namespace nanan;
#endif
int n, m, e;
int bel[500 + 10];
vector<int>son[500 + 10];
bool vis[500 + 10];
bool justdoit(int x) {
	if (vis[x]) return 0;
	vis[x] = 1;
	for (int& i : son[x]) {
		if (bel[i] == -1|| justdoit(bel[i])) {
			bel[i] = x;
			return 1;
		}
	}
	return 0;
}
signed main() {
	cin >> n >> m >> e;
	for (int i = 1, x, y; i <= e; ++i) cin >> x >> y, son[x].push_back(y);
	for (int i = 1; i <= n; ++i) {
		sort(son[i].begin(), son[i].end());
		son[i].erase(unique(son[i].begin(), son[i].end()), son[i].end());
	}
	int ans = 0;
	memset(bel, -1, sizeof bel);
	for (int i = 1; i <= n; ++i) {
		memset(vis, 0, sizeof vis);
		ans += justdoit(i);
	}
	cout << ans << endl;
	return 0;
}