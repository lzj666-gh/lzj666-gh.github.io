//  OJ: 洛谷
//  提交ID: 221619773
//  题目ID: P3976
#include<bits/stdc++.h>
using namespace std;
constexpr int N = 5e4 + 5;
int n, val[N], q, a[N];
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
	struct Node {
		int min, max, lzy, ans1, ans2;
		Node(int min = 0x3f3f3f3f, int max = -0x3f3f3f3f, int lzy = 0, int ans1 = 0, int ans2 = 0) :min(min), max(max), lzy(lzy), ans1(ans1), ans2(ans2) {}
		friend Node operator+(const Node& a, const Node& b) {
			Node ret;
			ret.min = ::min(a.min, b.min);
			ret.max = ::max(a.max, b.max);
			ret.ans1 = ::max(a.ans1, b.ans1);
			ret.ans1 = ::max(ret.ans1, a.max - b.min);
			ret.ans2 = ::max(a.ans2, b.ans2);
			ret.ans2 = ::max(ret.ans2, b.max - a.min);
			return ret;
		}
	}tree[N << 2 | 3];
	void pushup(int p) {
		tree[p] = tree[lc(p)] + tree[rc(p)];
	}
	void pushdown(int p) {
		if (tree[p].lzy) {
			tree[lc(p)].min += tree[p].lzy; tree[lc(p)].max += tree[p].lzy; tree[lc(p)].lzy += tree[p].lzy;
			tree[rc(p)].min += tree[p].lzy; tree[rc(p)].max += tree[p].lzy; tree[rc(p)].lzy += tree[p].lzy;
			tree[p].lzy = 0;
		}
	}
	void add(int p, int l, int r, int x, int y, int val) {
		if (r < x || y < l) return;
		if (x <= l && r <= y) {
			tree[p].lzy += val;
			tree[p].max += val;
			tree[p].min += val;
			return;
		}
		pushdown(p);
		add(lson, x, y, val);
		add(rson, x, y, val);
		pushup(p);
	}
	Node query(int p, int l, int r, int x, int y) {
		if (r < x || y < l) return Node();
		if (x <= l && r <= y) return tree[p];
		pushdown(p);
		return query(lson, x, y) + query(rson, x, y);
	}
	void build(int p, int l, int r) {
		if (l == r) {
			tree[p].min = tree[p].max = a[l];
			return;
		}
		build(lson);
		build(rson);
		pushup(p);
	}
}t;
struct Edge {
	int v, nxt;
}edge[N << 1];
int head[N], idx;
void add(int u, int v) {
	edge[++idx] = { v,head[u] };
	head[u] = idx;
}
int dep[N], dfn[N], siz[N], idk, hvy[N], top[N], f[N];
void dfs1(int x, int fa) {
	f[x] = fa; siz[x] = 1;
	for (int i = head[x]; i; i = edge[i].nxt)
		if (edge[i].v ^ fa)
			dfs1(edge[i].v, x), siz[x] += siz[edge[i].v],
			(siz[hvy[x]] < siz[edge[i].v]) && (hvy[x] = edge[i].v);
}
void dfs2(int x, int fa) {
	dep[x] = dep[fa] + 1; dfn[x] = ++idk;
	if (!hvy[x]) return;
	top[hvy[x]] = top[x]; dfs2(hvy[x], x);
	for (int i = head[x]; i; i = edge[i].nxt)
		if ((edge[i].v ^ fa) && (edge[i].v ^ hvy[x]))
			top[edge[i].v] = edge[i].v, dfs2(edge[i].v, x);
}
int LCA(int x, int y) {
	while (top[x] ^ top[y]) {
		if (dep[top[x]] < dep[top[y]]) y = f[top[y]];
		else x = f[top[x]];
	}
	return dep[x] < dep[y] ? x : y;
}
void dfs(int x, int& fa, int& ans, int& mx) {
	if (top[x] ^ top[fa]) {
		dfs(f[top[x]], fa, ans, mx);
		auto dt = t.query(1, 1, n, dfn[top[x]], dfn[x]);
		//cerr << "max: " << mx << endl;
		//cerr << "min: " << dt.min << endl;
		ans = max(ans, mx - dt.min);
		ans = max(ans, dt.ans1);
		mx = max(mx, dt.max);
	}
	else {
		auto dt = t.query(1, 1, n, dfn[fa], dfn[x]);
		//cerr << "max: " << mx << endl;
		//cerr << "min: " << dt.min << endl;
		ans = max(ans, mx - dt.min);
		ans = max(ans, dt.ans1);
		mx = max(mx, dt.max);
	}
}
int query(int x, int y) {
	int fa = LCA(x, y), ans = 0, mx = -0x3f3f3f3f;
	while (top[x] ^ top[fa]) {
		auto dt = t.query(1, 1, n, dfn[top[x]], dfn[x]);
		ans = max(ans, mx - dt.min);
		ans = max(ans, dt.ans2);
		mx = max(mx, dt.max);
		x = f[top[x]];
	}
	auto dt = t.query(1, 1, n, dfn[fa], dfn[x]);
	ans = max(ans, mx - dt.min);
	ans = max(ans, dt.ans2);
	mx = max(mx, dt.max);
	dfs(y, fa, ans, mx);
	return ans;
}
void add(int x, int y, int val) {
	while (top[x] ^ top[y]) {
		if (dep[top[x]] < dep[top[y]]) t.add(1, 1, n, dfn[top[y]], dfn[y], val), y = f[top[y]];
		else t.add(1, 1, n, dfn[top[x]], dfn[x], val), x = f[top[x]];
	}
	if(dfn[x] < dfn[y]) t.add(1, 1, n, dfn[x], dfn[y], val);
	else t.add(1, 1, n, dfn[y], dfn[x], val);
}
#define debug(dfn) cerr << #dfn": "; for (int i = 1; i <= n; ++i) cerr << dfn[i] << ' '; cerr << endl;
signed main() {
	//freopen("travel.in", "r", stdin);
	//freopen("travel.out", "w", stdout);
	cin.tie(0)->sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i <= n; ++i) cin >> val[i];
	for (int i = 1, x, y; i < n; ++i) cin >> x >> y, add(x, y), add(y, x);
	dfs1(1, 1); top[1] = 1; dfs2(1, 1);
	//debug(dfn); debug(top);
	//debug(f); debug(hvy);
	for (int i = 1; i <= n; ++i) a[dfn[i]] = val[i];
	t.build(1, 1, n);
	cin >> q;
	while (q--) {
		int a, b, v;
		cin >> a >> b >> v;
		cout << query(b, a) << endl;
		add(a, b, v);
	}
	return 0;
}