//  OJ: 洛谷
//  提交ID: 234076006
//  题目ID: T540331
#include<bits/stdc++.h>
#define int long long
#define file(name) freopen(#name".in", "r", stdin), freopen(#name".out", "w", stdout);
#define all(a) (a).begin(), (a).end()
using namespace std;
int n, L, a[200000 + 5];
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
	struct Node {
		int ans;
		Node(int ans = 0) :ans(ans) {}
	}tree[200000 << 2 | 3];
	void pushup(int p) {
		tree[p].ans = max(tree[lc(p)].ans, tree[rc(p)].ans);
	}
	void insert(int p, int l, int r, int x, int k) {
		//cerr << "inserting (" << l << ',' << r << ") with pos: " << x << " number: " << k << endl;
		if (l == r) {
			tree[p].ans = max(tree[p].ans, k);
			return;
		}
		if (x <= mid) insert(lson, x, k);
		else insert(rson, x, k);
		pushup(p);
	}
	int query(int p, int l, int r, int x, int y) {
		//cerr << "querying (" << l << ',' << r << ") with pos: [" << x << ',' << y << "], cur ans is " << tree[p].ans << endl;
		if (x > y) return 0;
		if (x <= l && r <= y) return tree[p].ans;
		int ans = 0;
		if (x <= mid) ans = max(ans, query(lson, x, y));
		if (y > mid) ans = max(ans, query(rson, x, y));
		return ans;
	}
}t1, t2;
int dp1[2][200000 + 5], dp2[2][200000 + 5];
vector<int>b;
int32_t main() {
//	file(lis);
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> L;
	for_each(a + 1, a + n + 1, [&](int& p) { cin >> p; b.push_back(p); });
	sort(all(b)); b.erase(unique(all(b)), b.end());
	for_each(a + 1, a + n + 1, [&](int& p) { p = lower_bound(all(b), p) - b.begin(); });
	for (int i = 1; i <= n; ++i) {
		dp1[0][i] = t1.query(1, 0, n, 0, a[i] - 1) + 1;
		dp1[1][i] = t1.query(1, 0, n, 0, lower_bound(all(b), b[a[i]] + L) - b.begin() - 1) + 1;
		t1.insert(1, 0, n, a[i], dp1[0][i]);
		//cerr << dp1[0][i] << ' ' << dp1[1][i] << endl;
		//cerr << "dp1 insert " << a[i] << " with " << dp1[0][i] << endl;
	}
	for (int i = n; i >= 1; --i) {
		dp2[0][i] = t2.query(1, 0, n, a[i] + 1, n) + 1;
		dp2[1][i] = t2.query(1, 0, n, lower_bound(all(b), b[a[i]] - L) - b.begin() + 1, n) + 1;
		t2.insert(1, 0, n, a[i], dp2[0][i]);
		//cerr << dp2[0][i] << ' ' << dp2[1][i] << endl;
		//cerr << "dp2 insert " << a[i] << " with " << dp2[0][i] << endl;
	}
	int ans = 0;
	for (int i = 1; i <= n; ++i) {
		ans = max({ ans, dp1[0][i] + dp2[1][i] - 1, dp1[1][i] + dp2[0][i] - 1 });
	}
	cout << ans << endl;
	return 0;
}