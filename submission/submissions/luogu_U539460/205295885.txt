//  OJ: 洛谷
//  提交ID: 205295885
//  题目ID: U539460
#include<cstdio>
#include<cstring>
#include<string>
#include<algorithm>
#include<cctype>
using namespace std;

template <typename T>
inline void read(T&x){
    x=0; char temp=getchar(); bool f=false;
    while(!isdigit(temp)){if(temp=='-') f=true; temp=getchar();}
    while(isdigit(temp)){x=(x<<1)+(x<<3)+temp-'0'; temp=getchar();}
    if(f) x=-x;
}
template <typename T>
void print(T x){
    if(x<0) putchar('-'),x=-x;
    if(x>9) print(x/10);
    putchar(x%10+'0');
}

typedef long long ll;
const int MAXN = 1e6+5;
const int LIM = 1e6;
const ll mod = 998244353;

//basic
ll n,ansa,ansb;

//Matrix
struct Matrix{
    ll e[3][3];
    Matrix(){for(register int i=0;i<3;i++) e[i][0]=e[i][1]=e[i][2]=0;}
    inline Matrix operator *(const Matrix &a){
        Matrix res;
        for(register int i=0;i<3;i++)
            for(register int j=0;j<3;j++)
                for(register int k=0;k<3;k++)
                    res.e[i][j]=(res.e[i][j]+e[i][k]*a.e[k][j]%mod)%mod;
        return res;
    }
}I,R,A;
Matrix powx[MAXN],powxl[MAXN];

inline void Prework(){
    for(register int i=0;i<3;i++) I.e[i][i]=1;
    A.e[0][2]=1;
    R.e[0][1]=R.e[2][0]=R.e[2][2]=1,R.e[1][0]=R.e[1][1]=R.e[2][1]=2;

    powx[0]=I;
    for(register int i=1;i<=LIM;i++) powx[i]=powx[i-1]*R;
    powxl[1]=powx[LIM];
    for(register int i=2;i<=LIM;i++) powxl[i]=powxl[i-1]*powx[LIM];
}

inline Matrix ksm(ll b){
    if(b<=LIM) return powx[b];
    else return powxl[b/LIM]*powx[b%LIM];
}

int main(){
    // freopen("riemannian.in","r",stdin);
    // freopen("riemannian.out","w",stdout);
    Prework();
    int T; read(T);
    while(T--){
        read(n);
        Matrix tmp=A*ksm(n);
        ansa^=tmp.e[0][0],ansb^=tmp.e[0][1];
    }
    print(ansa),putchar(' '),print(ansb);
    return 0;
}