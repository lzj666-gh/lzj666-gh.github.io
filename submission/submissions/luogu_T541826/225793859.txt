//  OJ: 洛谷
//  提交ID: 225793859
//  题目ID: T541826
#include<bits/stdc++.h>
using namespace std;
namespace IO {
	const int SIZE = (1 << 21) + 1;
	char ibuf[SIZE], * iS, * iT, obuf[SIZE], * oS = obuf, * oT = obuf + SIZE - 1; char _st[55]; int _qr = 0;
	inline char gc() { return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++); }
	inline void qread() {}
	inline void qread(char& IEE) { IEE = gc(); }
	template<class T1, class ...T2> inline void qread(T1& IEE, T2&... ls) { T1 __ = 0, ___ = 1; char ch; while (!isdigit(ch = gc())) ___ = (ch == '-') ? -___ : ___; do { __ = (__ << 1) + (__ << 3) + (ch ^ 48); } while (isdigit(ch = gc())); __ *= ___; IEE = __; qread(ls...); }
	template<class... T2> inline void qread(char& IEE, T2&... ls) { IEE = gc(); qread(ls...); }
	inline void flush() { fwrite(obuf, 1, oS - obuf, stdout); oS = obuf; }
	inline void putc_(char _x) { *oS++ = _x; if (oS == oT) flush(); }
	inline void qwrite() {}
	inline void qwrite(char IEE) { putc_(IEE); }
	inline void qwrite(const char* str) { while (*str != '\0') putc_(*str++); }
	inline void qwrite(const std::string& IEE) { qwrite(IEE.c_str()); }
	template<class... T2> inline void qwrite(const char&& IEE, T2... ls) { putc_(IEE); qwrite(ls...); }
	template<class... T2> inline void qwrite(const char* str, T2... ls) { while (*str != '\0') putc_(*str++); qwrite(ls...); }
	template<class... T2> inline void qwrite(const std::string& IEE, T2... ls) { qwrite(IEE.c_str(), ls...); }
	template<class T1, class ...T2> inline void qwrite(T1 IEE, T2... ls) { if (!IEE) putc_('0'); if (IEE < 0) putc_('-'), IEE = -IEE; while (IEE) _st[++_qr] = IEE % 10 + '0', IEE /= 10; while (_qr) putc_(_st[_qr--]); qwrite(ls...); }
	struct Flusher_ { ~Flusher_() { flush(); } }io_flusher;
}
using namespace IO;
using ll = __int128;
constexpr int N = 5e5 + 10;
struct Edge {
	int v, nxt;
}edge[N << 1];
int head[N], idx;
void add(int u, int v) {
	edge[++idx] = { v,head[u] };
	head[u] = idx;
}
int n, a[N], sz[N];
ll ans, ssz[N];
void dfs1(int x, int fa) {
	sz[x] = 1;
	for (int i = head[x]; i; i = edge[i].nxt)
		if (edge[i].v != fa)
			dfs1(edge[i].v, x),
			sz[x] += sz[edge[i].v],
			ssz[x] += ssz[edge[i].v];
	ssz[x] += sz[x];
}
ll pow2(ll x) { return x * x; }
ll sup(int x) { return n - sz[x]; }
void dfs2(int x, int fa, ll SSz) {
	ll coef = 0;
	for (int i = head[x]; i; i = edge[i].nxt)
		if (edge[i].v != fa)
			coef -= pow2(ssz[edge[i].v] + sz[edge[i].v]);
	coef -= pow2(SSz + sup(x)); coef += pow2(ssz[x] - sz[x] + SSz + n);
	coef *= 2;
	for (int i = head[x]; i; i = edge[i].nxt)
		if (edge[i].v != fa)
			coef += pow2(sz[edge[i].v]);
	coef += pow2(sup(x)); coef -= pow2(n);
	ans += a[x] * coef;
	for (int i = head[x]; i; i = edge[i].nxt)
		if (edge[i].v != fa)
			dfs2(edge[i].v, x, ssz[x] - ssz[edge[i].v] - sz[x] + SSz + sup(edge[i].v));
}
signed main() {
	qread(n);
	for (int i = 1; i <= n; ++i) qread(a[i]);
	for (int i = 1, u, v; i < n; ++i) qread(u, v), add(u, v), add(v, u);
	dfs1(1, 1); dfs2(1, 1, 0);
	for (int i = 1; i <= n; ++i) ans += a[i];
	ans /= 2;
	ll inv = n * (n + 1ll) / 2;
	ll g = __gcd(ans, inv);
	qwrite(ans / g, ' ', inv / g, '\n');
	return 0;
}