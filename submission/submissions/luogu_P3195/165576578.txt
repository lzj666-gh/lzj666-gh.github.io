//  OJ: 洛谷
//  提交ID: 165576578
//  题目ID: P3195
#include<bits/stdc++.h>
char buf[1 << 20], * p1, * p2;
#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1<<20,stdin), p1 == p2) ? 0 : *p1++)
inline void read(long long& x) {
	bool f = 1; x = 0; char ch = getchar();
	while (ch < '0' || ch>'9') { ch = getchar(); }
	while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }
}
inline void write(long long x) {
	if (x > 9) write(x / 10);
	putchar(x % 10 + '0');
}
long long n, l, c[50000 + 10], dp[50000 + 10];
#define min(a, b) ((a) > (b) ? b : a)
int main() {
	read(n); read(l); l++;
	for (int i = 1; i <= n; ++i) read(c[i]), c[i]++, c[i] += c[i - 1];
	dp[0] = 0;
	for (int i = 1; i <= n; ++i) {
		dp[i] = 0x3f3f3f3f3f3f3f3fll;
		for (int j = 1; j <= i + 15; j += 16) {
			dp[i] = min(dp[i], (c[i] - c[j - 1] - l) * (c[i] - c[j - 1] - l) + dp[j - 1]);
			dp[i] = min(dp[i], (c[i] - c[j] - l) * (c[i] - c[j] - l) + dp[j]);
			dp[i] = min(dp[i], (c[i] - c[j + 1] - l) * (c[i] - c[j + 1] - l) + dp[j + 1]);
			dp[i] = min(dp[i], (c[i] - c[j + 2] - l) * (c[i] - c[j + 2] - l) + dp[j + 2]);
			dp[i] = min(dp[i], (c[i] - c[j + 3] - l) * (c[i] - c[j + 3] - l) + dp[j + 3]);
			dp[i] = min(dp[i], (c[i] - c[j + 4] - l) * (c[i] - c[j + 4] - l) + dp[j + 4]);
			dp[i] = min(dp[i], (c[i] - c[j + 5] - l) * (c[i] - c[j + 5] - l) + dp[j + 5]);
			dp[i] = min(dp[i], (c[i] - c[j + 6] - l) * (c[i] - c[j + 6] - l) + dp[j + 6]);
//			if (j + 6 >= i) break;
			dp[i] = min(dp[i], (c[i] - c[j + 7] - l) * (c[i] - c[j + 7] - l) + dp[j + 7]);
			dp[i] = min(dp[i], (c[i] - c[j + 8] - l) * (c[i] - c[j + 8] - l) + dp[j + 8]);
			dp[i] = min(dp[i], (c[i] - c[j + 9] - l) * (c[i] - c[j + 9] - l) + dp[j + 9]);
			dp[i] = min(dp[i], (c[i] - c[j + 10] - l) * (c[i] - c[j + 10] - l) + dp[j + 10]);
			dp[i] = min(dp[i], (c[i] - c[j + 11] - l) * (c[i] - c[j + 11] - l) + dp[j + 11]);
			dp[i] = min(dp[i], (c[i] - c[j + 12] - l) * (c[i] - c[j + 12] - l) + dp[j + 12]);
			dp[i] = min(dp[i], (c[i] - c[j + 13] - l) * (c[i] - c[j + 13] - l) + dp[j + 13]);
			dp[i] = min(dp[i], (c[i] - c[j + 14] - l) * (c[i] - c[j + 14] - l) + dp[j + 14]);
		}
	}
	write(dp[n]);
	return 0;
}