//  OJ: 洛谷
//  提交ID: 202905860
//  题目ID: U535037
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int MOD = 3499999;

// 计算两个数的最大公约数（GCD）
ll gcd(ll a, ll b) {
    return b == 0 ? a : gcd(b, a % b);
}

// 计算两个数的最小公倍数（LCM）
ll lcm(ll a, ll b) {
    return a * b / gcd(a, b);
}

// 计算所有数对的 LCM 之和的模 MOD
ll calculate_k(const vector<int>& a) {
    ll sum = 0;
    int n = a.size();
    unordered_map<int, int> freq;
    for (int num : a) {
        freq[num]++;
    }

    // 利用哈希表优化数对枚举
    vector<pair<int, int>> unique_nums(freq.begin(), freq.end());
    for (int i = 0; i < unique_nums.size(); i++) {
        int x = unique_nums[i].first;
        int cnt_x = unique_nums[i].second;
        for (int j = i + 1; j < unique_nums.size(); j++) {
            int y = unique_nums[j].first;
            int cnt_y = unique_nums[j].second;
            ll current_lcm = lcm(x, y);
            sum = (sum + current_lcm * cnt_x * cnt_y) % MOD;
        }
    }

    return sum;
}

// 计算一个数的数位累加和
int digit_sum(ll num) {
    int sum = 0;
    while (num > 0) {
        sum += num % 10;
        num /= 10;
    }
    return sum;
}

// 找到满足 k+1 | S 且数位累加和最小的 S
ll find_min_S(ll k) {
    ll target = k + 1; // S 必须是 target 的倍数
    // 直接构造最小数位和的 S
    // S 的最小值可能是 target 本身
    ll S = target;
    int min_sum = digit_sum(S);

    // 如果需要进一步优化，可以构造更小的 S
    // 例如，在 target 的基础上增加它的倍数，寻找数位和更小的 S
    for (ll multiple = 2; multiple <= 100; multiple++) {
        ll candidate = target * multiple;
        int candidate_sum = digit_sum(candidate);
        if (candidate_sum < min_sum) {
            min_sum = candidate_sum;
            S = candidate;
        }
        if (min_sum == 1) break; // 最小数位和为 1，直接退出
    }

    return S;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    // 输入数据
    int n;
    cin >> n;
    vector<int> a(n);
    for (int i = 0; i < n; i++) {
        cin >> a[i];
    }

    // 计算 k
    ll k = calculate_k(a);

    // 找到满足条件的 S
    ll S = find_min_S(k);

    // 输出结果
    cout << S << endl;

    return 0;
}