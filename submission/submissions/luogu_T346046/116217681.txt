//  OJ: 洛谷
//  提交ID: 116217681
//  题目ID: T346046
#pragma GCC optimize(3)
#pragma GCC target("avx")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("inline")
#pragma GCC optimize("-fgcse")
#pragma GCC optimize("-fgcse-lm")
#pragma GCC optimize("-fipa-sra")
#pragma GCC optimize("-ftree-pre")
#pragma GCC optimize("-ftree-vrp")
#pragma GCC optimize("-fpeephole2")
#pragma GCC optimize("-ffast-math")
#pragma GCC optimize("-fsched-spec")
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("-falign-jumps")
#pragma GCC optimize("-falign-loops")
#pragma GCC optimize("-falign-labels")
#pragma GCC optimize("-fdevirtualize")
#pragma GCC optimize("-fcaller-saves")
#pragma GCC optimize("-fcrossjumping")
#pragma GCC optimize("-fthread-jumps")
#pragma GCC optimize("-funroll-loops")
#pragma GCC optimize("-fwhole-program")
#pragma GCC optimize("-freorder-blocks")
#pragma GCC optimize("-fschedule-insns")
#pragma GCC optimize("inline-functions")
#pragma GCC optimize("-ftree-tail-merge")
#pragma GCC optimize("-fschedule-insns2")
#pragma GCC optimize("-fstrict-aliasing")
#pragma GCC optimize("-fstrict-overflow")
#pragma GCC optimize("-falign-functions")
#pragma GCC optimize("-fcse-skip-blocks")
#pragma GCC optimize("-fcse-follow-jumps")
#pragma GCC optimize("-fsched-interblock")
#pragma GCC optimize("-fpartial-inlining")
#pragma GCC optimize("no-stack-protector")
#pragma GCC optimize("-freorder-functions")
#pragma GCC optimize("-findirect-inlining")
#pragma GCC optimize("-fhoist-adjacent-loads")
#pragma GCC optimize("-frerun-cse-after-loop")
#pragma GCC optimize("inline-small-functions")
#pragma GCC optimize("-finline-small-functions")
#pragma GCC optimize("-ftree-switch-conversion")
#pragma GCC optimize("-foptimize-sibling-calls")
#pragma GCC optimize("-fexpensive-optimizations")
#pragma GCC optimize("-funsafe-loop-optimizations")
#pragma GCC optimize("inline-functions-called-once")
#pragma GCC optimize("-fdelete-null-pointer-checks")
#include<bits/stdc++.h>
using namespace std;
struct Edge{
	vector <int> nei;
//	void s(){sort(nei.begin(),nei.end());}
}edge[1000000];
int n,m;
//bool b[100000+10];
int ans[100000+10];
int dfs(int k){
	if(ans[k]!=0) return ans[k];
//	if(b[k]) return -1;
	ans[k]=k;
//	b[k]=true;
	for(register int i=0;i<edge[k].nei.size();++i){
		ans[k]=max(ans[k],dfs(edge[k].nei[i]));
	}
	return ans[k];
}
inline int bfs(int x){
	int maxa=-1;
	queue <int> q;
	q.push(x);
//	b[x]=true;
	while(!q.empty()){
		int d=q.front();
		maxa=max(maxa,d);
		q.pop();
		for(register int i=0;i<edge[d].nei.size();++i){
//			if(b[edge[d].nei[i]]==false) b[edge[d].nei[i]]=true,q.push(edge[d].nei[i]);
		}
	}
	return maxa;
}
int main(){
	ios::sync_with_stdio(false);
	cin>>n>>m;
	for(register int i=1;i<=m;++i){
		int x,y;
		cin>>x>>y;
		edge[x].nei.push_back(y);
//		edge[y].nei.push_back(x);
	}
//	for(register int i=1;i<=n;++i) edge[i].s();
	for(register int i=1;i<=n;++i){
//		memset(b,0,sizeof(b));
		cout<<dfs(i)<<' ';
	}
	cout<<endl;
	return 0;
}