//  OJ: 洛谷
//  提交ID: 166456398
//  题目ID: T336246
#include<bits/stdc++.h>
using namespace std;
//lsh
int w[20+5][20+5],n,m,s;
unordered_map<string,int>mp;
int lsh(string s){
	try{
		return mp.at(s);
	}
	catch(...){
		return mp[s]=++n;
	}
}
//ltk + prim
int dis[20+5],
tr[20+5][20+5] // the distance between the i,j in tree
,idk, // the number of the block
pre[20+5] // where i from to the whole tree
,ans,rd;
bool st[20+5],vis[20+5];
vector<int>blk[20+5];
void dfs(int u,int idx){
	vis[u]=1;
	blk[idx].push_back(u);
	for(int i=1;i<=n;++i){
		if(w[u][i]^0x3f3f3f3f&&!vis[i])
			dfs(i,idx);
	}
}//grt_ltk
void prim(int u,int idx){
	dis[u]=0;
	for(int&i:blk[idx]){
		int x=-1;
		for(int&num:blk[idx]){
			if(!st[num]&&(x==-1||dis[num]<dis[x]))
				x=num;
		}//find
		st[x]=1;//join
		for(int&num:blk[idx]){
			if(!st[num]&&dis[num]>w[x][num]){
				dis[num]=w[x][num];
				pre[num]=x;
			}
		}//upd
	}
	int mn=u;
	for(int&x:blk[idx]){
		if(x==u) continue;
		ans+=dis[x];//for the answer
		tr[pre[x]][x]=tr[x][pre[x]]=dis[x];//for all the tree
		if(w[1][x]<w[1][mn]) mn=x;//upd
	}
	rd++;
	ans+=w[1][mn];//ans
	tr[1][mn]=tr[mn][1]=w[1][mn];//for all the tree
}
//get max val to park
int f[25+5],fx[25+5],fy[25+5];//from fx to fy is the minest f
void Get(int x){
	//from the root x
	st[x]=1;
	for(int i=2;i<=n;++i){
		if(tr[x][i]^0x3f3f3f3f&&!st[i]){
			if(f[x]>tr[x][i]) f[i]=f[x],fx[i]=fx[x],fy[i]=fy[x];
			else f[i]=tr[x][i],fx[i]=x,fy[i]=i;
			Get(i);
		}
	}
	st[x]=0;
}
bool chk(){
	int mx=-0x3f3f3f3f,res;
	for(int i=2;i<=n;++i){
		if(tr[1][i]^0x3f3f3f3f||w[1][i]==0x3f3f3f3f) continue;
		if(mx<tr[fx[i]][fy[i]]-w[1][i]){
			mx=tr[fx[i]][fy[i]]-w[1][i];
			res=i;
		}
	}
	//get the max del number
	if(mx<0) return 0;
	ans-=mx;
	tr[1][res]=tr[res][1]=w[1][res];
	tr[fx[res]][fy[res]]=tr[fy[res]][fx[res]]=0x3f3f3f3f;
	//del it
	f[res]=w[1][res];
	fx[res]=1,fy[res]=res;
	st[1]=1;//reset
	Get(res);//upd oth
	return 1;
}
int main(){
	ios_base::sync_with_stdio(false);
	memset(w,0x3f,sizeof w);
	lsh("Park");
	cin>>m;
	for(int i=1;i<=m;++i){
		string a,b;int c;
		cin>>a>>b>>c;
		int v1=lsh(a),v2=lsh(b);
		w[v1][v2]=w[v2][v1]=min(w[v1][v2],c);
	}
	//gt ltk + prim
	cin>>s;
	memset(dis,0x3f,sizeof dis);
	memset(tr,0x3f,sizeof tr);
	vis[1]=1;
	for(int i=2;i<=n;++i){
		if(!vis[i]){
			idk++;
			blk[idk].clear();
			dfs(i,idk);
			prim(i,idk);
		}
	}
	//get all ... 
	memset(st,0,sizeof st);
	Get(1);
	while(rd<s){
		if(!chk()) break;
		rd++;
	}
	//get the last some
	cout<<"Total miles driven: "<<ans<<endl;
	return 0;
}