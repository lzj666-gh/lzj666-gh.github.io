//  OJ: 洛谷
//  提交ID: 166734914
//  题目ID: T331693
#include<bits/stdc++.h>
using namespace std;
struct Edge{
    int v,w,nxt;
}edge[500000+10];
int head[100000+10],idx;
void add(int u,int v,int w){
	edge[++idx]={v,w,head[u]};
	head[u]=idx;
}
int disl[100000+10],l,r,disr[100000+10];
namespace get_one{
	pair<int,int> dfs1(int k,int fa){ // get the point l
		pair<int,int>ans=make_pair(0,k);
		for(int i=head[k];i;i=edge[i].nxt){
			if(edge[i].v==fa) continue;
			pair<int,int>p=dfs1(edge[i].v,k);
			p.first+=edge[i].w;
			if(p.first>ans.first) ans=p;
		}
		return ans;
	}
	void dfs2(int k,int fa,int sum){ // get the point r && get the dis to l
		disl[k]=sum;
		if(disl[k]>disl[r]) r=k;
		int mx=0;
		for(int i=head[k];i;i=edge[i].nxt){
			if(edge[i].v==fa) continue;
			dfs2(edge[i].v,k,sum+edge[i].w);
		}
	}
	void dfs3(int k,int fa,int sum){ //get the dis to r
		disr[k]=sum;
		int mx=0;
		for(int i=head[k];i;i=edge[i].nxt){
			if(edge[i].v==fa) continue;
			dfs3(edge[i].v,k,sum+edge[i].w);
		}
	}
	void get(){
		l=dfs1(1,0).second;
		dfs2(l,0,0);
		dfs3(r,0,0);
	}
}
bool isl[100000+10];
int len[100000+10];
vector<int>path;
bool dfs1(int k,int fa){
	if(k==r) return (path.push_back(k),isl[k]=1);
	for(int i=head[k];i;i=edge[i].nxt){
		if(edge[i].v==fa) continue;
		if(dfs1(edge[i].v,k)) return (path.push_back(k),isl[k]=1);
	}
	return 0;
}
void dfs2(int k,int fa){
	int mx=0;
	for(int i=head[k];i;i=edge[i].nxt){
		if(edge[i].v==fa||isl[edge[i].v]) continue;
		dfs2(edge[i].v,k);
		mx=max(len[edge[i].v]+edge[i].w,mx);
	}
	len[k]=mx;
}
int n,s;
int main(){
	ios_base::sync_with_stdio(false);
	cin>>n>>s;
	for(int i=1,u,v,w;i<n;++i) cin>>u>>v>>w,add(u,v,w),add(v,u,w);
	get_one::get();
	dfs1(l,0);
	reverse(path.begin(),path.end());
	for(int i:path) dfs2(i,0);
	int ans=0x3f3f3f3f;
//	cout<<l<<' '<<r<<endl;
//	for(int k:path) cout<<k<<','<<len[k]<<','<<disl[k]<<','<<disr[k]<<' ';cout<<endl;
	for(int i=0;i<path.size();++i){
		for(int j=i;j<path.size();++j){
			if(disl[path[j]]-disl[path[i]]>s) break;
//			cout<<i<<' '<<j<<' '<<path[i]<<' '<<path[j]<<' '<<disl[path[i]]<<' '<<disl[path[j]]<<endl;
			int now=0;
			for(int k=0;k<path.size();++k){
				if(k<=i) now=max(now,disl[path[i]]-disl[path[k]]+len[path[k]]);
				else if(k<=j) now=max(now,len[path[k]]);
				else now=max(now,disr[path[j]]-disr[path[k]]+len[path[k]]);
			}
			ans=min(ans,now);
//			cout<<path[i]<<' '<<path[j]<<' '<<now<<' '<<ans<<endl;
		}
	}
	cout<<ans<<endl;
	return 0;
}