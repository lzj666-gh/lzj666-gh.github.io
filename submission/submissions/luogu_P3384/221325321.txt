//  OJ: 洛谷
//  提交ID: 221325321
//  题目ID: P3384
#include<bits/stdc++.h>
#define int long long
using namespace std;
constexpr int N = 1e5 + 5, M = 2e5 + 5; int mod;
struct Edge {
	int v, nxt;
}edge[M];
int head[N], idx;
void add(int u, int v) {
	edge[++idx] = { v,head[u] };
	head[u] = idx;
}
void addedge(int u, int v) {
	add(u, v); add(v, u);
}
int val[N], a[N];
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
	struct Node {
		int sum, lzy;
	}tree[N << 2];
	void pushup(int p) {
		tree[p].sum = (tree[lc(p)].sum + tree[rc(p)].sum) % mod;
	}
	void pushdown(int p, int l, int r) {
		if (tree[p].lzy) {
			tree[lc(p)].sum += (mid - l + 1) * tree[p].lzy; tree[lc(p)].sum %= mod;
			tree[rc(p)].sum += (r - mid) * tree[p].lzy; tree[rc(p)].sum %= mod;
			tree[lc(p)].lzy += tree[p].lzy; tree[lc(p)].lzy %= mod;
			tree[rc(p)].lzy += tree[p].lzy; tree[rc(p)].lzy %= mod;
			tree[p].lzy = 0;
		}
	}
	void build(int p, int l, int r) {
		if (l == r) {
			tree[p].sum = val[l];
			return;
		}
		build(lson); build(rson);
		pushup(p);
	}
	void add(int p, int l, int r, int L, int R, int val) {
		if (R < l || r < L) return;
		if (L <= l && r <= R) {
			tree[p].sum += (r - l + 1) * val; tree[p].sum %= mod;
			tree[p].lzy += val; tree[p].lzy %= mod;
			return;
		}
		pushdown(p, l, r);
		add(lson, L, R, val);
		add(rson, L, R, val);
		pushup(p);
	}
	int query(int p, int l, int r, int L, int R) {
		if (R < l || r < L) return 0;
		if (L <= l && r <= R) return tree[p].sum;
		pushdown(p, l, r);
		return (query(lson, L, R) + query(rson, L, R)) % mod;
	}
}t;
int dfn[N], idk, ed[N], hvy[N], siz[N], top[N], f[N], dep[N];
void dfs1(int x, int fa) {
	siz[x] = 1; f[x] = fa; dep[x] = dep[fa] + 1;
	for (int i = head[x]; i; i = edge[i].nxt)
		if (edge[i].v ^ fa)
			dfs1(edge[i].v, x), siz[x] += siz[edge[i].v],
			(siz[edge[i].v] > siz[hvy[x]]) && (hvy[x] = edge[i].v);
}
void dfs2(int x, int fa) {
	dfn[x] = ++idk;
	if (hvy[x]) top[hvy[x]] = top[x], dfs2(hvy[x], x);
	for (int i = head[x]; i; i = edge[i].nxt)
		if ((edge[i].v ^ fa) && (edge[i].v ^ hvy[x]))
			top[edge[i].v] = edge[i].v, dfs2(edge[i].v, x);
	ed[x] = idk;
}
int n, m, rt;
void addline(int x, int y, int val) {
	while (top[x] ^ top[y]) {
		if (dep[x] < dep[y]) swap(x, y);
		t.add(1, 1, n, dfn[top[x]], dfn[x], val);
		x = f[top[x]];
	}
	if (dep[x] < dep[y]) swap(x, y);
	t.add(1, 1, n, dfn[y], dfn[x], val);
}
int queryline(int x, int y) {
	int ans = 0;
	while (top[x] ^ top[y]) {
		if (dep[x] < dep[y]) swap(x, y);
		ans += t.query(1, 1, n, dfn[top[x]], dfn[x]);
		ans %= mod;
		x = f[top[x]];
	}
	if (dep[x] < dep[y]) swap(x, y);
	return (ans + t.query(1, 1, n, dfn[y], dfn[x])) % mod;
}
void addtree(int x, int val) {
	t.add(1, 1, n, dfn[x], ed[x], val);
}
int querytree(int x) {
	return t.query(1, 1, n, dfn[x], ed[x]);
}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m >> rt >> mod;
	for (int i = 1; i <= n; ++i) cin >> a[i];
	for (int i = 1, u, v; i < n; ++i) cin >> u >> v, addedge(u, v);
	dfs1(rt, rt); top[rt] = rt; dfs2(rt, rt);
	for (int i = 1; i <= n; ++i) val[dfn[i]] = a[i];
	t.build(1, 1, n);
	while (m--) {
		int opt;
		cin >> opt;
		if (opt == 1) {
			int x, y, z; cin >> x >> y >> z;
			addline(x, y, z);
		}
		if (opt == 2) {
			int x, y; cin >> x >> y;
			cout << queryline(x, y) << endl;
		}
		if (opt == 3) {
			int x, z; cin >> x >> z;
			addtree(x, z);
		}
		if (opt == 4) {
			int x; cin >> x;
			cout << querytree(x) << endl;
		}
	}
	return 0;
}