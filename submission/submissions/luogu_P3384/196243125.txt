//  OJ: 洛谷
//  提交ID: 196243125
//  题目ID: P3384
#include<bits/stdc++.h>
//#define output(name, l, r) cout << #name << ':' << endl; for (int i = (l); i <= (r); ++i) cout << name##[i] << ' '; cout << endl;
using namespace std;
namespace Tmp {
	struct Edge {
		int v, nxt;
	}edge[1000000 + 10];
	int head[500000 + 10], idx;
	void add(int u, int v) {
		edge[++idx] = { v,head[u] };
		head[u] = idx;
	}
}
using Tmp::edge, Tmp::add, Tmp::head;
int n, m, s, p, a[500000 + 10], hson[500000 + 10], siz[500000 + 10], fa[500000 + 10], belong[500000 + 10], dep[500000 + 10], dfn[500000 + 10], mxson[500000 + 10], idx;
void dfs1(int x, int f) {
	fa[x] = f; dep[x] = dep[f] + 1;
	for (int i = head[x]; i; i = edge[i].nxt) {
		if (edge[i].v == f) continue;
		dfs1(edge[i].v, x);
		siz[x] += siz[edge[i].v];
		if (siz[edge[i].v] > siz[hson[x]]) hson[x] = edge[i].v;
	}
	siz[x]++;
}
void dfs2(int x, int idk) {
	mxson[x] =dfn[x] = ++idx;
	belong[x] = idk;
	if (hson[x]) dfs2(hson[x], idk), mxson[x] = max(mxson[x], mxson[hson[x]]);
	for (int i = head[x]; i; i = edge[i].nxt) {
		if (edge[i].v == fa[x] || edge[i].v == hson[x]) continue;
		dfs2(edge[i].v, edge[i].v);
		mxson[x] = max(mxson[x], mxson[edge[i].v]);
	}
}
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
	struct point {
		int l, r;
		long long sum, lazy;
		point() :l(0), r(0), sum(0), lazy(0) {}
		point(int ll, int rr, long long ssum, long long lzy) :l(ll), r(rr), sum(ssum), lazy(lzy) {}
	}tree[4 * 100000 + 10];
	int idx = 1;
	void pushdown(int p) {
		if (tree[p].lazy) {
			tree[lc(p)].sum += (tree[lc(p)].r - tree[lc(p)].l + 1) * tree[p].lazy;
			tree[rc(p)].sum += (tree[rc(p)].r - tree[rc(p)].l + 1) * tree[p].lazy;
			tree[lc(p)].lazy += tree[p].lazy;
			tree[rc(p)].lazy += tree[p].lazy;
			tree[p].lazy = 0;
		}
	}
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
	}
	void add(int p, int l, int r, int k) {
		if (tree[p].l > r || tree[p].r < l) return;
		if (tree[p].l == tree[p].r) {
			if (tree[p].lazy) tree[p].lazy = 0;
			tree[p].sum += k;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			tree[p].lazy += k;
			pushdown(p);
			pushup(p);
			return;
		}
		pushdown(p);
		add(lc(p), l, r, k);
		add(rc(p), l, r, k);
		pushup(p);
	}
	long long query(int p, int l, int r) {
		if (tree[p].l > r || tree[p].r < l) return 0;
		if (tree[p].l == tree[p].r) {
			if (tree[p].lazy) tree[p].lazy = 0;
			return tree[p].sum;
		}
		if (l <= tree[p].l && tree[p].r <= r) return tree[p].sum;
		pushdown(p);
		long long ans = query(lc(p), l, r) + query(rc(p), l, r);
		pushup(p);
		return ans;
	}
	void build(int p, int l, int r, const vector<int>& v) {
		tree[p].l = l, tree[p].r = r, tree[p].lazy = 0;
		if (l == r) {
			tree[p] = { l,r,v[l],0 };
			return;
		}
		build(lc(p), l, l + r >> 1, v);
		build(rc(p), (l + r >> 1) + 1, r, v);
		pushup(p);
	}
}t;
void add(int a, int b, int k) {
	while (belong[a] ^ belong[b]) {
		if (dep[belong[a]] < dep[belong[b]]) swap(a, b);
		t.add(1, dfn[belong[a]], dfn[a], k);
		a = fa[belong[a]];
	}
	t.add(1, min(dfn[a], dfn[b]), max(dfn[a], dfn[b]), k);
}
long long query(int a, int b) {
	long long ans = 0;
	while (belong[a] ^ belong[b]) {
		if (dep[belong[a]] < dep[belong[b]]) swap(a, b);
		ans += t.query(1, dfn[belong[a]], dfn[a]);
		a = fa[belong[a]];
	}
	return ans + t.query(1, min(dfn[a], dfn[b]), max(dfn[a], dfn[b]));
}
void add_son(int a, int k) {
	//cout << "add from " << dfn[a] << " to " << mxson[a] << endl;
	t.add(1, dfn[a], mxson[a], k);
}
long long query_son(int a) {
	//cout << "query from " << dfn[a] << " to " << mxson[a] << endl;
	return t.query(1, dfn[a], mxson[a]);
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m >> s >> p;
	for (int i = 1; i <= n; ++i) cin >> a[i];
	for (int i = 1, a, b; i < n; ++i) cin >> a >> b, add(a, b), add(b, a);
	dfs1(s, 0);
	dfs2(s, s);
	vector<int>v(n + 1);
	for (int i = 1; i <= n; ++i) v[dfn[i]] = a[i];
	t.build(1, 1, n, v);
	//output(dfn, 1, n);
	//output(mxson, 1, n);
	//output(belong, 1, n);
	//for (int i = 1; i <= n; ++i) cout << t.query(1, i, i) << ' '; cout << endl;
	while (m--) {
		int opt, x, y, z;
		cin >> opt >> x;
		if (opt == 1) {
			cin >> y >> z;
			add(x, y, z);
		}
		else if (opt == 2) {
			cin >> y;
			cout << query(x, y) << endl;
		}
		else if (opt == 3) {
			cin >> y;
			add_son(x, y);
		}
		else if (opt == 4) {
			cout << query_son(x) << endl;
		}
		//for (int i = 1; i <= n; ++i) cout << t.query(1, i, i) << ' '; cout << endl;
	}
	return 0;
}