//  OJ: 洛谷
//  提交ID: 182711110
//  题目ID: T527411
#include<bits/stdc++.h>
#define int long long
#pragma warning(disable:4996)
#pragma warning(disable:6031)
//#define ONLINE
using namespace std;
using ui = unsigned;
constexpr int mod = 13331;
class Map {
protected:
	int idx, begin[mod];
	struct Node {
		int nxt;
		ui val;
		string data[2];
		Node() :nxt(0), val(0) {}
	}a[500005];
public:
	Map() :idx(0) { memset(begin, -1, sizeof begin); }
	void insert(ui x, const string& cur) {
		int s = x % mod;
		for (int i = begin[s]; i != -1; i = a[i].nxt)
			if (a[i].val == x) {
				if (a[i].data[0].empty() || cur < a[i].data[0]) {
					a[i].data[1] = a[i].data[0];
					a[i].data[0] = cur;
				}
				else if (a[i].data[1].empty() || cur < a[i].data[1])
					a[i].data[1] = cur;
				return;
			}
		a[idx].nxt = begin[s]; a[idx].val = x;
		a[idx].data[0] = cur; begin[s] = idx;
		idx++;
	}
	string* operator[](const ui& x) {
		int s = x % mod;
		for (int i = begin[s]; i != -1; i = a[i].nxt)
			if (a[i].val == x) return a[i].data;
		return nullptr;

	}
}mp[4];
int l, m;
string cur, ans; ui p;
void iniit(int stp = 0, string cur = string(), ui nw = 0) {
	if (stp >= 1 && stp <= m) {
		mp[stp - 1].insert(nw, cur);
	}
	if (stp < m)
		for (char c = 'A'; c <= 'Z'; ++c)
			iniit(stp + 1, cur + c, nw * p + c);
}
void get(int stp, string cur, ui nw, const ui& T) {
	if (cur > ans) return;
	if (stp)
		for (char c = 'A'; c <= 'Z'; ++c)
			get(stp - 1, cur + c, nw * p + c, T);
	else {
		ui q = 1;
		for (int i = 1; i <= m; ++i) {
			q *= p;
			string* tmp = mp[i - 1][T - nw * q];
			if (tmp != nullptr) {
				for (int j = 0; j < 2; ++j) if (!tmp[j].empty()) {
					string now = cur + tmp[j];
					if (now != ::cur && now < ans) ans = now;
				}
			}
		}
	}
}
signed main() {
#ifdef ONLINE
	freopen("hash.in", "r", stdin);
	freopen("hash.out", "w", stdout);
#endif
	cin.tie(0)->sync_with_stdio(false);
	int T;
	cin >> T >> p >> l;
	m = (l - 1) / 2 + 1;
	iniit();
	while (T--) {
		cin >> cur;
		ui nw = 0;
		int sz = cur.size();
		for (int i = 0; i < sz; ++i) nw = nw * p + cur[i];
		ans = "nanan";
		for (int i = 1; i <= m; ++i) {
			string* tmp = mp[i - 1][nw];
			if (tmp != nullptr) {
				if (tmp[0] == cur) {
					if (!tmp[1].empty())
						ans = min(ans, tmp[1]);
				}
				else ans = min(ans, tmp[0]);
			}
		}
		if (l > m)
			get(l - m, "", 0, nw);
		if (ans == "nanan") cout << "-1" << endl;
		else cout << ans << endl;
	}
	return 0;
}