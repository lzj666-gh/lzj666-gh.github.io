//  OJ: 洛谷
//  提交ID: 167913629
//  题目ID: P3372
#include<bits/stdc++.h>
using namespace std;
//左闭右开区间
struct Seg_Tree {
#define lc(p) ((tree[p].ls == -1) ? (tree[p].ls = ++idx) : (tree[p].ls))
#define rc(p) ((tree[p].rs == -1) ? (tree[p].rs = ++idx) : (tree[p].rs))
	struct point {
		int l, r, ls, rs;
		long long sum, lazy;
		point() :l(0), r(0), ls(-1), rs(-1), sum(0), lazy(0) {}
		point(int ll, int rr, long long ssum, long long lzy) :l(ll), r(rr), ls(-1), rs(-1), sum(ssum), lazy(lzy) {}
	}tree[4 * 100000 + 10];
	int idx = 1;
	void pushdown(int p) {
		if (tree[p].lazy) {
			tree[lc(p)].sum += (tree[lc(p)].r - tree[lc(p)].l) * tree[p].lazy;
			tree[rc(p)].sum += (tree[rc(p)].r - tree[rc(p)].l) * tree[p].lazy;
			tree[lc(p)].lazy += tree[p].lazy;
			tree[rc(p)].lazy += tree[p].lazy;
			tree[p].lazy = 0;
		}
	}
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
	}
	void add(int p, int l, int r, int k) {
		if (tree[p].l >= r || tree[p].r <= l) return;
		if (tree[p].l == tree[p].r - 1) {
			if (tree[p].lazy) tree[p].lazy = 0;
			tree[p].sum += k;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			tree[p].lazy += k;
			pushdown(p);
			pushup(p);
			return;
		}
		pushdown(p);
		add(lc(p), l, r, k);
		add(rc(p), l, r, k);
		pushup(p);
	}
	long long query(int p, int l, int r) {
		if (tree[p].l >= r || tree[p].r <= l) return 0;
		if (tree[p].l == tree[p].r - 1) {
			if (tree[p].lazy) tree[p].lazy = 0;
			return tree[p].sum;
		}
		if (l <= tree[p].l && tree[p].r <= r) return tree[p].sum;
		pushdown(p);
		long long ans = 1ll * query(lc(p), l, r) + query(rc(p), l, r);
		pushup(p);
		return ans;
	}
	void build(int p, int l, int r, const vector<int>& v) {
		tree[p].l = l, tree[p].r = r, tree[p].lazy = 0;
		if (l == r - 1) {
			tree[p] = { l,r,v[l],0 };
			return;
		}
		build(lc(p), l, l + r >> 1, v);
		build(rc(p), l + r >> 1, r, v);
		pushup(p);
	}
	void sett(int p, int x, int k) {
		if (tree[p].l > x || tree[p].r <= x) return;
		if (tree[p].l == tree[p].r - 1 && tree[p].l == x) {
			if (tree[p].lazy) tree[p].lazy = 0;
			tree[p].sum = k;
			return;
		}
		pushdown(p);
		sett(lc(p), x, k);
		sett(rc(p), x, k);
		pushup(p);
	}
	void clear(int p, int l, int r) {
		tree[p].l = l, tree[p].r = r, tree[p].lazy = 0, tree[p].sum = 0;
		if (l == r - 1) return;
		clear(lc(p), l, l + r >> 1);
		clear(rc(p), l + r >> 1, r);
	}
}t;
int n, m, opt, x, y, k;
int main(){
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	vector<int>v; v.push_back(0); 
	for (int i = 1, tmp; i <= n; ++i) cin >> tmp, v.push_back(tmp);
	t.build(1, 1, n + 1, v);
	while (m--) {
		cin >> opt >> x >> y; y++;
		if (opt ^ 2) {
			cin >> k;
			t.add(1, x, y, k);
		}
		else {
			cout << t.query(1, x, y) << endl;
		}
	}
	return 0;
}