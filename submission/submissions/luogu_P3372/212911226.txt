//  OJ: 洛谷
//  提交ID: 212911226
//  题目ID: P3372
#include<bits/stdc++.h>
#define int long long
using namespace std;
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid(l, r) (l + r >> 1)
	int n;
	vector<int> t, lzy;
	Seg_Tree(int n = 0) : n(n), t(4 * n), lzy(4 * n) {}
	void pushup(int p) {
		t[p] = t[lc(p)] + t[rc(p)];
	}
	void pushdown(int p, int tl, int tr) {
		if (lzy[p] != 0) {
			t[lc(p)] += lzy[p];
			t[rc(p)] += lzy[p];
			lzy[lc(p)] += lzy[p];
			lzy[rc(p)] += lzy[p];
			lzy[p] = 0;
		}
	}
	void build(int p, int tl, int tr, vector<int>& a) {
		//cerr << p << " " << tl << " " << tr << " " << a.size() << endl;
		if (tl == tr) {
			t[p] = a[tl];
			return;
		}
		build(lc(p), tl, mid(tl, tr), a);
		build(rc(p), mid(tl, tr) + 1, tr, a);
		pushup(p);
	}
	void add(int p, int tl, int tr, int l, int r, int x) {
		if (l > r) return;
		if (tr < l || r < tl) return;
		if (l == tl && r == tr) {
			t[p] += x;
			lzy[p] += x;
			return;
		}
		pushdown(p, tl, tr);
		add(lc(p), tl, mid(tl, tr), l, min(r, mid(tl, tr)), x);
		add(rc(p), mid(tl, tr) + 1, tr, max(l, mid(tl, tr) + 1), r, x);
		pushup(p);
	}
	int query(int p, int tl, int tr, int l, int r) {
		if (l > r) return 0;
		if (tr < l || r < tl) return 0;
		if (l == tl && r == tr) return t[p];
		pushdown(p, tl, tr);
		return query(lc(p), tl, mid(tl, tr), l, min(r, mid(tl, tr))) + query(rc(p), mid(tl, tr) + 1, tr, max(l, mid(tl, tr) + 1), r);
	}
}t(1e5);
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	t.build(1, 1, n, a);
	while (m--) {
		int opt, l, r, x;
		cin >> opt >> l >> r;
		if (opt == 1) {
			cin >> x;
			t.add(1, 1, n, l, r, x);
		}
		else
			cout << t.query(1, 1, n, l, r) << endl;
	}
	return 0;
}