//  OJ: 洛谷
//  提交ID: 216620985
//  题目ID: P3324
#include<bits/stdc++.h>
#define File "war"
using namespace std;
const double eps = 1e-3, inf = 1e15;
struct Edge {
	double w;
	int v, nxt;
}edge[100000 + 10];
int head[500], idx = 1;
void add(int u, int v, double w) {
	edge[++idx] = { w,v,head[u] };
	head[u] = idx;
}
int h[500];
struct Tmp {
	int data;
	Tmp(int data = 0) :data(data) {}
	friend bool operator<(const Tmp& a, const Tmp& b) {
		return h[a.data] < h[b.data];
	}
};
priority_queue<Tmp> pq;
bool vis[500];
void bfs(int t) {
	memset(h, 0x3f, sizeof h);
	queue<int>q;
	h[t] = 0;
	q.push(t);
	while (!q.empty()) {
		int now = q.front(); q.pop();
		for (int i = head[now]; i; i = edge[i].nxt)
			if (edge[i ^ 1].w && h[edge[i].v] > h[now] + 1)
				h[edge[i].v] = h[now] + 1, q.push(edge[i].v);
	}
}
double more[500];
void push(int now, int s, int t) {
	for (int i = head[now]; i; i = edge[i].nxt) {
		if (edge[i].w > eps && h[edge[i].v] + 1 == h[now]) {
			double flow = min(more[now], edge[i].w);
			more[edge[i].v] += flow; more[now] -= flow;
			edge[i].w -= flow; edge[i ^ 1].w += flow;
			if (!vis[edge[i].v] && edge[i].v != s && edge[i].v != t)
				vis[edge[i].v] = 1, pq.push(edge[i].v);
			if (more[now] == 0) return;
		}
	}
}
void relabel(int now) {
	h[now] = 0x3f3f3f3f;
	for (int i = head[now]; i; i = edge[i].nxt)
		if (edge[i].w > eps && h[edge[i].v] + 1 < h[now])
			h[now] = h[edge[i].v] + 1;
}
double hlpp(int n, int s, int t) {
	static int gap[500];
	bfs(t);
	if (h[s] == 0x3f3f3f3f) return 0;
	h[s] = n;
	for (int i = 1; i <= n; ++i) if (h[i] ^ 0x3f3f3f3f) gap[h[i]]++;
	for (int i = head[s]; i; i = edge[i].nxt) {
		double w = edge[i].w;
		if (w > eps) {
			edge[i].w -= w; edge[i ^ 1].w += w;
			more[s] -= w; more[edge[i].v] += w;
			if (!vis[edge[i].v] && edge[i].v != s && edge[i].v != t) {
				vis[edge[i].v] = 1;
				pq.push(edge[i].v);
			}
		}
	}
	while (!pq.empty()) {
		int now = pq.top().data; pq.pop();
		vis[now] = 0;
		push(now, s, t);
		if (more[now] > eps && (h[now] ^ 0x3f3f3f3f)) {
			if (!--gap[h[now]])
				for (int i = 1; i <= n; i++)
					if (h[i] < n + 1 && h[i] > h[now] && i != s && i != t)
						h[i] = n + 1;
			relabel(now); ++gap[h[now]];
			pq.push(now); vis[now] = 1;
		}
	}
	return more[t];
}
int a[100], b[100], n, m, ans;
bool atk[100][100];
void addedge(int u, int v, double w) {
	add(u, v, w); add(v, u, 0);
}
bool check(double mid) {
	int s = n + m + 1, t = n + m + 2;
	memset(head, 0, sizeof head); idx = 1;
	memset(vis, 0, sizeof vis); memset(more, 0, sizeof more);
	for (int i = 1; i <= n; ++i) addedge(i + m, t, a[i]);
	for (int i = 1; i <= m; ++i) addedge(s, i, mid * b[i]);
	for (int i = 1; i <= m; ++i)
		for (int j = 1; j <= n; ++j)
			if (atk[i][j])
				addedge(i, j + m, inf);
	return fabs(hlpp(n + m + 2, s, t) - ans) < eps;
}
int main() {
	cin >> n >> m;
	for (int i = 1; i <= n; ++i) cin >> a[i], ans += a[i];
	for (int i = 1; i <= m; ++i) cin >> b[i];
	for (int i = 1; i <= m; ++i)
		for (int j = 1; j <= n; ++j)
			cin >> atk[i][j];
	double l = 0, r = 1e8;
	while (fabs(r - l) > eps) {
		double mid = (l + r) / 2;
		if (check(mid)) r = mid;
		else l = mid;
	}
	cout << fixed << setprecision(8) << l << endl;
	return 0;
}