//  OJ: 洛谷
//  提交ID: 116358683
//  题目ID: T138229
#include<bits/stdc++.h>
using namespace std;
struct Edge {
    int destination;
    int weight;
};
vector<vector<Edge> > graph(500);
int dijkstra(int n,int m){
    vector<int> distances(n+1,INT_MAX/2-1);
    distances[1]=0;
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > pq;
    pq.push({0,1});
    while(!pq.empty()){
        int dist=pq.top().first;
        int node=pq.top().second;
        pq.pop();
        if(dist>distances[node]){
            continue;
        }
        for(const auto& edge:graph[node]){
            int newDist=distances[node]+edge.weight;
            if(newDist<distances[edge.destination]){
                distances[edge.destination]=newDist;
                pq.push({newDist,edge.destination});
            }
        }
    }
    return distances[n]==INT_MAX/2-1?-1:distances[n];
}
int main(){
    int n,m;
    cin>>n>>m;
    graph.resize(n+1);
    for(int i=0;i<m;++i){
        int x,y,z;
        cin>>x>>y>>z;
        graph[x].push_back({y,z});
    }
    int shortestDistance=dijkstra(n,m);
    cout<<shortestDistance<<endl;
    return 0;
}