//  OJ: 洛谷
//  提交ID: 179189876
//  题目ID: P3831
#include<bits/stdc++.h>
using namespace std;
int head[100000 + 10], idx;
struct Edge {
	int v, w, nxt;
}edge[200000 + 10];
struct Node {
	int num, cost;
	Node(int n, int c) :num(n), cost(c) {}
	friend bool operator<(const Node& a, const Node& b) {
		return a.cost > b.cost;
	}
};
void add(int u, int v, int w) {
	edge[++idx] = { v,w,head[u] };
	head[u] = idx;
}
int n, m;
bool vis[100000 + 10];
int dis[100000 + 10], a1, b1, a2, b2;
struct Nodee {
	int x, y, idx;
}a[100000 + 10];
int dij() {
	memset(vis, 0, sizeof vis);
	memset(dis, 0x3f, sizeof dis);
	priority_queue<Node>q;
	q.push(Node(n - 1, 0));
	while (!q.empty()) {
		Node now = q.top(); q.pop();
		if (now.num == n) {
			return now.cost;
		}
		if (vis[now.num]) continue;
		vis[now.num] = 1;
		for (int i = head[now.num]; i; i = edge[i].nxt)
			if (edge[i].w + now.cost < dis[edge[i].v]) {
				dis[edge[i].v] = edge[i].w + now.cost;
				q.push(Node(edge[i].v, dis[edge[i].v]));
			}
	}
	return -1;
}
signed main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	n = m + 2;
	for (int i = 1; i <= n; ++i) cin >> a[i].x >> a[i].y, a[i].idx = i;
	sort(a + 1, a + n + 1, [](const Nodee& a, const Nodee& b)->bool {return a.x == b.x ? a.y < b.y : a.x < b.x; });
	for (int i = 1; i < n; ++i) if (a[i].x == a[i + 1].x)
		add(a[i].idx, a[i + 1].idx, (a[i + 1].y - a[i].y) * 2),
		add(a[i + 1].idx, a[i].idx, (a[i + 1].y - a[i].y) * 2);
	sort(a + 1, a + n + 1, [](const Nodee& a, const Nodee& b)->bool {return a.y == b.y ? a.x < b.x : a.y < b.y; });
	for (int i = 1; i < n; ++i) if (a[i].y == a[i + 1].y)
		add(a[i].idx + n, a[i + 1].idx + n, (a[i + 1].x - a[i].x) * 2),
		add(a[i + 1].idx + n, a[i].idx + n, (a[i + 1].x - a[i].x) * 2);
	for (int i = 1; i <= n - 2; ++i) add(i, i + n, 1), add(i + n, i, 1);
	add(n - 1, n - 1 + n, 0);
	add(n - 1 + n, n - 1, 0);
	add(n, n + n, 0);
	add(n + n, n, 0);
	cout << dij() << endl;
	return 0;
}