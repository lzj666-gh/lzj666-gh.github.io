//  OJ: 洛谷
//  提交ID: 202921290
//  题目ID: P2522
#include<bits/stdc++.h>
#define min(x, y) (x < y ? x : y)
#define ans(x) (t[p - 1] * ((x) / p) + t[(x) % p])
using namespace std;
namespace IO {
	const int SIZE = (1 << 20) + 1;
	char ibuf[SIZE], * iS, * iT, obuf[SIZE], * oS = obuf, * oT = obuf + SIZE - 1;
	char _st[55];
	int _qr = 0;
#define gc()  (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++)
	inline void qread() {}
	template<class T1, class ...T2>
	inline void qread(T1& IEE, T2&... ls) {
		T1 __ = 0, ___ = 1;
		char ch;
		while (!isdigit(ch = gc())) ___ = (ch == '-') ? -___ : ___;
		do {
			__ = (__ << 1) + (__ << 3) + (ch ^ 48);
		} while (isdigit(ch = gc()));
		__ *= ___;
		IEE = __;
		qread(ls...);
		return;
	}
	inline void flush() {
		fwrite(obuf, 1, oS - obuf, stdout);
		oS = obuf;
		return;
	}
	inline void putc_(char _x) {
		*oS++ = _x;
		if (oS == oT) flush();
	}
	inline void qwrite() {}
	template<class T1, class ...T2>
	inline void qwrite(T1 IEE, T2... ls) {
		if (!IEE) putc_('0');
		if (IEE < 0) putc_('-'), IEE = -IEE;
		while (IEE) _st[++_qr] = IEE % 10 + '0', IEE /= 10;
		while (_qr) putc_(_st[_qr--]);
		qwrite(ls...);
		return;
	}
	struct Flusher_ { ~Flusher_() { flush(); } }io_flusher;
}
using namespace IO;
long long gcd(long long a, long long b) {
	static long long tmp;
	while (b) {
		tmp = a;
		a = b;
		b = tmp % b;
	}
	return a;
}
bool isp[10000000 + 10];
vector<int>prm;
long long mu[10000000 + 10], f[10000000 + 10];
void getprm() {
	memset(isp, 1, sizeof isp);
	isp[0] = isp[1] = 0;
	mu[1] = 1;
	for (int i = 2; i <= 10000000; ++i) {
		if (isp[i])
			prm.push_back(i),
			mu[i] = -1;
		for (int j = 0; j < prm.size(); ++j) {
			if (i * prm[j] > 10000000) break;
			isp[i * prm[j]] = 0;
			if (i % prm[j] == 0) break;
			mu[i * prm[j]] = -mu[i];
		}
	}
	for (int i = 1; i <= 10000000; ++i)
		f[i] = f[i - 1] + mu[i];
}
int k;
long long query(int x, int y) {
	if (x > y) x ^= y ^= x ^= y;
	x /= k; y /= k;
	long long ans = 0;
	for (int l = 1, r = 0; l <= x; l = r + 1) {
		int xr = x / (x / l), yr = y / (y / l);
		r = min(xr, yr);
		ans += (f[r] - f[l - 1]) * (x / l) * (y / l);
	}
	return ans;
}
signed main() {
	getprm();
	int T;
	qread(T);
	while (T--) {
		static int a, b, c, d;
		qread(a, b, c, d, k);
		qwrite(query(b, d) - query(a - 1, d) - query(b, c - 1) + query(a - 1, c - 1)); 
		putc_('\n');
	}
	return 0;
}