//  OJ: 洛谷
//  提交ID: 202835848
//  题目ID: P4051
#include<bits/stdc++.h>
using namespace std;
namespace IO {
	const int SIZE = (1 << 20) + 1;
	char ibuf[SIZE], * iS, * iT, obuf[SIZE], * oS = obuf, * oT = obuf + SIZE - 1;
	char _st[55];
	int _qr = 0;
#define gc()  (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++)
	inline void qread() {}
	template<class T1, class ...T2>
	inline void qread(T1& IEE, T2&... ls) {
		T1 __ = 0, ___ = 1;
		char ch;
		while (!isdigit(ch = gc())) ___ = (ch == '-') ? -___ : ___;
		do {
			__ = (__ << 1) + (__ << 3) + (ch ^ 48);
		} while (isdigit(ch = gc()));
		__ *= ___;
		IEE = __;
		qread(ls...);
		return;
	}
	inline void flush() {
		fwrite(obuf, 1, oS - obuf, stdout);
		oS = obuf;
		return;
	}
	inline void putc_(char _x) {
		*oS++ = _x;
		if (oS == oT) flush();
	}
	inline void qwrite() {}
	template<class T1, class ...T2>
	inline void qwrite(T1 IEE, T2... ls) {
		if (!IEE) putc_('0');
		if (IEE < 0) putc_('-'), IEE = -IEE;
		while (IEE) _st[++_qr] = IEE % 10 + '0', IEE /= 10;
		while (_qr) putc_(_st[_qr--]);
		qwrite(ls...);
		return;
	}
	struct Flusher_ { ~Flusher_() { flush(); } }io_flusher;
}
using namespace IO;
#include<bits/stdc++.h>
using namespace std;
string s;
int n, w, sa[2000000 + 5];
int rk[2000000 + 5], oldrk[2000000 + 5], id[1000000 + 5], cnt[1000000 + 5];
void sort(int m) {
	int cur = 0;
	for (int i = n - w + 1; i <= n; ++i) id[++cur] = i;
	for (int i = 1; i <= n; ++i)
		if (sa[i] > w)
			id[++cur] = sa[i] - w;
	memset(cnt, 0, sizeof(cnt));
	for (int i = 1; i <= n; ++i) ++cnt[rk[i]];
	for (int i = 1; i <= m; ++i) cnt[i] += cnt[i - 1];
	for (int i = n; i >= 1; --i) sa[cnt[rk[id[i]]]--] = id[i];
}
int main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> s;
	n = s.size();
	s = s.back() + s + s;
	int p = 256;
	for (int i = 1; i <= n; ++i) rk[i] = s[i];
	for (int i = 1; i <= n; ++i) ++cnt[rk[i]];
	for (int i = 1; i <= p; ++i) cnt[i] += cnt[i - 1];
	for (int i = n; i >= 1; --i) sa[cnt[rk[i]]--] = i;
	for (w = 1; w < n; w <<= 1) {
		sort(max(n, p));
		memcpy(oldrk, rk, sizeof oldrk);
		for (int i = 1, p = 0; i <= n; ++i) {
			if (oldrk[sa[i]] != oldrk[sa[i - 1]] || oldrk[sa[i] + w] != oldrk[sa[i - 1] + w])
				++p;
			rk[sa[i]] = p;
		}
		if (p == n) break;
	}
	for (int i = 1; i <= n; ++i) cout << s[sa[i] - 1];
	return 0;
}