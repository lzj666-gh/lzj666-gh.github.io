//  OJ: 洛谷
//  提交ID: 214340791
//  题目ID: T600090
#include<bits/stdc++.h>
#define int long long
#define File "colour"
using namespace std;
struct Seg_Tree {
	struct Node {
		int sum, col, lzy1, lzy2;
	};
};
struct Edge {
	int v, nxt;
}edge[200000 + 10];
int head[100000 + 10], idx;
void add(int u, int v) {
	edge[++idx] = { v,head[u] };
	head[u] = idx;
}
int n, u, v, t, q;
int hvy[100000 + 10], bel[1000000 + 10], siz[1000000 + 10], dep[1000000 + 10], fa[1000000 + 10];
void dfs(int x, int fa) {
	::fa[x] = fa;
	dep[x] = dep[fa] + 1;
	siz[x] = 1;
	for (int i = head[x]; i; i = edge[i].nxt) {
		if (edge[i].v == fa) continue;
		dfs(edge[i].v, x);
		siz[x] += siz[edge[i].v];
		if (siz[edge[i].v] > siz[hvy[x]])
			hvy[x] = edge[i].v;
	}
}
namespace BF {
	bool col[100000 + 10];
	int query(int x, int y) {
		int ans = 0;
		while (x ^ y) {
			if (dep[x] < dep[y]) ans += col[y], y = fa[y];
			else ans += col[x], x = fa[x];
		}
		return ans;
	}
	void change1(int x, int y) {
		while (x ^ y) {
			if (dep[x] < dep[y]) col[y] ^= 1, y = fa[y];
			else col[x] ^= 1, x = fa[x];
		}
	}
	void change2(int x, int y) {
		while (x ^ y) {
			if (dep[x] < dep[y]) {
				for (int i = head[y]; i; i = edge[i].nxt)
					col[edge[i].v] ^= 1;
				col[fa[y]] ^= 1;
				col[y] ^= 1;
				y = fa[y];
			}
			else {
				for (int i = head[x]; i; i = edge[i].nxt)
					col[edge[i].v] ^= 1;
				col[fa[x]] ^= 1;
				col[x] ^= 1;
				x = fa[x];
			}
		}
		for (int i = head[x]; i; i = edge[i].nxt)
			col[edge[i].v] ^= 1;
		col[fa[x]] ^= 1;
		col[x] ^= 1;
	}
}
signed main() {
	// freopen(File".in", "r", stdin);
	// freopen(File".out", "w", stdout);
	cin.tie(0)->sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i < n; ++i) cin >> u >> v, add(u, v), add(v, u);
	dfs(1, 1);
	cin >> q;
	while (q--) {
		cin >> t >> u >> v;
		if (t == 1) {
			BF::change1(u, v);
		}
		else if (t == 2) {
			BF::change2(u, v);
		}
		else {
			cout << BF::query(u, v) << endl;
		}
		//for (int i = 1; i <= n; ++i) cout << BF::col[i] << ' '; cout << endl;
	}
	return 0;
}
/*
思路：考虑树链剖分，令一条边的靠下面的一个点代表它（即 x 表示 fa[x]-x 这条边）

每次 1 操作就直接在线段树上操作，2 操作可以把路径上所有点打上lazy-tag。

显然，路径上的点都因为左右两端都有路径上的点而抵消掉了，只有左右端点特判处理就可以了。

所以一条边最后的颜色即为：

col[edge_i]=col[x]^lzy[x]^[lzy[fa[x]]

我不想打！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
*/
/*
10
 5 9
 7 5
 6 5
 5 8
 10 5
 3 5
 2 9
 7 4
 6 1
 10
 2 10 5
 1 4 9
 3 1 1
 3 7 8
 3 9 10
 1 7 9
 3 4 8
 1 4 1
 2 10 2
 2 1 1
*/