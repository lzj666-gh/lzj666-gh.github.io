//  OJ: 洛谷
//  提交ID: 216616661
//  题目ID: P2153
#include<bits/stdc++.h>
#define File "run"
#define int long long
using namespace std;
const int inf = 1145141919810ll;
struct Edge {
	int v, w, c, nxt;
	Edge(int v = 0, int w = 0, int c = 0, int nxt = 0) :v(v), w(w), c(c), nxt(nxt) {}
}edge[1000000 + 10];
int head[5000 + 10], idx = 1;
void add(int u, int v, int w, int c) {
	edge[++idx] = { v,w,c,head[u] };
	head[u] = idx;
}
int n, m, s, t, dis[5000 + 10], cur[5000 + 10];
bool vis[5000 + 10];
bool bfs() {
	memset(vis, 0, sizeof vis);
	memcpy(cur, head, sizeof cur);
	fill(dis + 1, dis + n + 1, inf);
	queue<int>q;
	dis[s] = 0; q.push(s); vis[s] = 1;
	bool flg = 0;
	while (!q.empty()) {
		int now = q.front(); q.pop(); vis[now] = 0;
		flg |= now == t;
		for (int i = head[now]; i; i = edge[i].nxt) {
			int v = edge[i].v;
			if (dis[v] > dis[now] + edge[i].c && edge[i].w > 0) {
				dis[v] = dis[now] + edge[i].c;
				if (!vis[v])
					q.push(v),
					vis[v] = 1;
			}
		}
	}
	return flg;
}
int cost;
int dfs(int x, int flow) {
	if (x == t) return flow;
	vis[x] = 1;
	int ans = 0;
	for (int& i = cur[x]; i; i = edge[i].nxt) {
		if (!flow) break;
		int v = edge[i].v;
		if (!vis[v] && edge[i].w > 0 && dis[v] == dis[x] + edge[i].c) {
			int k = dfs(v, min(flow, edge[i].w));
			if (k == 0) dis[v] = inf;
			edge[i].w -= k; edge[i ^ 1].w += k;
			flow -= k; ans += k;
			cost += k * edge[i].c;
			//cerr << "flow from " << (x >> 1) << " to " << (v >> 1) << " cost " << k * edge[i].c << endl;
		}
	}
	vis[x] = 0;
	return ans;
}
signed main() {
	freopen(File".in", "r", stdin);
	freopen(File".out", "w", stdout);
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m; s = 1 << 1, t = n << 1 | 1;
	for (int i = 2; i < n; ++i)
		add(i << 1, i << 1 | 1, 1, 0), add(i << 1 | 1, i << 1, 0, 0);
	add(1 << 1, 1 << 1 | 1, inf, 0), add(1 << 1 | 1, 1 << 1, 0, 0);
	add(n << 1, n << 1 | 1, inf, 0), add(n << 1 | 1, n << 1, 0, 0);
	for (int i = 1, u, v, c; i <= m; ++i)
		cin >> u >> v >> c, add(u << 1 | 1, v << 1, 1, c), add(v << 1, u << 1 | 1, 0, -c);
	n = n << 1 | 1;
	int ans = 0;
	while (bfs()) ans += dfs(s, inf);
	cout << ans << ' ' << cost << endl;
	return 0;
}