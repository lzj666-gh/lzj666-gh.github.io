//  OJ: 洛谷
//  提交ID: 161630220
//  题目ID: P3369
#include<bits/stdc++.h>
using namespace std;
class Splay {
public:
	void ins(int x) {
		
	}
	void del(int x) {
		
	}
	int get_rank(int x) {
		
	}
	int get_val(int x) {

	}
	int get_pre(int x) {
		
	}
	int get_nxt(int x) {
		
	}
protected:
#define lc child[0]
#define rc child[1]
	struct Point {
		int child[2], size, val, fa, cnt;
		Point() :child{ 0,0 }, size(0), val(0), fa(0), cnt(0) {}
	}tree[100000 + 100];
	int idx = 0, root = 0;
	template<bool lrc = 0>
	int new_node(int x, int fa) {
		++idx;
		tree[idx].fa = fa;
		tree[idx].size = 1;
		tree[idx].val = x;
		if (lrc)
			tree[fa].rc = idx;
		else
			tree[fa].lc = idx;
		tree[idx].cnt = 1;
		return idx;
	}
	void push_up(int p) {
		tree[p].size = tree[tree[p].lc].size + tree[tree[p].rc].size + 1;
	}
	void rotate(int x) {
		int y = tree[x].fa, yf = tree[y].fa, xl = tree[x].lc, xr = tree[x].rc;
		if (x = tree[y].lc) (tree[y].lc = xr), (tree[xr].fa = y);
		else (tree[y].rc = xl), (tree[xl].fa = y);
		tree[y].fa = x; tree[x].rc = y;
		if (tree[yf].lc == y) tree[yf].lc = x;
		else tree[yf].rc = x;
		tree[x].fa = yf;
		push_up(x); push_up(y);
	}
	void splay(int x, int want) {
		while (tree[x].fa ^ want) {
			int y = tree[x].fa, z = tree[y].fa;
			if (z ^ want)
				((tree[z].lc == y) ^ (tree[y].lc == x)) ? rotate(x) : rotate(y);
			rotate(x);
		}
		if (!want) root = x;
	}
}lzj;
int n, opt, x;
signed main() {
	ios_base::sync_with_stdio(false);
	cin >> n;
	while (n--) {
		cin >> opt >> x;
		if (opt == 1)
			lzj.ins(x);
		else if (opt == 2)
			lzj.del(x);
		else if (opt == 3)
			cout << lzj.get_rank(x) << endl;
		else if (opt == 4)
			cout << lzj.get_val(x) << endl;
		else if (opt == 5)
			cout << lzj.get_pre(x) << endl;
		else
			cout << lzj.get_nxt(x) << endl;
	}
	return 0;
}