//  OJ: 洛谷
//  提交ID: 164976487
//  题目ID: P4145
#include<bits/stdc++.h>
#define lblk(i) ((i) / m * m)
#define rblk(i) (((i) / m + 1) * m - 1)
#define smblk(i, j) ((i) / m == (j) / m)
#define gtblk(i) ((i) / m)
using namespace std;
long long n, opt, l, r, a[100000 + 10], m, ans[50000 + 10];
bool blk[50000 + 10];
namespace hack{
void Sqrt(int l, int r) {
	if (!smblk(l, r)) cout << "cbcbc" << endl, exit(0);
	if (blk[gtblk(l)]) return;
	int cbc = gtblk(l);
	for (int i = l; i <= r; ++i) {
		ans[cbc] -= a[i];
		a[i] = sqrt(a[i]);
	}
	blk[cbc] = 1;
	for (int i = lblk(l); i <= rblk(l); ++i) {
		if (a[i] && (a[i] ^ 1)) {
			blk[cbc] = 0;
		}
		ans[cbc] += a[i];
	}
}
int main() {
	for (int i = 0; i <= n / m; ++i) {
		blk[i] = 1;
		for (int j = i * m; j <= (i + 1) * m - 1; ++j) {
			if (a[j] && (a[j] ^ 1)) {
				blk[i] = 0;
			}
			ans[i] += a[j];
		}
	}
	int cbcyc;
	cin >> cbcyc;
	while (cbcyc--) {
	    cin >> opt >> l >> r;
	    if (l > r) swap(l, r);
		if (opt == 0) {
			if (smblk(l, r)) {
				Sqrt(l, r);
				continue;
			}
			Sqrt(l, rblk(l));
			Sqrt(lblk(r), r);
			if (gtblk(l) + 1 < gtblk(r))
				for (int i = gtblk(l) + 1; i < gtblk(r); ++i) {
					if (blk[i]) continue;
					Sqrt(i * m, (i + 1) * m - 1);
				}
		}
		else if (opt == 1) {
			long long anss = 0;
			if (smblk(l, r)) {
				for (int i = l; i <= r; ++i) {
					anss += a[i];
				}
				cout << anss << endl;
				continue;
			}
			for (int i = l; i <= rblk(l); ++i) {
				anss += a[i];
			}
			for (int i = lblk(r); i <= r; ++i) {
				anss += a[i];
			}
			if (gtblk(l) + 1 < gtblk(r))
				for (int i = gtblk(l) + 1; i < gtblk(r); ++i) {
					anss += ans[i];
				}
			cout << anss << endl;
		}
		else{
			for (int i = 1; i <= n; ++i) {
				cout << "the " << i << " with number " << a[i] << " is in block " << gtblk(i) << " with block flag " << blk[gtblk(i)] << " and block ans " << ans[gtblk(i)] << endl;
			}
		}
	}
	return 0;
}
} 
namespace sub{
void Sqrt(int l, int r) {
	if (!smblk(l, r)) cout << "cbcbc" << endl, exit(0);
	if (blk[gtblk(l)]) return;
	for (int i = l; i <= r; ++i) {
		a[i] = sqrt(a[i]);
	}
	int cbc = gtblk(l);
	blk[cbc] = 1;
	for (int i = lblk(l); i <= rblk(l); ++i) {
		if (a[i] != 0 && (a[i] != 1)) {
			blk[cbc] = 0;
			ans[cbc] = 0;
			return;
		}
		else {
			ans[cbc] += a[i];
		}
	}
}
int main() {
	for (int i = 0; i <= n / m; ++i) {
		blk[i] = 1;
		for (int j = i * m; j <= (i + 1) * m - 1; ++j) {
			if (a[j] && (a[j] ^ 1)) {
				blk[i] = 0;
				ans[i] = 0;
				break;
			}
			else {
				ans[i] += a[j];
			}
		}
	}
	int cbcyc;
	cin >> cbcyc;
	while (cbcyc--) {
	    cin >> opt >> l >> r;
	    if (l > r) swap(l, r);
		if (opt == 0) {
			if (smblk(l, r)) {
				Sqrt(l, r);
				continue;
			}
			Sqrt(l, rblk(l));
			Sqrt(lblk(r), r);
			if (gtblk(l) + 1 < gtblk(r))
				for (int i = gtblk(l) + 1; i < gtblk(r); ++i) {
					if (blk[i]) continue;
					Sqrt(i * m, (i + 1) * m - 1);
				}
		}
		else if (opt == 1) {
			long long anss = 0;
			if (smblk(l, r)) {
				for (int i = l; i <= r; ++i) {
					anss += a[i];
				}
				cout << anss << endl;
				continue;
			}
			for (int i = l; i <= rblk(l); ++i) {
				anss += a[i];
			}
			for (int i = lblk(r); i <= r; ++i) {
				anss += a[i];
			}
			if (gtblk(l) + 1 < gtblk(r))
				for (int i = gtblk(l) + 1; i < gtblk(r); ++i) {
					if (blk[i]) {
						anss += ans[i];
						continue;
					}
					for (int j = i * m; j <= (i + 1) * m - 1; ++j) {
						anss += a[j];
					}
				}
			cout << anss << endl;
		}
		else{
			for (int i = 1; i <= n; ++i) {
				cout << "the " << i << " with number " << a[i] << " is in block " << gtblk(i) << " with block flag " << blk[gtblk(i)] << " and block ans " << ans[gtblk(i)] << endl;
			}
		}
	}
	return 0;
}
}
bool sub1 = 1;
int main(){
	ios_base::sync_with_stdio(false);
	cin >> n;
	m = (int)sqrt(n);
	for (int i = 1; i <= n; ++i) cin >> a[i], sub1 = sub1 && (a[i] == i);
	if (sub1) sub::main();
	else hack::main();
	return 0;
}