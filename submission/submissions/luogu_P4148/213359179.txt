//  OJ: 洛谷
//  提交ID: 213359179
//  题目ID: P4148
#include<bits/stdc++.h>
#define MAXKN 20
using namespace std;
template<int K = 2>
class Point {
private:
	int x[K];
public:
	Point() { memset(x, 0, sizeof(x)); }
	Point(initializer_list<int> pos) {
		auto it = pos.begin();
		for (int i = 0; i < K; i++, it++) x[i] = *it;
	}
	Point(const Point& other) {
		for (int i = 0; i < K; i++) x[i] = other.x[i];
	}
	Point(const vector<int>& other) {
		for (int i = 0; i < K; i++) x[i] = other[i];
	}
	int& operator[](int index) {
		return x[index];
	}
	const int& operator[](int index) const {
		return x[index];
	}
	void operator=(const Point& other) {
		for (int i = 0; i < K; i++) x[i] = other.x[i];
	}
	bool operator==(const Point& other) const {
		for (int i = 0; i < K; i++)
			if (x[i] != other.x[i])
				return false;
		return true;
	}
	bool operator!=(const Point& other) const {
		for (int i = 0; i < K; i++)
			if (x[i] != other.x[i])
				return true;
		return false;
	}
	bool operator<(const Point& other) const {
		for (int i = 0; i < K; i++)
			if (x[i] != other.x[i])
				return x[i] < other.x[i];
		return false;
	}
	bool operator>(const Point& other) const {
		for (int i = 0; i < K; i++)
			if (x[i] != other.x[i])
				return x[i] > other.x[i];
		return false;
	}
	bool operator()(const Point& L, const Point& R)const {
		for (int i = 0; i < K; i++)
			if (!(L[i] <= x[i] && x[i] <= R[i]))
				return false;
		return true;
	}
	ostream& operator<<(ostream& os) const {
		os << "(";
		for (int i = 0; i < K; i++) os << x[i] << (i == K - 1 ? "" : ", ");
		os << ")";
		return os;
	}
};
template<int K = 2>
bool inside(const Point<K>& Lpos, const Point<K>& Rpos, const Point<K>& lpos, const Point<K>& rpos) {
	for (int i = 0; i < K; i++)
		if(!(lpos[i] <= Lpos[i] && Rpos[i] <= rpos[i]))
			return false;
	return true;
}
template<int K = 2>
bool intersect(const Point<K>& Lpos, const Point<K>& Rpos, const Point<K>& lpos, const Point<K>& rpos) {
	for (int i = 0; i < K; i++)
		if (Rpos[i] < lpos[i] || rpos[i] < Lpos[i])
			return false;
	return true;
}
template<int K = 2>
struct KDTree {
	struct Node {
		int cnt, sum;
		Point<K> pos, lson, rson;
		Node() : cnt(0), sum(0), pos(), lson(), rson() {}
	}tree[500000 + 5];
	int pushup(int p) {
		tree[p].sum = tree[tree[p].lson].sum + tree[tree[p].rson].sum + tree[p].cnt;
		tree[p].lpos = tree[p].pos, tree[p].rpos = tree[p].pos;
		for (int i = 0; i < K; i++) {
			if (tree[p].lson) {
				tree[p].lpos[i] = min(tree[p].lpos[i], tree[tree[p].lson].lpos[i]);
				tree[p].rpos[i] = max(tree[p].rpos[i], tree[tree[p].lson].rpos[i]);
			}
			if (tree[p].rson) {
				tree[p].lpos[i] = min(tree[p].lpos[i], tree[tree[p].rson].lpos[i]);
				tree[p].rpos[i] = max(tree[p].rpos[i], tree[tree[p].rson].rpos[i]);
			}
		}
		return p;
	}
	struct Stack_ {
		struct Node {
			pair<Point<K>, int>val;
			Node* nxt;
			Node(pair<Point<K>, int> val = make_pair(), Node* nxt = nullptr) : val(val), nxt(nxt) {}
		};
		Node* head;
		void push(pair<Point<K>, int> val) {
			head = new Node(val, head);
		}
		int top() {
			return head->val;
		}
		void pop() {
			if (head == nullptr) return;
			Node* tmp = head;
			head = head->nxt;
			delete tmp;
		}
		void clear() {
			while (head != nullptr) {
				Node* tmp = head;
				head = head->nxt;
				delete tmp;
			}
		}
	};
	struct Stack {
		vector<pair<Point<K>, int>> st;
		void push(pair<Point<K>, int> val) {
			st.push_back(val);
		}
		pair<Point<K>, int> top() {
			return st.back();
		}
		void pop() {
			st.pop_back();
		}
		void clear() {
			st.clear();
		}
		int size() {
			return st.size();
		}
		pair<Point<K>, int> operator[](int index) {
			return st[index];
		}
		void unique() {
			sort(st.begin(), st.end());
			st.erase(unique(st.begin(), st.end()), st.end());
		}
	};
	Stack_ st;
	Stack Merge;
	void dfs(int x) {
		if (tree[x].lson) dfs(tree[x].lson);
		st.push(x);
		Merge.push(make_pair(tree[x].pos, tree[x].cnt));
		if (tree[x].rson) dfs(tree[x].rson);
	}
	int build(int l, int r, int k) {
		if (l > r) return 0;
		int x = st.top();
		st.pop();
		if (l == r) {
			tree[x].pos = Merge.top().first;
			tree[x].cnt = Merge.top().second;
			tree[x].lson = tree[x].rson = 0;
			return pushup(x);
		}
		int mid = (l + r + 1) >> 1;
		nth_element(Merge.st.begin() + l, Merge.st.begin() + mid, Merge.st.begin() + r + 1, [&](const pair<Point<K>, int>& a, const pair<Point<K>, int>& b) { return a.first[k] == b.first[k] ? a.second < b.second : a.first[k] < b.first[k]; });
		tree[x].pos = Merge.st[mid].first;
		tree[x].cnt = Merge.st[mid].second;
		tree[x].lson = build(l, mid - 1, (k + 1) % K);
		tree[x].rson = build(mid + 1, r, (k + 1) % K);
		return pushup(x);
	}
	int merge(int ra, int rb) {
		st.clear();
		dfs(ra); dfs(rb);
		Merge.unique();
		return build(0, st.st.size() - 1, 0);
	}
	int root[MAXKN];
	void insert(Position pos, int val) {
		Merge.clear();
		Merge.push(make_pair(pos, val));
		int i = 0;
		while (root[i] != 0) {
			int x = root[i];
			if (inside(tree[x].lpos, tree[x].rpos, pos, pos)) {
				tree[x].cnt += val;
				tree[x].sum += val;
				pushup(x);
				return;
			}
			if (intersect(tree[x].lpos, tree[x].rpos, pos, pos)) {
				root[i] = merge(root[i], build(0, 0, 0));
				return;
			}
			i++;
		}
	}
	int query(int x, const Point<K>& Lpos, const Point<K>& Rpos) {
		if (x == 0) return 0;
		if (inside(tree[x].lpos, tree[x].rpos, Lpos, Rpos)) return tree[x].sum;
		if (intersect(tree[x].lpos, tree[x].rpos, Lpos, Rpos)) {
			return query(tree[x].lson, Lpos, Rpos) + query(tree[x].rson, Lpos, Rpos);
		}
		return 0;
	}
	int query(const Point<K>& Lpos, const Point<K>& Rpos) {
		int ans = 0;
		for (int i = 0; i < 20; i++) {
			if (root[i] == 0) break;
			ans += query(root[i], Lpos, Rpos);
		}
		return ans;
	}
};
KDTree<2> tree;
int main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, lst = 0;
	cin >> n;
	while (n--) {
		int opt, x, y, l, r;
		cin >> opt >> x >> y;
		if (opt == 1) {
			cin >> l;
			tree.insert(Point<2>({ x, y }), l);
		}
		else if (opt == 2) {
			cin >> l >> r;
			lst = tree.query(Point<2>({ x, y }), Point<2>({ l, r }));
			cout << lst << "\n";
		}
		else if (opt == 3) {
			return 0;
		}
	}
	return 0;
}