//  OJ: 洛谷
//  提交ID: 225741893
//  题目ID: T633720
#include<bits/stdc++.h>
using namespace std;
#ifndef LZJ_BIGNUM 
#define LZJ_BIGNUM 
 
#include <string.h>
#include <algorithm>
#include <stdexcept>
#include <iostream>
#include <vector>
#include <cmath>
#include <iomanip>
 
template<int K = 3>
struct big_num {
	static const int BASE = pow(10, K);
	static const int WIDTH = K;
		
	int a[1000000];
	int& operator[](int i) {
		if (i > a[0] || i < 1) throw std::out_of_range("Index out of bounds");
		return a[i];
	}
	int& operator()(int i) {
		if (i > a[0] || i < 1) throw std::out_of_range("Index out of bounds");
		return a[a[0] - i + 1];
	}
	 
	friend std::istream& operator>>(std::istream& in, big_num& a) {
		std::string s;
		in >> s;
		reverse(s.begin(),  s.end()); 
		size_t last_non_zero = s.find_last_not_of('0'); 
		if (last_non_zero != std::string::npos) {
			s = s.substr(0,  last_non_zero + 1);
		} else {
			s = "0";
		}
		
		a.a[0] = 0;
		for (int i = 0, len = s.size();  i < len; i += WIDTH) {
			int end = std::min(i + WIDTH, len);
			std::string part = s.substr(i,  end - i);
			reverse(part.begin(),  part.end()); 
			a.a[++a.a[0]] = std::stoi(part);
		}
		return in;
	}
	 
	friend std::ostream& operator<<(std::ostream& out, const big_num& a) {
		if (a.a[0] == 0) {
			out << '0';
		} else {
			out << a.a[a.a[0]];
			for (int i = a.a[0] - 1; i >= 1; --i) {
				out << std::setw(WIDTH) << std::setfill('0') << a.a[i];
			}
		}
		return out;
	}
	 
	big_num() { memset(a, 0, sizeof a); }
	 
	template<typename T>
	big_num(T b) {
		memset(a, 0, sizeof a);
		int top = 0;
		do {
			a[++top] = b % BASE;
			b /= BASE;
		} while (b > 0);
		a[0] = top;
	}
	 
	big_num(const big_num& oth) {
		memcpy(a, oth.a, sizeof a);
	}
	 
	template<typename T>
	void operator = (T b) {
		memset(a, 0, sizeof a);
		int top = 0;
		while (b) {
			this->a[++top] = b % BASE;
			b /= BASE;
		}
		this->a[0] = top;
	}
	 
	std::string change_to_string() const {
		std::string s;
		if (a[0] == 0) {
			s += '0';
			return s;
		}
		s += std::to_string(a[a[0]]);
		for (int i = a[0] - 1; i >= 1; --i) {
			std::string part = std::to_string(a[i]);
			s += std::string(WIDTH - part.size(),  '0') + part;
		}
		return s;
	}
	 
	void string_to(std::string s) {
		reverse(s.begin(),  s.end()); 
		a[0] = 0;
		for (int i = 0, len = s.size();  i < len; i += WIDTH) {
			int end = std::min(i + WIDTH, len);
			std::string part = s.substr(i,  end - i);
			reverse(part.begin(),  part.end()); 
			a[++a[0]] = std::stoi(part);
		}
	}
	 
	friend big_num operator+(const big_num& a, const big_num& b) {
		big_num ans;
		ans.a[0] = std::max(a.a[0], b.a[0]);
		for (int i = 1; i <= ans.a[0]; ++i) {
			ans.a[i] += a.a[i] + b.a[i];
			ans.a[i+1] += ans.a[i] / BASE;
			ans.a[i] %= BASE;
		}
		if (ans.a[ans.a[0]+1] > 0) ans.a[0]++;
		return ans;
	}
	 
	friend void operator += (big_num& a, const big_num& b) {
		a = a + b;
	}
	 
	friend big_num operator-(const big_num& a, const big_num& b) {
		if (a < b) throw std::invalid_argument("Negative result not supported");
		big_num ans;
		ans.a[0] = a.a[0];
		for (int i = 1; i <= ans.a[0]; ++i) {
			ans.a[i] += a.a[i] - b.a[i];
			if (ans.a[i] < 0) {
				ans.a[i] += BASE;
				ans.a[i+1]--;
			}
		}
		while (ans.a[0] > 0 && ans.a[ans.a[0]] == 0) ans.a[0]--;
		if (ans.a[0] == 0) ans.a[0] = 1;
		return ans;
	}
	 
	friend void operator -= (big_num& a, const big_num& b) {
		a = a - b;
	}
	 
	friend big_num operator*(const big_num& a, const big_num& b) {
		big_num c;
		c.a[0] = a.a[0] + b.a[0];
		for (int i = 1; i <= a.a[0]; i++) {
			for (int j = 1; j <= b.a[0]; j++) {
				c.a[i+j-1] += a.a[i] * b.a[j];
			}
		}
	 
		for (int k = 1; k <= c.a[0]; ++k) {
			c.a[k+1] += c.a[k] / BASE;
			c.a[k] %= BASE;
		}
		while (c.a[0] > 0 && c.a[c.a[0]] == 0) c.a[0]--;
		if (c.a[0] == 0) c.a[0] = 1;
		return c;
	}
	 
	friend void operator *= (big_num& a, const big_num& b) {
		a = a * b;
	}
	 
	long long change_to_long_long() const {
		const long long MAX_LL = std::numeric_limits<long long>::max();
		long long s = 0;
		for (int i = a[0]; i >= 1; --i) {
			if (s > (MAX_LL - a[i]) / BASE) {
				throw std::overflow_error("Overflow in conversion");
			}
			s = s * BASE + a[i];
		}
		return s;
	}
	 
	friend big_num operator / (const big_num& a, const long long& b) {
		if (b == 0) throw std::invalid_argument("Cannot be divided by zero");
		big_num ans;
		std::string a1 = a.change_to_string(); 
		long long b1 = b;
		std::string c1;
		int aa[155]{}, c[155]{};
		int lena = a1.size(),  lenc = 1;
		for (int i = 0; i < lena; i++) {
			aa[i + 1] = a1[i] - '0';
		}
		for (int i = 1; i <= lena; i++) {
			c[i] = aa[i] / b1;
			aa[i + 1] += aa[i] % b1 * 10;
		}
		while (lenc < lena && c[lenc] == 0) lenc++;
		while (lenc <= lena) c1 += c[lenc++] + '0';
		reverse(c1.begin(),  c1.end()); 
		ans.string_to(c1); 
		return ans;
	}
	 
	friend void operator /= (big_num& a, const long long& b) {
		if (b == 0) {
			throw 1919810;
		}
		a = a / b;
	}
	 
	friend big_num operator % (const big_num& a, const long long& b) {
		big_num bb;
		bb = b;
		big_num tmp = a / b;
		big_num tmp2 = tmp * bb;
		return a - tmp2;
	}
	 
	friend void operator %= (big_num& a, const long long& b) {
		a = a % b;
	}
	 
	friend bool operator < (const big_num& a, const big_num& b) {
		if (a.a[0] != b.a[0]) return a.a[0] < b.a[0];
		for (int i = a.a[0]; i >= 1; --i) {
			if (a.a[i] != b.a[i]) return a.a[i] < b.a[i];
		}
		return false;
	}
	 
	friend bool operator > (const big_num& a, const big_num& b) {
		if (a.a[0] != b.a[0]) return a.a[0] > b.a[0];
		for (int i = a.a[0]; i >= 1; --i) {
			if (a.a[i] != b.a[i]) return a.a[i] > b.a[i];
		}
		return false;
	}
	 
	friend bool operator <= (const big_num& a, const big_num& b) {
		if (a.a[0] != b.a[0]) return a.a[0] <= b.a[0];
		for (int i = a.a[0]; i >= 1; --i) {
			if (a.a[i] != b.a[i]) return a.a[i] <= b.a[i];
		}
		return true;
	}
	 
	friend bool operator >= (const big_num& a, const big_num& b) {
		if (a.a[0] != b.a[0]) return a.a[0] >= b.a[0];
		for (int i = a.a[0]; i >= 1; --i) {
			if (a.a[i] != b.a[i]) return a.a[i] >= b.a[i];
		}
		return true;
	}
	 
	friend bool operator == (const big_num& a, const big_num& b) {
		if (a.a[0] != b.a[0]) return false;
		for (int i = a.a[0]; i >= 1; --i) {
			if (a.a[i] != b.a[i]) return false;
		}
		return true;
	}
	 
	friend bool operator != (const big_num& a, const big_num& b) {
		if (a.a[0] != b.a[0]) return true;
		for (int i = a.a[0]; i >= 1; --i) {
			if (a.a[i] != b.a[i]) return true;
		}
		return false;
	}
};
 
#endif 
big_num<> a, b;
int main() {
    cin >> a >> b;
    if (a < b) cout << b - a << endl;
    else cout << a - b << endl;
    return 0;
}