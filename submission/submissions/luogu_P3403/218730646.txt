//  OJ: 洛谷
//  提交ID: 218730646
//  题目ID: P3403
#include<bits/stdc++.h>
#include<array>
#define int long long
using namespace std;
using ll = long long;
template<int N = 100000 + 10, int M = 1000000 + 10, int inf = INT_MAX, bool directed = 1>
class Graph {
	struct Edge {
		int v, w, nxt;
		Edge(int v = 0, int w = 0, int nxt = 0) :v(v), w(w), nxt(nxt) {}
	}edge[M * (2 - directed)];
	int head[N], idx;
	int _rand(int l, int r) {
		static int seed;
		if (!seed) seed = time(0), srand(seed);
		return ::rand() * ::rand() % (r - l + 1) + l;
	}
	void dfs(int now, int fa, array<int, N>& tp) {
		bool cyc = 0;
		for (int i = head[now]; i; i = edge[i].nxt) {
			if (edge[i].v == fa) continue;
			if (!cyc) tp[edge[i].v] = tp[now], cyc = 1;
			else tp[edge[i].v] = edge[i].v;
			dfs(edge[i].v, now, tp);
		}
	}
public:
	int n, m;
	void add(int u, int v, int w = 1) {
		edge[++idx] = { v,w,head[u] };
		head[u] = idx;
		if (!directed) {
			swap(u, v);
			edge[++idx] = { v,w,head[u] };
			head[u] = idx;
		}
	}
	Graph() :n(), m(), head(), idx(), edge() {}
	array<int, N> dijkstra(int s) {
		static array<int, N> dis;
		static bitset<N> vis;
		dis.fill(inf);
		vis.reset();
		dis[s] = 0;
		priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;
		q.emplace(0, s);
		while (!q.empty()) {
			int now = q.top().second;
			q.pop();
			if (vis[now]) continue;
			vis[now] = 1;
			for (int i = head[now]; i; i = edge[i].nxt)
				if (dis[edge[i].v] > dis[now] + edge[i].w)
					dis[edge[i].v] = dis[now] + edge[i].w,
					q.emplace(dis[edge[i].v], edge[i].v);
		}
		return dis;
	}
	array<int, N> spfa(int s) {
		static array<int, N> dis;
		static bitset<N> vis;
		dis.fill(inf);
		vis.reset();
		dis[s] = 0;
		queue<int> q;
		q.push(s);
		while (!q.empty()) {
			int now = q.front();
			q.pop();
			if (vis[now]) continue;
			vis[now] = 1;
			for (int i = head[now]; i; i = edge[i].nxt)
				if (dis[edge[i].v] > dis[now] + edge[i].w) {
					dis[edge[i].v] = dis[now] + edge[i].w;
					q.push(edge[i].v);
				}
		}
		return dis;
	}
	void rand(int n, int m, int low, int high) {
		if (n > N) throw range_error("n is out of range.");
		if (m > M) throw range_error("m is out of range.");
		for (int i = 1; i <= n; ++i)
			head[i] = 0;
		idx = 0;
		n = n, m = m;
		for (int i = 1; i <= m; ++i) {
			int u = _rand(1, n), v = _rand(1, n), w = _rand(low, high);
			add(u, v, w);
		}
	}
	void rand_cactus(int n, int low, int high) {
		if (directed) throw logic_error("Cactus can't be directed.");
		if (n > N) throw range_error("n is out of range.");
		for (int i = 1; i <= n; ++i)
			head[i] = 0;
		idx = 0;
		this->n = n; m = 0;
		for (int i = 2; i <= n; ++i) {
			int u = _rand(1, i - 1), v = i;
			add(u, v, _rand(low, high));
			++m;
		}
		static array<int, N> tp;
		tp.fill(0);
		tp[1] = 1;
		dfs(1, 0, tp);
		int cnt = _rand(1, 20);
		static bitset<N> vis;
		vis.reset();
		for (int i = 1; i <= cnt; ++i) {
			int aa = _rand(1, n), bb = tp[aa], t = 0;
			while ((aa == bb || !vis[bb]) && t++ < 100) aa = _rand(1, n), bb = tp[aa];
			if (aa != bb && !vis[bb]) {
				add(aa, bb, _rand(low, high));
				vis[bb] = 1;
				++m;
			}
		}
	}
	void rand_full(int n, int low, int high) {
		if (n > N) throw range_error("n is out of range.");
		n = n;
		if (directed) {
			m = n * (n - 1);
			for (int i = 1; i <= n; ++i)
				for (int j = 1; j <= n; ++j)
					if (i != j) add(i, j, _rand(low, high));
		}
		else {
			m = n * (n - 1) / 2;
			for (int i = 1; i <= n; ++i)
				for (int j = i + 1; j <= n; ++j)
					add(i, j, _rand(low, high));
		}
	}
	friend ostream& operator<<(ostream& out, Graph& g) {
		out << g.n << ' ' << g.m << '\n';
		for (int i = 0; i <= g.n; ++i)
			for (int j = g.head[i]; j; j = g.edge[j].nxt)
				if (directed || i < g.edge[j].v)
					out << i << ' ' << g.edge[j].v << ' ' << g.edge[j].w << '\n';
		return out;
	}
	friend istream& operator>>(istream& in, Graph& g) {
		g.idx = 0;
		in >> g.n >> g.m;
		for (int i = 1; i <= g.m; i++) {
			int u, v, w;
			in >> u >> v >> w;
			g.add(u, v, w);
		}
		return in;
	}
};
Graph<> g;
array<int, 100000 + 10>dis;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	freopen("404.txt", "w", stderr);
	long long h;
	int x, y, z;
	cin >> h >> x >> y >> z;
	h--;
	for (int i = 0; i < x; ++i)
		g.add(i, (i + y) % x, y),
		g.add(i, (i + z) % x, z);
	g.n = x; g.m = x + x;
	dis = g.dijkstra(0);
	int ans = 0;
	for (int i = 0; i < x; ++i)
		if (dis[i] <= h)
			ans += (h - dis[i]) / x + 1;
	cout << ans << endl;
	return 0;
}