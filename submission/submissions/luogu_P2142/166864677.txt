//  OJ: 洛谷
//  提交ID: 166864677
//  题目ID: P2142
#ifndef BIG_NUM_H
#define BIG_NUM_H
#ifndef _GLIBCXX_CCTYPE
#include<bits/stdc++.h>
#endif
namespace std {
	struct big_num {
		short a[150]; bool nag;
		short int& operator [] (int i) {
			if (i > this->a[0]) {
				throw 114514;
			}
			return this->a[i];
		}
		short int& operator () (int i) {
			if (i > this->a[0]) {
				throw 114514;
			}
			return this->a[this->a[0] - i + 1];
		}
		friend istream& operator >> (istream& in, big_num& a) {
			string s;
			in >> s;
			if (s[0] == '-') a.nag = 1, s.erase(s.begin());
			reverse(s.begin(), s.end());
			a.a[0] = s.size();
			for (int i = 1; i <= a.a[0]; ++i) a.a[i] = s[i - 1] ^ 48;
			return in;
		}
		friend ostream& operator << (ostream& out, const big_num& a) {
			if (a.a[0] == 0) {
				out << '0';
			}
			else {
				if (a.nag) out << '-';
				for (int i = a.a[0]; i >= 1; --i) {
					out << a.a[i];
				}
			}
			return out;
		}
		big_num() { memset(a, 0, sizeof a); nag = 0; }
		template<typename T>
		big_num(T b) {
			memset(a, 0, sizeof a);
			if (b < 0) this->nag = 1, b = -b;
			else this->nag = 0;
			int top = 0;
			while (b) {
				this->a[++top] = b % 10;
				b /= 10;
			}
			this->a[0] = top;
		}
		big_num(const big_num& oth) {
			memcpy(a, oth.a, sizeof a);
			nag = oth.nag;
		}
		template<typename T>
		void operator = (T b) {
			memset(a, 0, sizeof a);
			if (b < 0) this->nag = 1, b = -b;
			int top = 0;
			while (b) {
				this->a[++top] = b % 10;
				b /= 10;
			}
			this->a[0] = top;
		}
		string change_to_string() const {
			string s;
			if (a[0] == 0) {
				s += '0';
				return s;
			}
			if (nag) s += '-';
			for (int i = a[0]; i >= 1; --i) {
				s += (a[i] + '0');
			}
			return s;
		}
		void string_to(string s) {
			if (s[0] == '-') nag = 1, s.erase(s.begin());
			reverse(s.begin(), s.end());
			a[0] = s.size();
			for (int i = 1, j = a[0] - 1; i <= a[0]; ++i, --j) a[i] = s[j] - '0';
		}
		long long change_to_long_long() const {
			long long s = 0;
			if (a[0] == 0) {
				return s;
			}
			for (int i = a[0]; i >= 1; --i) {
				s *= 10;
				s += a[i];
			}
			if (nag) s = -s;
			return s;
		}
		big_num re() const {
			big_num oth(*this);
			oth.nag = !nag;
			return oth;
		}
		friend big_num operator + (const big_num& a, const big_num& b) {
			if (a > 0 && b < 0) return a - b.re();
			if (a < 0 && b > 0) return b - a.re();
			if (a < 0 && b < 0) return (a.re() + b.re()).re();
			big_num ans;
			ans.a[0] = a.a[0] > b.a[0] ? a.a[0] : b.a[0];
			for (register int i = 1; i <= ans.a[0]; ++i) {
				ans.a[i] += a.a[i] + b.a[i];
				ans.a[i + 1] += ans.a[i] / 10;
				ans.a[i] %= 10;
			}
			if (ans.a[ans.a[0] + 1]) ans.a[0]++;
			return ans;
		}
		friend void operator += (big_num& a, const big_num& b) {
			a = a + b;
		}
		friend big_num operator - (const big_num& a, const big_num& b) {
			if (a < 0 && b < 0) return (a.re() - b.re()).re();
			if (a < b) return (b - a).re();
			if (a > 0 && b < 0) return a + b.re();
			if (a < 0 && b > 0) return a + b.re();
			big_num ans;
			ans.a[0] = a.a[0];
			for (register int i = 1; i <= ans.a[0]; ++i) {
				ans.a[i] += a.a[i] - b.a[i];
				if (ans.a[i] < 0) --ans.a[i + 1], ans.a[i] += 10;
			}
			while (ans.a[ans.a[0]] == 0 && ans.a[0] > 0) --ans.a[0];
			return ans;
		}
		friend void operator -= (big_num& a, const big_num& b) {
			a = a - b;
		}
		friend big_num operator * (const big_num& a, const big_num& b) {
			big_num c;
			c.a[0] = a.a[0] + b.a[0];
			c.nag = a.nag ^ b.nag;
			for (int i = 1; i <= a.a[0]; i++) {
				for (int j = 1; j <= b.a[0]; j++) {
					c.a[i + j - 1] += a.a[i] * b.a[j];
					if (c.a[i + j - 1] >= 10) {
						c.a[i + j] += c.a[i + j - 1] / 10;
						c.a[i + j - 1] = c.a[i + j - 1] % 10;
					}
				}
			}
			while (c.a[c.a[0]] == 0 && c.a[0] > 1) c.a[0]--;
			return c;
		}
		friend void operator *= (big_num& a, const big_num& b) {
			a = a * b;
		}
		friend big_num operator / (const big_num& a, const long long& b) {
			if (b == 0) {
				throw 1919810;
			}
			big_num ans;
			string a1;
			if (b < 0) a1 = a.re().change_to_string();
			else a1 = a.change_to_string();
			long long b1 = b;
			string c1;
			int aa[155]{}, c[155]{};
			int lena = a1.size(), lenc = 1;
			for (int i = 0; i < lena; i++) {
				aa[i + 1] = a1[i] - '0';
			}
			for (int i = 1; i <= lena; i++) {
				c[i] = aa[i] / b1;
				aa[i + 1] += aa[i] % b1 * 10;
			}
			while (lenc < lena && c[lenc] == 0) lenc++;
			while (lenc <= lena) c1 += c[lenc++] + '0';
			reverse(c1.begin(), c1.end());
			if (a.nag ^ (b < 0)) c1.insert(c1.begin(), '-');
			ans.string_to(c1);
			return ans;
		}
		friend void operator /= (big_num& a, const long long& b) {
			if (b == 0) {
				throw 1919810;
			}
			a = a / b;
		}
		//本人太弱了，不会编高精除以高精，只能用低精代替了
		friend big_num operator / (const big_num& a, const big_num& bb) {
			if (bb.a[1] == 0 && bb.a[0] == 1) {
				throw 1919810;
			}
			long long b;
			if (bb.nag) b = bb.re().change_to_long_long();
			else b = bb.change_to_long_long();
			string a1;
			if (a.nag) a1 = a.re().change_to_string();
			else a1 = a.change_to_string();
			long long b1 = b;
			string c1;
			big_num ans;
			int aa[155]{}, c[155]{};
			int lena = a1.size(), lenc = 1;
			for (int i = 0; i < lena; i++) {
				aa[i + 1] = a1[i] - '0';
			}
			for (int i = 1; i <= lena; i++) {
				c[i] = aa[i] / b1;
				aa[i + 1] += aa[i] % b1 * 10;
			}
			while (lenc < lena && c[lenc] == 0) lenc++;
			while (lenc <= lena) c1 += c[lenc++] + '0';
			reverse(c1.begin(), c1.end());
			if (a.nag ^ (bb.nag)) c1.insert(c1.begin(), '-');
			ans.string_to(c1);
			return ans;
		}
		friend void operator /= (big_num& a, big_num& b) {
			if (b[1] == 0 && b[0] == 1) {
				throw 1919810;
			}
			a = a / b;
		}
		friend big_num operator % (const big_num& a, const long long& b) {
			big_num bb;
			bb = b;
			big_num tmp = a / b;
			big_num tmp2 = tmp * bb;
			return a - tmp2;
		}
		friend void operator %= (big_num& a, const long long& b) {
			a = a % b;
		}
		friend bool operator < (const big_num& a, const big_num& b) {
			if (!a.nag && !b.nag) {
				if (a.a[0] != b.a[0]) return a.a[0] < b.a[0];
				for (int i = a.a[0]; i >= 1; --i) {
					if (a.a[i] != b.a[i]) return a.a[i] < b.a[i];
				}
				return false;
			}
			if (a.nag && !b.nag) {
				return true;
			}
			if (!a.nag && b.nag) {
				return false;
			}
			if (a.nag && b.nag) {
				return b.re() < a.re();
			}
		}
		friend bool operator > (const big_num& a, const big_num& b) {
			if (!a.nag && !b.nag) {
				if (a.a[0] != b.a[0]) return a.a[0] > b.a[0];
				for (int i = a.a[0]; i >= 1; --i) {
					if (a.a[i] != b.a[i]) return a.a[i] > b.a[i];
				}
				return false;
			}
			if (a.nag && !b.nag) {
				return false;
			}
			if (!a.nag && b.nag) {
				return true;
			}
			if (a.nag && b.nag) {
				return b.re() > a.re();
			}
		}
		friend bool operator <= (const big_num& a, const big_num& b) {
			if (!a.nag && !b.nag) {
				if (a.a[0] != b.a[0]) return a.a[0] <= b.a[0];
				for (int i = a.a[0]; i >= 1; --i) {
					if (a.a[i] != b.a[i]) return a.a[i] <= b.a[i];
				}
				return true;
			}
			if (a.nag && !b.nag) {
				return true;
			}
			if (!a.nag && b.nag) {
				return false;
			}
			if (a.nag && b.nag) {
				return b.re() <= a.re();
			}
		}
		friend bool operator >= (const big_num& a, const big_num& b) {
			if (!a.nag && !b.nag) {
				if (a.a[0] != b.a[0]) return a.a[0] >= b.a[0];
				for (int i = a.a[0]; i >= 1; --i) {
					if (a.a[i] != b.a[i]) return a.a[i] >= b.a[i];
				}
				return false;
			}
			if (a.nag && !b.nag) {
				return false;
			}
			if (!a.nag && b.nag) {
				return true;
			}
			if (a.nag && b.nag) {
				return b.re() >= a.re();
			}
		}
		friend bool operator == (const big_num& a, const big_num& b) {
			if (a.nag != b.nag) return false;
			if (a.a[0] != b.a[0]) return false;
			for (int i = a.a[0]; i >= 1; --i) {
				if (a.a[i] != b.a[i]) return false;
			}
			return true;
		}
		friend bool operator != (const big_num& a, const big_num& b) {
			if (a.nag != b.nag) return true;
			if (a.a[0] != b.a[0]) return true;
			for (int i = a.a[0]; i >= 1; --i) {
				if (a.a[i] != b.a[i]) return true;
			}
			return false;
		}
	};
}
#endif
using namespace std;
big_num a,b;
int main(){
    ios_base::sync_with_stdio(false);
    cin>>a>>b;
    cout<<a-b<<endl;
    return 0;
}