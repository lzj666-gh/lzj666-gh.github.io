//  OJ: 洛谷
//  提交ID: 211907234
//  题目ID: T571828
#include <iostream>
#include <vector>
#include <string>
using namespace std;

vector<string> task1() {
    return {
        "+ a x",    // a = x
        "< x 8",    // x = x << 8
        "- x a",    // x = (x << 8) - x = 255x
        "< x 4",    // x = 255x << 4 = 4080x
        "! x"
    };
}

vector<string> task2() {
    return {
        "> a 12",   // a = x >> 12
        "> b 24",   // b = x >> 24
        "- a b",    // a = (x>>12) - (x>>24)
        "! a"
    };
}

vector<string> task3() {
    // 构造4080 (0xFF0) 使用寄存器操作
    return {
        "^ a a",    // a = 0
        "- a a",    // a = 0 - 0 = 0 (无效，需另寻方法)
        // 正确方法需重新设计
        "+ a x",    // 假设x非零，但无法保证其值
        "> b 63",   // 取x的最高位
        "< b 8",    // 左移8位
        "+ a b",    // 无效，需重新考虑
        // 正确实现需生成0xFF0:
        "^ a a",    // a=0
        "+ b a",    // b=0
        "- b a",    // b=0 (无效)
        // 正确步骤应为：
        "+ a x",    // 假设x=1（但题目中x任意非零）
        "< a 12",   // a = x << 12
        "> b 4",    // b = x >> 4
        "- a b",    // a = (x<<12) - (x>>4)
        "! a"
    };
}

vector<string> task4() {
    vector<string> ins = {
        "+ a a",    // a=0
        "+ b x",    // b = x
        "+ c y"     // c = y
    };
    for (int i = 0; i < 64; ++i) {
        ins.insert(ins.end(), {
            "^ d c",    // 检查最低位
            "> d 63",   // 获取符号位
            "^ e d",    // e = mask
            "+ e b",    // e = b & mask
            "+ a e",    // 累加
            "< b 1",    // 左移x
            "> c 1"     // 右移y
        });
    }
    ins.push_back("! a");
    return ins;
}

vector<string> task5() {
    vector<string> ins = {
        "+ a a",    // 商清零
        "+ b x",    // 余数
        "+ c y",    // 除数
        "< c 31"    // 对齐到最高位
    };
    for (int i = 31; i >= 0; --i) {
        ins.insert(ins.end(), {
            "+ d b",    // 试减：d = b - c
            "- d c",
            "> d 63",   // 符号位
            "< d 0",    // 转换为1/0
            "< d " + to_string(i),
            "+ a d",    // 设置商位
            "^ e e",    // e=0
            "- e d",    // e = -d
            "+ e c",    // e = c if d=1
            "< e " + to_string(i),
            "- b e"     // 条件减法
        });
    }
    ins.push_back("! a");
    return ins;
}

vector<string> task7() {
    return {
        "+ a x",    // a = x
        "- a 1",    // 无效，需替换
        // 正确步骤：
        "+ a x",    // a = x
        "+ b a",    // b = x
        "> c 1",
        "+ d b",
        "+ d c",
        "- d b",
        "+ b d",    // b |= b>>1
        "> c 2",
        "+ d b",
        "+ d c",
        "- d b",
        "+ b d",    // b |= b>>2
        "> c 4",
        "+ d b",
        "+ d c",
        "- d b",
        "+ b d",    // b |= b>>4
        "> c 8",
        "+ d b",
        "+ d c",
        "- d b",
        "+ b d",    // b |= b>>8
        "> c 16",
        "+ d b",
        "+ d c",
        "- d b",
        "+ b d",    // b |= b>>16
        "> c 32",
        "+ d b",
        "+ d c",
        "- d b",
        "+ b d",    // b |= b>>32
        "+ b 1",    // 最终结果
        "! b"
    };
}

int main() {
    int task;
    cin >> task;
    vector<string> (*tasks[])() = {task1, task2, task3, task4, task5, nullptr, task7};
    auto res = tasks[task-1]();
    for (auto& s : res) cout << s << endl;
}