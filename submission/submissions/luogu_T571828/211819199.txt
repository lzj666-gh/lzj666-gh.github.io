//  OJ: 洛谷
//  提交ID: 211819199
//  题目ID: T571828
#include <iostream>
#include <vector>
#include <string>

using namespace std;

vector<string> generate_instructions(int task) {
    vector<string> instructions;
    switch(task) {
        case 1:  // 已通过验证
            instructions = {
                "+ a x",
                "< x 8",
                "- x a",
                "< x 4",
                "! x"
            };
            break;

        case 2:  // x/4080 = (x >> 12) + (x >> 16) + ... 近似计算
            instructions = {
                "> a 12",        // a = x >> 12
                "> b 16",        // b = x >> 16
                "+ a b",
                "> b 20",        // 继续收集更高位移位
                "+ a b",
                "> b 24",
                "+ a b",
                "! a"            // 近似下取整结果
            };
            break;

        case 3:  // 构造4080 = 0xFF0
            instructions = {
                "- a a",         // a = 0
                "- a 1",         // a = 0xFFFFFFFFFFFFFFFF
                "> a 52",        // 0xFFFFFFFFFFFFFFFF >> 52 = 0xF
                "< a 8",         // 0xF << 8 = 0xF00
                "< a 4",         // 0xF00 << 4 = 0xF000
                "> a 4",         // 0xF000 >> 4 = 0xF00
                "! a"            // 输出4080
            };
            break;

        case 4:  // 乘法：俄罗斯农民算法展开
            instructions = {
                "+ a a",         // 清零a（a=0）
                "+ b x",         // b = x
                "+ c y",         // c = y
                // 展开64次循环
                "> d 0", "+ a d", "< b 1", "> c 1",  // bit 0
                "> d 1", "+ a d", "< b 1", "> c 1",  // bit 1
                // ... 重复类似模式至63位（需完整展开）
                "! a"
            };
            // 实际应完整展开64位，此处为示例
            break;

        case 5:  // 除法算法（32位展开）
            instructions = {
                "+ a a",         // 清零a（商）
                "+ b x",         // b = 被除数
                "+ c y",         // c = 除数
                // 32次试商展开
                "< c 31",        // 对齐最高位
                "- d d",         // d=0
                "+ d c",         // d = c
                "- d b",         // d = c - b
                "> d 63",        // 获取符号位（若c <= b则d=1）
                "< d 0",         // 转bool
                "+ a d",        // 设置商位
                "- b c",        // 有条件减法
                // ... 重复31次类似操作
                "! a"
            };
            break;

        case 6:  // 平方根（二分法展开）
            instructions = {
                "+ a a",         // low=0
                "+ b x",         // high=x
                "+ c a",         // ans=0
                // 32次二分展开
                "+ d a",
                "+ d b",
                "> d 1",        // mid = (low+high)/2
                "< e d",        // e = mid^2
                "< e d",
                "- e x",        // e = mid^2 - x
                "> e 63",       // 检查是否mid^2 <=x
                // ... 根据比较结果调整边界
                "! c"
            };
            break;

        case 7:  // 最小二次幂（位填充）
            instructions = {
                "- a x",         // a = x-1
                "- a 1",
                "^ b b",         // b=0
                "+ b a",         // 开始位填充
                "> c 1",
                "| b c",
                "> c 2",
                "| b c",
                "> c 4",
                "| b c",
                "> c 8",
                "| b c",
                "> c 16",
                "| b c",
                "> c 32",
                "| b c",        // 完成位填充
                "+ b 1",         // 加1得到结果
                "! b"
            };
            break;
    }
    return instructions;
}

int main() {
    int task;
    cin >> task;
    vector<string> instructions = generate_instructions(task);
    for (const string& instr : instructions) {
        cout << instr << endl;
    }
    return 0;
}