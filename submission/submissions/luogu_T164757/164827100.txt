//  OJ: 洛谷
//  提交ID: 164827100
//  题目ID: T164757
#include<bits/stdc++.h>
using namespace std;
long long dp[2][2500], n, m, po2[10 + 10];
void DP() {
	if (n < m) swap(n, m);
	memset(dp, 0, sizeof dp);
	dp[0][(1 << m) - 1] = 1;
	int i = 0;
	for (int l = 1; l <= n; ++l)
		for (int j = 1; j <= m; ++j) {
			i ^= 1;
			memset(dp[i], 0, sizeof dp[i]);
			for (int k = 0; k < (1 << m); ++k) {
				if (k & po2[j])
					dp[i][k ^ po2[j]] += dp[i ^ 1][k];
				if ((j > 1) && !(k & po2[j - 1]) && (k & po2[j]))
					dp[i][k | po2[j - 1]] += dp[i ^ 1][k];
				if ((l > 1) && !(k & po2[j]))
					dp[i][k | po2[j]] += dp[i ^ 1][k];
			}
		}
			
	cout << dp[i][(1 << m) - 1] << endl;;
}
int main() {
	ios_base::sync_with_stdio(false);
	for (int i = 1; i < 20; ++i)
		po2[i] = 1 << (i - 1);
	while (cin >> n >> m) {
		if (n == 0 && m == 0) return 0;
		DP();
	}
	return 0;
}
