//  OJ: 洛谷
//  提交ID: 213277152
//  题目ID: P3377
#include<bits/stdc++.h>
#include<unordered_set>
#define int long long 
using namespace std;
struct LIT {
	struct Node {
		int val, dist, id;
		Node* lc, * rc, * fa, * mss_fa;
		Node(int v = 0, int i = 0) : val(v), id(i), lc(nullptr), rc(nullptr), mss_fa(nullptr), fa(nullptr), dist(0) {}
	};
	unordered_set<Node*> roots;
	unordered_map<int, Node*> id_map;
	void pushup(Node* x) {
		while (x) {
			int l = x->lc ? x->lc->dist : -1;
			int r = x->rc ? x->rc->dist : -1;
			if (l < r) swap(x->lc, x->rc);
			int new_dist = (x->rc ? x->rc->dist : -1) + 1;
			if (x->dist == new_dist) break;
			x->dist = new_dist;
			x = x->fa;
		}
	}
	Node* merge(Node* a, Node* b) {
		if (!a || !b) return a ? a : b;
		if (a->val > b->val || (a->val == b->val && a->id > b->id))
			swap(a, b);
		a->rc = merge(a->rc, b);
		a->rc->fa = a;
		a->rc->mss_fa = a;
		if (!a->lc || a->lc->dist < a->rc->dist)
			swap(a->lc, a->rc);
		a->dist = (a->rc ? a->rc->dist + 1 : 0);
		return a;
	}
	Node* find_root(Node* x) {
		if (!x) return nullptr;
		return (x->mss_fa != x) ? (x->mss_fa = find_root(x->mss_fa)) : x;
	}
	void insert(int val, int id) {
		static Node* node;
		node = new Node(val, id);
		node->mss_fa = node;
		id_map[id] = node;
		roots.insert(node);
	}
	void erase(int id) {
		if (id_map.find(id) == id_map.end()) return;
		Node* x = id_map[id];
		if (!x) return;
		Node* fa = x->fa;
		Node* merged = merge(x->lc, x->rc);
		if (fa) {
			(fa->lc == x ? fa->lc : fa->rc) = merged;
			if (merged) merged->fa = fa, merged->mss_fa = x->mss_fa;
			pushup(fa);
		}
		else {
			roots.erase(x);
			if (merged) {
				merged->fa = nullptr;
				merged->mss_fa = merged;
				roots.insert(merged);
			}
		}
		id_map.erase(id);
		delete x;
	}
	void Merge(int x_id, int y_id) {
		auto _x = id_map.find(x_id), _y = id_map.find(y_id);
		if (_x == id_map.end() || _y == id_map.end()) return;
		Node* rx = find_root(_x->second), * ry = find_root(_y->second);
		if (rx == ry) return;
		Node* new_root = merge(rx, ry);
		rx->mss_fa = ry->mss_fa = new_root;
		new_root->mss_fa = new_root;
		roots.erase(rx);
		roots.erase(ry);
		roots.insert(new_root);
	}
}t;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	for (int i = 1, a; i <= n; ++i) {
		cin >> a;
		t.insert(a, i);
	}
	while (m--) {
		int op, x, y;
		cin >> op;
		if (op == 1) {
			cin >> x >> y;
			t.Merge(x, y);
		}
		else {
			cin >> x;
			auto it = t.id_map.find(x);
			if (it == t.id_map.end())
				cout << -1 << '\n';
			else {
				assert(it->second);
				LIT::Node* root = t.find_root(it->second);
				if (!root) {
					cout << -1 << '\n';
					continue;
				}
				cout << root->val << '\n';
				t.erase(root->id);
			}
		}
	}
	return 0;
}