//  OJ: 洛谷
//  提交ID: 213251220
//  题目ID: P3377
#include<bits/stdc++.h>
#include<unordered_set>
#define int long long 
using namespace std;
struct LIT {
    struct Node {
        int val, dist, id;
        Node* lc, * rc, * fa;
        Node(int v = 0, int i = 0) :
            val(v), id(i), lc(nullptr), rc(nullptr),
            fa(nullptr), dist(0) {
        }
    };
    unordered_set<Node*> roots;
    unordered_map<int, Node*> id_map;
    Node* merge(Node* a, Node* b) {
        if (!a || !b) return a ? a : b;
        if (a->val > b->val || (a->val == b->val && a->id > b->id))
            swap(a, b);
        a->rc = merge(a->rc, b);
        a->rc->fa = a;
        if (!a->lc || a->lc->dist < a->rc->dist)
            swap(a->lc, a->rc);
        a->dist = (a->rc ? a->rc->dist + 1 : 0);
        return a;
    }
    Node* find_root(Node* x) {
        while (x && x->fa) x = x->fa;
        return x;
    }
    void insert(int val, int id) {
        Node* node = new Node(val, id);
        id_map[id] = node;
        roots.insert(node);
    }
    void pushup(Node* x) {
        while (x) {
            int l = x->lc ? x->lc->dist : -1;
            int r = x->rc ? x->rc->dist : -1;
            if (l < r) swap(x->lc, x->rc);
            int new_dist = (x->rc ? x->rc->dist : -1) + 1;
            if (x->dist == new_dist) break;
            x->dist = new_dist;
            x = x->fa;
        }
    }
    void erase(int id) {
        Node* x = id_map[id];
        if (!x) return;
        Node* fa = x->fa;
        Node* merged = merge(x->lc, x->rc);
        if (fa) {
            (fa->lc == x ? fa->lc : fa->rc) = merged;
            if (merged) merged->fa = fa;
            pushup(fa);
        }
        else {
            roots.erase(x);
            if (merged) {
                merged->fa = nullptr;
                roots.insert(merged);
            }
        }
        id_map.erase(id);
        delete x;
    }
    void Merge(int x_id, int y_id) {
        Node* x = id_map[x_id], * y = id_map[y_id];
        if (!x || !y) return;
        Node* rx = find_root(x), * ry = find_root(y);
        if (rx == ry) return;
        Node* new_root = merge(rx, ry);
        roots.erase(rx);
        roots.erase(ry);
        roots.insert(new_root);
    }
};
signed main() {
    cin.tie(0)->sync_with_stdio(false);
    LIT hp;
    int n, m;
    cin >> n >> m;
    for (int i = 1, a; i <= n; ++i) {
        cin >> a;
        hp.insert(a, i);
    }
    while (m--) {
        int op, x, y;
        cin >> op;
        if (op == 1) {
            cin >> x >> y;
            hp.Merge(x, y);
        }
        else {
            cin >> x;
            auto it = hp.id_map.find(x);
            if (it == hp.id_map.end()) {
                cout << -1 << '\n';
            }
            else {
                LIT::Node* root = hp.find_root(it->second);
                cout << root->val << '\n';
                hp.erase(root->id);
            }
        }
    }
    return 0;
}