//  OJ: 洛谷
//  提交ID: 220069025
//  题目ID: P1640
#include<bits/stdc++.h>
using namespace std;
constexpr int N = 2e6 + 10, M = 5e6 + 10, inf = 0x3f3f3f3f;
int a, b, n;
struct Edge {
	int v, nxt;
}edge[M];
int head[N], cur[N], idx;
void add(int u, int v) {
	edge[++idx] = { v,head[u] };
	head[u] = idx;
}
void addedge(int u, int v) {
	add(u, v); add(v, u);
}
int bel[N];
bool vis[N];
bool dfs(int x) {
	if (vis[x - n]) return 0;
	vis[x - n] = 1;
	for (int i = head[x]; i; i = edge[i].nxt) {
		if (!bel[edge[i].v] || dfs(bel[edge[i].v])) {
			bel[edge[i].v] = x;
			return 1;
		}
	}
	return 0;
}
int clac() {
	for (int i = n + 1; i <= n + 1e4; ++i) {
		//memset(vis, 0, sizeof vis);
		//I don't know wether it need that
		//but I guess it needn't(from random data&sample)
		if (!dfs(i))
			return i - n - 1;
	}
	return 1e4;
}
int main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n;
	for (int i = 1; i <= n; ++i)
		cin >> a >> b, addedge(i, n + a), addedge(i, n + b);
	cout << clac() << endl;
}
