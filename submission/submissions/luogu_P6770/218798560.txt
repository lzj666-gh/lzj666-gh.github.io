//  OJ: 洛谷
//  提交ID: 218798560
//  题目ID: P6770
#include<bits/stdc++.h>
#include<array>
#define int long long
using namespace std;
template<int N = 100000 + 10, int M = 1000000 + 10, int inf = INT_MAX>
class Graph {
	struct Edge {
		int v, w, nxt;
		Edge(int v = 0, int w = 0, int nxt = 0) :v(v), w(w), nxt(nxt) {}
	}edge[M];
	int head[N], idx;
public:
	void add(int u, int v, int w = 1) {
		edge[++idx] = { v,w,head[u] };
		head[u] = idx;
	}
	Graph() :head(), idx(), edge() {}
	array<int, N> dijkstra(int s) {
		static array<int, N> dis;
		static bitset<N> vis;
		dis.fill(inf);
		vis.reset();
		dis[s] = 0;
		priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;
		q.emplace(0, s);
		while (!q.empty()) {
			int now = q.top().second;
			q.pop();
			if (vis[now]) continue;
			vis[now] = 1;
			for (int i = head[now]; i; i = edge[i].nxt)
				if (int val = dis[now] + edge[i].w; dis[edge[i].v] > val)
					dis[edge[i].v] = val,
					q.emplace(val, edge[i].v);
		}
		return dis;
	}
};
Graph<500 + 10, 2000 + 10>g;
int n, m, t, k;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m >> t >> k;
	for (int i = 1, u, v, w; i <= m; ++i) cin >> u >> v >> w, g.add(u, v, w), g.add(v, u, w);
	auto dis = g.dijkstra(1);
	vector<int>ans;
	for (int i = 1, cbc; i <= t; ++i) cin >> cbc, dis[cbc] <= k && (ans.push_back(i), 1);
	cout << ans.size() << endl;
	for (const int& p : ans) cout << p << endl;
	return 0;
}