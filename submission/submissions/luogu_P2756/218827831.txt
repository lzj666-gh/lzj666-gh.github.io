//  OJ: 洛谷
//  提交ID: 218827831
//  题目ID: P2756
#include<bits/stdc++.h>
using namespace std;
struct Edge {
	int v, w, nxt;
}edge[10000 + 10];
int head[100 + 10], idx = 1;
void add(int u, int v, int w) {
	edge[++idx] = { v,w,head[u] };
	head[u] = idx;
}
void addedge(int u, int v, int w) {
	add(u, v, w); add(v, u, 0);
}
int h[100 + 10], more[100 + 10], g[100 + 10];
struct Comp { bool operator()(int a, int b) { return h[a] < h[b]; } };
priority_queue<int, vector<int>, Comp> pq;
bool vis[100 + 10];
bool bfs(int s, int t) {
	memset(h, 0x3f, sizeof h);
	queue<int>q; h[t] = 0; q.push(t);
	while (!q.empty()) {
		int now = q.front(); q.pop();
		for (int i = head[now]; i; i = edge[i].nxt)
			if (edge[i ^ 1].w && h[edge[i].v] > h[now] + 1)
				h[edge[i].v] = h[now] + 1, q.push(edge[i].v);
	}
	return h[s] == 0x3f3f3f3f;
}
void push(int now, int s, int t) {
	for (int i = head[now]; i; i = edge[i].nxt) {
		if (edge[i].w && h[edge[i].v] + 1 == h[now]) {
			int flow = min(more[now], edge[i].w);
			more[edge[i].v] += flow; more[now] -= flow;
			edge[i].w -= flow; edge[i ^ 1].w += flow;
			if (edge[i].v != s && edge[i].v != t && !vis[edge[i].v])
				vis[edge[i].v] = 1, pq.push(edge[i].v);
			if (more[now] == 0) return;
		}
	}
}
void relabel(int now) {
	h[now] = INT_MAX;
	for (int i = head[now]; i; i = edge[i].nxt)
		if (edge[i].w && h[edge[i].v] + 1 < h[now])
			h[now] = h[edge[i].v] + 1;
}
int hlpp(int n, int s, int t) {
	if (bfs(s, t)) return 0;
	h[s] = n;
	for (int i = 1; i <= n; ++i) if (h[i] ^ 0x3f3f3f3f) g[h[i]]++;
	for (int i = head[s]; i; i = edge[i].nxt)
		if (int w = edge[i].w; w)
			edge[i].w -= w, edge[i ^ 1].w += w, more[edge[i].v] += w, more[s] -= w,
			edge[i].v != s && edge[i].v != t && !vis[edge[i].v] && (pq.push(edge[i].v), vis[edge[i].v] = 1);
	while (!pq.empty()) {
		int now = pq.top(); pq.pop();
		vis[now] = 0; push(now, s, t);
		if (more[now] && (h[now] ^ 0x3f3f3f3f)) {
			if (!--g[h[now]]) for (int i = 1; i <= n; i++)
				if (i != s && i != t && h[i] > h[now] && h[i] < n + 1)
					h[i] = n + 1;
			relabel(now); ++g[h[now]], pq.push(now), vis[now] = 1;
		}
	}
	return more[t];
}
int n, m;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m;
	int u, v;
	while (cin >> u >> v, u != -1 && v != -1) addedge(u, v, 1);
	for (int i = 1; i <= n; ++i) addedge(m + 2, i, 1);
	for (int i = n + 1; i <= m; ++i) addedge(i, m + 1, 1);
	cout << hlpp(m + 2, m + 2, m + 1) << endl;
	for (int i = 1; i <= n; ++i)
		for (int j = head[i]; j; j = edge[j].nxt)
			if (edge[j ^ 1].w && edge[j].v <= m)
				cout << i << ' ' << edge[j].v << endl;
	return 0;
}