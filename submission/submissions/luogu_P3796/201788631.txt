//  OJ: 洛谷
//  提交ID: 201788631
//  题目ID: P3796
#include<bits/stdc++.h>
using namespace std;
int n, trie[1000000 + 5][26], idx, ret[1000000 + 5];
vector<int>v[1000000 + 5];
void insert(string s, int id) {
	int k = 0;
	for (const char& c : s) {
		if (!trie[k][c - 'a'])
			trie[k][c - 'a'] = ++idx, v[idx].clear();
		k = trie[k][c - 'a'];
	}
	v[k].push_back(id);
}
void build() {
	queue<int>q;
	for (int i = 0; i < 26; ++i)
		if (trie[0][i])
			q.push(trie[0][i]);
	while (!q.empty()) {
		int now = q.front(); q.pop();
		for (int i = 0; i < 26; ++i)
			if (trie[now][i])
				q.push(trie[now][i]),
				ret[trie[now][i]] = trie[ret[now]][i];
			else
				trie[now][i] = trie[ret[now]][i];
	}
}
int ans[1000000 + 5], cnt[1000000 + 5];
string s[150 + 5];
void query(string s) {
	for (int k = 0, i = 0; k < s.size(); ++k) {
		i = trie[i][s[k] - 'a'];
		for (int j = i; j; j = ret[j])
			cnt[j]++;
	}
	for (int j = 1; j <= idx; ++j)
		for (const int& x : v[j])
			ans[x] += cnt[j];
	int mx = 0;
	for (int i = 1; i <= n; ++i)
		mx = max(ans[i], mx);
	cout << mx << endl;
	for (int i = 1; i <= n; ++i)
		if (ans[i] == mx)
			cout << ::s[i] << endl;
}
int main() {
	cin.tie(0)->sync_with_stdio(false);
	while (cin >> n, n) {
		memset(trie, 0, sizeof trie);
		memset(ret, 0, sizeof ret);
		memset(cnt, 0, sizeof cnt);
		memset(ans, 0, sizeof ans);
		for (int i = 1; i <= n; ++i)
			cin >> s[i], insert(s[i], i);
		build();
		string s;
		cin >> s;
		query(s);
	}
	return 0;
}
[[I_will_never_go_that_is_why_I_did_them_all]]
int for_a_chance_at_least_to_live_in_your_ways;