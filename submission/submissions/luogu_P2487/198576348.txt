//  OJ: 洛谷
//  提交ID: 198576348
//  题目ID: P2487
#include<bits/stdc++.h>
using namespace std;
struct Seg_Tree {
#define lc(p) (tree[p].lss == -1 ? tree[p].lss = ++idx : tree[p].lss)
#define rc(p) (tree[p].rss == -1 ? tree[p].rss = ++idx : tree[p].lss)
#define ls l, l + r >> 1
#define rs (l + r >> 1) + 1, r
	struct Node {
		int mx, tim, lss, rss;
		Node(int mxx = -1, int timm = 1) :mx(mxx), tim(timm), lss(-1), rss(-1) { }
	}tree[50000 << 2 | 3];
	int idx = 0;
	void pushup(int p) {
		if(tree[lc(p)].mx == tree[rc(p)].mx) {
			tree[p].mx = tree[lc(p)].mx;
			tree[p].tim = tree[lc(p)].tim + tree[rc(p)].tim;
		}
		else if(tree[lc(p)].mx > tree[rc(p)].mx) {
			tree[p] = tree[lc(p)];
		}
		else {
			tree[p] = tree[rc(p)];
		}
	}
	void add(int p, int l, int r, int x, int k) {
		if(r < x || x < l) return;
		if(l == r) {
			if(tree[p].mx < k) {
				tree[p].mx = k;
				tree[p].tim = 1;
			}
			else if(tree[p].mx == k) {
				tree[p].tim++;
			}
			return;
		}
		add(lc(p), ls, x, k);
		add(rc(p), rs, x, k);
		pushup(p);
	}
	Node query(int p, int l, int r, int L, int R) {
		if(r < L || R < l) return { -1,1 };
		if(L <= l && r <= R) return tree[p];
		Node lans = query(lc(p), ls, L, R), rans = query(rc(p), rs, L, R), ans = Node();
		if(lans.mx == rans.mx) {
			ans.mx = lans.mx;
			ans.tim = lans.tim + rans.tim;
		}
		else if(lans.mx > rans.mx) {
			ans = lans;
		}
		else {
			ans = rans;
		}
		return ans;
	}
}t;
int n, h[50000 + 10], v[50000 + 10];
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n;
	for(int i = 1; i <= n; ++i) cin >> h[i] >> v[i];
	cout << 0 << endl;
	for(int i = 1; i <= n; ++i) cout << 0 << ' ';
	cout << endl;
	return 0;
}
//5e7PB->6e2GB