//  OJ: 洛谷
//  提交ID: 220133116
//  题目ID: P3373
#include<bits/stdc++.h>
using namespace std;
constexpr long long N = 1e5 + 5, mod = 571373;
struct mod_int {
	long long val;
	static long long pow(long long base, long long exp) {
		long long res = 1;
		while (exp) {
			if (exp & 1) res = res * base % mod;
			base = base * base % mod;
			exp >>= 1;
		}
		return res;
	}
	mod_int inv() const { return mod_int(pow(val, mod - 2)); }
	template<typename T> mod_int(T v = 0) : val(v % mod) { if (val < 0) val += mod; }
	mod_int operator+(const mod_int& other) const { return mod_int(val + other.val); }
	mod_int operator-(const mod_int& other) const { return mod_int(val - other.val); }
	mod_int operator*(const mod_int& other) const { return mod_int(val * other.val); }
	mod_int operator/(const mod_int& other) const { return mod_int(val * other.inv().val); }
	mod_int& operator+=(const mod_int& other) { val = (val + other.val) % mod; return *this; }
	mod_int& operator-=(const mod_int& other) { val = (val - other.val + mod) % mod; return *this; }
	mod_int& operator*=(const mod_int& other) { val = (val * other.val) % mod; return *this; }
	mod_int& operator/=(const mod_int& other) { val = (val * other.inv().val) % mod; return *this; }
	mod_int operator-() const { return mod_int(-val); }
	mod_int operator++() { return *this += 1; }
	mod_int operator--() { return *this -= 1; }
	mod_int operator++(int) { mod_int temp = *this; *this += 1; return temp; }
	mod_int operator--(int) { mod_int temp = *this; *this -= 1; return temp; }
	bool operator==(const mod_int& other) const { return val == other.val; }
	bool operator!=(const mod_int& other) const { return val != other.val; }
	bool operator<(const mod_int& other) const { return val < other.val; }
	bool operator>(const mod_int& other) const { return val > other.val; }
	bool operator<=(const mod_int& other) const { return val <= other.val; }
	bool operator>=(const mod_int& other) const { return val >= other.val; }
	mod_int& operator<<(const mod_int& other) { val = (val << other.val) % mod; return *this; }
	mod_int& operator>>(const mod_int& other) { val = (val >> other.val) % mod; return *this; }
	mod_int& operator|(const mod_int& other) { val = (val | other.val) % mod; return *this; }
	mod_int& operator&(const mod_int& other) { val = (val & other.val) % mod; return *this; }
	mod_int& operator^(const mod_int& other) { val = (val ^ other.val) % mod; return *this; }
};
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
	struct Node {
		mod_int sum, add, mul;
		Node() : sum(0), add(0), mul(1) {}
	}tree[N << 2];
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
	}
	void pushdown(int p, int l, int r) {
		if (tree[p].mul != 1) {
			tree[lc(p)].sum *= tree[p].mul;
			tree[rc(p)].sum *= tree[p].mul;
			tree[lc(p)].mul *= tree[p].mul;
			tree[rc(p)].mul *= tree[p].mul;
			tree[lc(p)].add *= tree[p].mul;
			tree[rc(p)].add *= tree[p].mul;
			tree[p].mul = 1;
		}
		if (tree[p].add != 0) {
			tree[lc(p)].sum += mod_int(mid - l + 1) * tree[p].add;
			tree[rc(p)].sum += mod_int(r - mid) * tree[p].add;
			tree[lc(p)].add += tree[p].add;
			tree[rc(p)].add += tree[p].add;
			tree[p].add = 0;
		}
	}
	void build(int p, int l, int r, vector<int>& a) {
		tree[p].add = 0; tree[p].mul = 1;
		if (l == r) {
			tree[p].sum = a[l];
			return;
		}
		build(lson, a);
		build(rson, a);
		pushup(p);
	}
	void add(int p, int l, int r, int L, int R, mod_int val) {
		if (L <= l && r <= R) {
			tree[p].sum += mod_int(r - l + 1) * val;
			tree[p].add += val;
			return;
		}
		pushdown(p, l, r);
		if (L <= mid) add(lson, L, R, val);
		if (R > mid) add(rson, L, R, val);
		pushup(p);
	}
	void mul(int p, int l, int r, int L, int R, mod_int val) {
		if (L <= l && r <= R) {
			tree[p].sum *= val;
			tree[p].mul *= val;
			tree[p].add *= val;
			return;
		}
		pushdown(p, l, r);
		if (L <= mid) mul(lson, L, R, val);
		if (R > mid) mul(rson, L, R, val);
		pushup(p);
	}
	mod_int query(int p, int l, int r, int L, int R) {
		if (L <= l && r <= R) return tree[p].sum;
		pushdown(p, l, r);
		mod_int res = 0;
		if (L <= mid) res += query(lson, L, R);
		if (R > mid) res += query(rson, L, R);
		return res;
	}
}t;
int n, m, M;
vector<int>a;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m >> M;
	a.resize(n + 1);
	for (int i = 1; i <= n; ++i) cin >> a[i];
	t.build(1, 1, n, a);
	while(m--) {
		int op, l, r, x;
		cin >> op;
		if (op == 1) {
			cin >> l >> r >> x;
			t.mul(1, 1, n, l, r, x);
		}
		else if (op == 2) {
			cin >> l >> r >> x;
			t.add(1, 1, n, l, r, x);
		}
		else if (op == 3) {
			cin >> l >> r;
			cout << t.query(1, 1, n, l, r).val << endl;
		}
	}
	return 0;
}