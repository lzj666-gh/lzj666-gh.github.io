//  OJ: 洛谷
//  提交ID: 212932510
//  题目ID: P3373
#include<bits/stdc++.h>
#define int long long
using namespace std;
int mod;
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid(l, r) (l + r >> 1)
	int n;
	struct Node {
		int sum, add, mul;
		Node() : sum(0), add(0), mul(1) {}
	};
	vector<Node> t;
	Seg_Tree(int n = 0) : n(n), t(4 * n) {}
	void pushup(int p) {
		t[p].sum = t[lc(p)].sum + t[rc(p)].sum;
		t[p].sum %= mod;
	}
	void pushdown(int p, int tl, int tr) {
		if (t[p].mul != 1) {
			t[lc(p)].sum = t[lc(p)].sum * t[p].mul % mod;
			t[rc(p)].sum = t[rc(p)].sum * t[p].mul % mod;
			t[lc(p)].mul *= t[p].mul; t[lc(p)].mul %= mod;
			t[rc(p)].mul *= t[p].mul; t[rc(p)].mul %= mod;
			t[p].mul = 1;
		}
		if (t[p].add) {
			t[lc(p)].sum += (mid(tl, tr) - tl + 1) * t[p].add; t[lc(p)].sum %= mod;	
			t[rc(p)].sum += (tr - mid(tl, tr)) * t[p].add; t[rc(p)].sum %= mod;
			t[lc(p)].add += t[p].add; t[lc(p)].add %= mod;
			t[rc(p)].add += t[p].add;t[rc(p)].add %= mod;
			t[p].add = 0;
		}
	}
	void build(int p, int tl, int tr, vector<int>& a) {
		//cerr << p << " " << tl << " " << tr << " " << a.size() << endl;
		if (tl == tr) {
			t[p].sum = a[tl] % mod;
			return;
		}
		build(lc(p), tl, mid(tl, tr), a);
		build(rc(p), mid(tl, tr) + 1, tr, a);
		pushup(p);
	}
	void add(int p, int tl, int tr, int l, int r, int x) {
		//cerr << p << " " << tl << " " << tr << " " << l << " " << r << " " << t[p] << ',' << lzy[p] << endl;
		if (tr < l || r < tl) return;
		if (l <= tl && tr <= r) {
			t[p].sum += (tr - tl + 1) * x;
			t[p].sum %= mod;
			t[p].add += x;
			t[p].add %= mod;
			return;
		}
		pushdown(p, tl, tr);
		add(lc(p), tl, mid(tl, tr), l, r, x);
		add(rc(p), mid(tl, tr) + 1, tr, l, r, x);
		pushup(p);
	}
	void multiply(int p, int tl, int tr, int l, int r, int x) {
		//cerr << p << " " << tl << " " << tr << " " << l << " " << r << " " << t[p] << ',' << lzy[p] << endl;
		if (tr < l || r < tl) return;
		if (l <= tl && tr <= r) {
			t[p].sum *= x;
			t[p].sum %= mod;
			t[p].mul *= x;
			t[p].mul %= mod;
			t[p].add *= x;
			t[p].add %= mod;
			return;
		}
		pushdown(p, tl, tr);
		multiply(lc(p), tl, mid(tl, tr), l, r, x);
		multiply(rc(p), mid(tl, tr) + 1, tr, l, r, x);
		pushup(p);
	}
	int query(int p, int tl, int tr, int l, int r) {
		//cerr << p << " " << tl << " " << tr << " " << l << " " << r << " " << t[p] << ',' << lzy[p] << endl;
		if (tr < l || r < tl) return 0;
		if (l <= tl && r >= tr) return t[p].sum;
		pushdown(p, tl, tr);
		int ans = 
			query(lc(p), tl, mid(tl, tr), l, r) + 
			query(rc(p), mid(tl, tr) + 1, tr, l, r);
		pushup(p);
		return ans % mod;
	}
}t(1e5);
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, m;
	cin >> n >> m >> mod;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	t.build(1, 1, n, a);
	while (m--) {
		int opt, l, r, k;
		cin >> opt >> l >> r;
		if (opt == 1) cin >> k, t.multiply(1, 1, n, l, r, k);
		else if (opt == 2) cin >> k, t.add(1, 1, n, l, r, k);
		else cout << t.query(1, 1, n, l, r) << endl;
		//for (int i = 1; i <= n; ++i) cout << t.query(1, 1, n, i, i) << " "; cout << endl;
	}
	return 0;
}