//  OJ: 洛谷
//  提交ID: 220787657
//  题目ID: P1383
#include<bits/stdc++.h>
#define int long long
using namespace std;
#define lc(p) (tree[p].ls)
#define rc(p) (tree[p].rs)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
struct Tree {
	int sum, ls, rs;
}tree[30000000 + 10];
int root[1000000 + 10], n[1000000 + 10], m, idx, a[1000000 + 10];
void pushup(int p) {
	tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
}
int query(int p, int l, int r, int x) {
	//cerr << p << "->" << "[" << l << ',' << r << "] query " << x << endl;
	if (l == r) return tree[p].sum;
	if (x <= mid) return query(lson, x);
	else return query(rson, x);
}
void add(int lp, int rp, int l, int r, int x, int val) {
	//cerr << "[" << lp << "," << rp << "]" << "->" << "[" << l << ',' << r << "] add " << x << " with " << val << endl;
	tree[rp] = tree[lp];
	if (l == r) {
		tree[rp].sum = val;
		return;
	}
	if (x <= mid) add(tree[lp].ls, tree[rp].ls = ++idx, l, mid, x, val);
	else add(tree[lp].rs, tree[rp].rs = ++idx, mid + 1, r, x, val);
	pushup(rp);
}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> m;
	root[0] = ++idx;
	for (int l = 1, idk = 0; l <= m; ++l) {
		char opt;
		cin >> opt;
		if (opt == 'T') {
			++idk; n[idk] = n[idk - 1] + 1; char val; cin >> val;
			add(root[idk - 1], root[idk] = ++idx, 1, 1e5, n[idk], val);
		}
		else if (opt == 'Q') {
			int val; cin >> val;
			cout << (char)query(root[idk], 1, 1e5, val) << endl;
		}
		else {
			int val; cin >> val; ++idk;
			root[idk] = root[idk - 1 - val];
			n[idk] = n[idk - 1 - val];
		}
	}
	return 0;
}