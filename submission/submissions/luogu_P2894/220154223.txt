//  OJ: 洛谷
//  提交ID: 220154223
//  题目ID: P2894
#include<bits/stdc++.h>
using namespace std;
constexpr int N = 5e4 + 5;
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
	struct Node {
		int ans, ansl, ansr, sum, full, empty;
	}tree[N << 2];
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
		tree[p].ans = max({ tree[lc(p)].ans,tree[rc(p)].ans,tree[lc(p)].ansl + tree[rc(p)].ansr });
		tree[p].ansl = tree[lc(p)].ansl;
		if (tree[lc(p)].sum == 0) tree[p].ansl += tree[rc(p)].ansl;
		tree[p].ansr = tree[rc(p)].ansr;
		if (tree[rc(p)].sum == 0) tree[p].ansr += tree[lc(p)].ansr;
	}
	void pushdown(int p, int l, int r) {
		if (tree[p].full) {
			tree[rc(p)].full = tree[lc(p)].full = 1;
			tree[lc(p)].ans = tree[rc(p)].ans = tree[lc(p)].ansl = tree[rc(p)].ansr = 0;
			tree[lc(p)].sum = (mid - l + 1);
			tree[rc(p)].sum = (r - mid);
			tree[p].full = 0;
		}
		if (tree[p].empty) {
			tree[rc(p)].empty = tree[lc(p)].empty = 1;
			tree[lc(p)].ans = tree[lc(p)].ansl = tree[lc(p)].ansr = mid - l + 1;
			tree[rc(p)].ans = tree[rc(p)].ansl = tree[rc(p)].ansr = r - mid;
			tree[lc(p)].sum = tree[rc(p)].sum = 0;
			tree[p].empty = 0;
		}
	}
	void build(int p, int l, int r) {
		tree[p].ans = tree[p].ansl = tree[p].ansr = r - l + 1;
		if (l == r) return;
		build(lson); build(rson);
	}
	void full(int p, int l, int r, int L, int R) {
		if (L <= l && r <= R) {
			tree[p].full = 1;
			tree[p].ans = tree[p].ansl = tree[p].ansr = 0;
			tree[p].sum = (r - l + 1);
			tree[lc(p)].empty = tree[rc(p)].empty = 0;
			return;
		}
		pushdown(p, l, r);
		if (L <= mid) full(lson, L, R);
		if (R > mid) full(rson, L, R);
		pushup(p);
	}
	void empty(int p, int l, int r, int L, int R) {
		if (L <= l && r <= R) {
			tree[p].empty = 1;
			tree[p].ans = tree[p].ansl = tree[p].ansr = (r - l + 1);
			tree[p].sum = 0;
			tree[lc(p)].full = tree[rc(p)].full = 0;
			return;
		}
		pushdown(p, l, r);
		if (L <= mid) empty(lson, L, R);
		if (R > mid) empty(rson, L, R);
		pushup(p);
	}
	int query(int p, int l, int r, int x) {
		if (tree[p].ans < x) return 0;
		pushdown(p, l, r);
		if (tree[lc(p)].ans >= x) return query(lson, x);
		if (tree[lc(p)].ansr + tree[rc(p)].ansl >= x) return mid - tree[lc(p)].ansr + 1;
		if (tree[rc(p)].ans >= x) return query(rson, x);
		//cerr << "nanan?" << endl;
		return 0;
	}
}t;
int n, m, opt, x, y;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m;
	t.build(1, 1, n);
	for (int i = 1; i <= m; ++i) {
		cin >> opt >> x;
		if (opt == 1) {
			int idx = t.query(1, 1, n, x);
			cout << idx << '\n';
			if (idx) t.full(1, 1, n, idx, idx + x - 1);
		}
		else {
			cin >> y;
			t.empty(1, 1, n, x, x + y - 1);
		}
	}
	return 0;
}