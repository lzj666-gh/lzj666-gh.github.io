//  OJ: 洛谷
//  提交ID: 217069861
//  题目ID: P6577
#include<bits/stdc++.h>
using namespace std;
namespace IO {
	const int SIZE = (1 << 21) + 1;
	char ibuf[SIZE], * iS, * iT, obuf[SIZE], * oS = obuf, * oT = obuf + SIZE - 1; char _st[55]; int _qr = 0;
	inline char gc() { return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++); }
	inline void qread() {}
	inline void qread(char& IEE) { IEE = gc(); }
	template<class T1, class ...T2> inline void qread(T1& IEE, T2&... ls) { T1 __ = 0, ___ = 1; char ch; while (!isdigit(ch = gc())) ___ = (ch == '-') ? -___ : ___; do { __ = (__ << 1) + (__ << 3) + (ch ^ 48); } while (isdigit(ch = gc())); __ *= ___; IEE = __; qread(ls...); }
	template<class... T2> inline void qread(char& IEE, T2&... ls) { IEE = gc(); qread(ls...); }
	inline void flush() { fwrite(obuf, 1, oS - obuf, stdout); oS = obuf; }
	inline void putc_(char _x) { *oS++ = _x; if (oS == oT) flush(); }
	inline void qwrite() {}
	inline void qwrite(char IEE) { putc_(IEE); }
	inline void qwrite(const char* str) { while (*str != '\0') putc_(*str++); }
	inline void qwrite(const std::string& IEE) { qwrite(IEE.c_str()); }
	template<class T1, class ...T2> inline void qwrite(T1 IEE, T2... ls) { if (!IEE) putc_('0'); if (IEE < 0) putc_('-'), IEE = -IEE; while (IEE) _st[++_qr] = IEE % 10 + '0', IEE /= 10; while (_qr) putc_(_st[_qr--]); qwrite(ls...); }
	template<class... T2> inline void qwrite(char IEE, T2... ls) { putc_(IEE); qwrite(ls...); }
	template<class... T2> inline void qwrite(const char* str, T2... ls) { while (*str != '\0') putc_(*str++); qwrite(ls...); }
	template<class... T2> inline void qwrite(const std::string& IEE, T2... ls) { qwrite(IEE.c_str(), ls...); }
	struct Flusher_ { ~Flusher_() { flush(); } }io_flusher;
}
using namespace IO;
constexpr int N = 500 + 5;
int w[N][N], lx[N], ly[N];
bool vis[N];
long long slack[N], chose[N], pre[N];
int n;
void bfs(int x) {
	memset(vis, 0, sizeof vis);
	memset(pre, 0, sizeof pre);
	memset(slack, 0x7f, sizeof slack);
	int now = 0, will = 0;
	chose[now] = x;
	while (chose[now] ^ -1) {
		int t = chose[now], d = LLONG_MAX;
		vis[now] = 1;
		for (int i = 1; i <= n; ++i) {
			if (vis[i]) continue;
			if (slack[i] > lx[t] + ly[i] - w[t][i]) {
				slack[i] = lx[t] + ly[i] - w[t][i];
				pre[i] = now;
			}
			if (slack[i] < d) d = slack[i], will = i;
		}
		for (int i = 0; i <= n; ++i)
			if (vis[i])
				lx[chose[i]] -= d, ly[i] += d;
			else
				slack[i] -= d;
		now = will;
	}
	while (now) {
		chose[now] = chose[pre[now]];
		now = pre[now];
	}
}
int KM() {
	memset(chose, -1, sizeof chose);
	memset(lx, 0, sizeof lx); memset(ly, 0, sizeof ly);
	for (int i = 1; i <= n; ++i) bfs(i);
	long long ans = 0;
	for (int i = 1; i <= n; ++i) if (chose[i] ^ -1) ans += w[chose[i]][i];
	return ans;
}
signed main() {
	memset(w, 0xcf, sizeof w);
	int m;
	qread(n, m);
	while (m--) { int u, v, W; qread(u, v, W); w[u][v] = max(w[u][v], W); }
	qwrite(KM(), '\n');
	for (int i = 1; i <= n; ++i) qwrite(chose[i], ' ');
	return 0;
}
/*============================*\
|    代码千万别让我再重构了    |
|          佛祖保佑            |
|          一次写过            |
\*============================*/