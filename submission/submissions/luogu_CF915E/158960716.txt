//  OJ: 洛谷
//  提交ID: 158960716
//  题目ID: CF915E
#include<bits/stdc++.h>
using namespace std;
struct Tree {
#define lc(p) (tree[p].ls)
#define rc(p) (tree[p].rs)
	struct point {
		int l, r, ls, rs;bool lazy;
		long long sum;
		point() :l(0), r(0), sum(0), lazy(0) {}
		point(int ll, int rr, long long ssum, bool lzy) :l(ll), r(rr), sum(ssum), lazy(lzy) {}
	}tree[4 * 100000 + 10];
	int idx = 1;
	void pushdown(int p) {
		if (!lc(p)) lc(p) = ++idx, tree[lc(p)].l = tree[p].l, tree[lc(p)].r = tree[p].l + tree[p].r >> 1;
		if (!rc(p)) rc(p) = ++idx, tree[rc(p)].l = tree[p].l + tree[p].r >> 1, tree[rc(p)].r = tree[p].r;
		if (tree[p].lazy) {
			tree[p].sum = tree[p].r - tree[p].l;
			tree[lc(p)].sum = tree[lc(p)].r - tree[lc(p)].l;
			tree[rc(p)].sum = tree[rc(p)].r - tree[rc(p)].l;
		}
		else {
			tree[lc(p)].sum = tree[rc(p)].sum = tree[p].sum = 0;
		}
		tree[lc(p)].lazy = tree[rc(p)].lazy = tree[p].lazy;
	}
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
	}
	void add(int p, int l, int r, bool k) {
		if (tree[p].l >= r || tree[p].r <= l) return;
		if (tree[p].l == tree[p].r - 1) {
			tree[p].sum = k;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			tree[p].lazy = k;
			tree[p].sum = k * (tree[p].r - tree[p].l);
			return;
		}
		if (l < tree[p].l + tree[p].r >> 1) if(!lc(p)) lc(p) = ++idx, tree[lc(p)].l = tree[p].l, tree[lc(p)].r = tree[p].l + tree[p].r >> 1;
		if (r > tree[p].l + tree[p].r >> 1) if(!rc(p)) rc(p) = ++idx, tree[rc(p)].l = tree[p].l + tree[p].r >> 1, tree[rc(p)].r = tree[p].r;
		pushdown(p);
		if (l < tree[p].l + tree[p].r >> 1) add(lc(p), l, r, k);
		if (r > tree[p].l + tree[p].r >> 1) add(rc(p), l, r, k);
		pushup(p);
	}
	long long query(int p, int l, int r) {
		if (tree[p].l >= r || tree[p].r <= l) return 0;
		if (tree[p].l == tree[p].r - 1) {
			return tree[p].sum;
		}
		if (l <= tree[p].l && tree[p].r <= r) return tree[p].sum;
		pushdown(p);
		long long ans = 1ll * query(lc(p), l, r) + query(rc(p), l, r);
		pushup(p);
		return ans;
	}
}t;
int n, q, l, r, k;
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> q;
	t.tree[1].l = 1, t.tree[1].r = n + 1, t.tree[1].sum = 0, t.tree[1].lazy = 0;
	while (q--) {
		cin >> l >> r >> k;
		if (k == 1) t.add(1, l, r + 1, 1);
		else t.add(1, l, r + 1, 0);
		for(int i=1;i<=n;++i) cout<<t.query(1,i,i+1)<<' ';
		cout<<endl;
		cout << n - t.query(1, 1, n) << endl;
	}
	return 0;
}
/*
8 10
659 463 793 740 374 330 772 681
1 5 8 39
2 5 8
1 3 6 3
1 5 8 90
1 1 5 21
2 3 8
1 3 8 17
1 4 7 52
2 2 6
1 2 7 41

ans:
2313
4281
3278

*/