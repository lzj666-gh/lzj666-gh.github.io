//  OJ: 洛谷
//  提交ID: 189053078
//  题目ID: U493562
#include<bits/stdc++.h>
using namespace std;
int n, m;
struct Node {
	int ls, rs, val;
	Node() :ls(0), rs(0), val(0) {}
	Node(int v) :ls(0), rs(0), val(v) {}
	Node(int lc, int rc, int v) :ls(lc), rs(rc), val(v) {}
}tree[3500'0000];
int idx;
struct Seg_Tree {
#define mid(l, r) (l + r >> 1)
	int root;
	Seg_Tree() :root(++idx) {}
	void add(int x, int k, int l, int r, int& now) {
		if (!(l <= x && x <= r)) return;
		if (!now) now = ++idx;
		if (l == r && l == x) {
			tree[now].val += k;
			return;
		}
		add(x, k, l, mid(l, r), tree[now].ls);
		add(x, k, mid(l, r) + 1, r, tree[now].rs);
		tree[now].val = tree[tree[now].ls].val + tree[tree[now].rs].val;
	}
	int query(int L, int R, int l, int r, int now) {
		if (!now) return 0;
		if (L <= l && r <= R) return tree[now].val;
		if (r < L || R < l) return 0;
		return query(L, R, l, mid(l, r), tree[now].ls) + query(L, R, mid(l, r) + 1, r, tree[now].rs);
	}
	int ask(int k, int l, int r, int now) {
		if (l == r) return l;
		if (k > tree[tree[now].ls].val) 
			return ask(k - tree[tree[now].ls].val, mid(l, r) + 1, r, tree[now].rs);
		else 
			return ask(k, l, mid(l, r), tree[now].ls);
	}
}tr[200005];
void build(int p, int l, int r) {

}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	for (int i = 1; i <= 10; ++i) cout << tr[i].root << endl;
	return 0;
}