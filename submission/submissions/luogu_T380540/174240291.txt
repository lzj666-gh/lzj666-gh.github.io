//  OJ: 洛谷
//  提交ID: 174240291
//  题目ID: T380540
#include<bits/stdc++.h>
using namespace std;
struct Edge {
	int v, nxt;
	string w;
}edge[500000 + 10];
int head[100000 + 10], idx;
void add(int u, int v, string w) {
	edge[++idx] = { v,head[u],w };
	head[u] = idx;
}
int n, m, cnt;
string dis[100000 + 10];
bool vis[100000 + 10];
namespace Sub1 {
	struct path {
		string name;
		int idx;
		friend bool operator<(const path& a, const path& b) {
			if (a.name.size() == b.name.size()) return a.name > b.name;
			return a.name.size() > b.name.size();
		}
	};
	priority_queue<path>q;
	void dij() {
		string inf = string(cnt, 'z');
		for (int i = 2; i <= n; ++i) dis[i] = inf;
		dis[1] = string();
		q.push({ string(),1 });
		while (!q.empty()) {
			path now = q.top(); q.pop();
			if (vis[now.idx]) continue;
			vis[now.idx] = 1;
			for (int i = head[now.idx]; i; i = edge[i].nxt) {
				string nm = now.name + edge[i].w;
				if (nm.size() < dis[edge[i].v].size() ||
					(nm.size() == dis[edge[i].v].size() &&
						nm < dis[edge[i].v])) {
					dis[edge[i].v] = nm;
					q.push({ nm,edge[i].v });
				}
			}
		}
		cout << dis[n] << ' ';
	}
}
namespace Sub2 {
	struct Path {
		string path; int idx;
		friend bool operator<(const Path& a, const Path& b) {
			return a.path > b.path;
		}
	};
	priority_queue<Path>q;
	void dij() {
		string inf = string(cnt, 'z');
		for (int i = 2; i <= n; ++i) dis[i] = inf;
		dis[1] = string();
		q.push({ string(),1 });
		while (!q.empty()) {
			Path now = q.top(); q.pop();
			if (vis[now.idx]) continue;
			vis[now.idx] = 1;
			for (int i = head[now.idx]; i; i = edge[i].nxt) {
				string nw = now.path + edge[i].w;
				if (nw < dis[edge[i].v]) {
					dis[edge[i].v] = nw;
					q.push({ nw,edge[i].v });
				}
			}
		}
		cout << dis[n] << endl;
	}
}
int main() {
// 	freopen("shortway.in", "r", stdin);
// 	freopen("shortway.out", "w", stdout);
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i <= m; ++i) {
		int u, v; string w;
		cin >> u >> v >> w;
		add(u, v, w);
		cnt += w.size();
	}
	Sub1::dij();
	memset(vis, 0, sizeof vis);
	Sub2::dij();
	return 0;
}