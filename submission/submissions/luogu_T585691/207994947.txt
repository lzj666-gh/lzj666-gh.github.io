//  OJ: 洛谷
//  提交ID: 207994947
//  题目ID: T585691
#include<bits/stdc++.h>
using namespace std;
const int N = 1e9;
const int maxn = 1e7 + 10;
unsigned int x = 123456789, y = 362436069, z, a[maxn];
int n, q;
unsigned int gen() {
	unsigned int t;
	x ^= x << 16; x ^= x >> 5; x ^= x << 1;
	t = x; x = y; y = z; z = t ^ x ^ y;
	return z % N + 1;
}
#define int long long
struct node {
	int l, r;
	friend bool operator < (const node& a, const node& b) {
		return a.l == b.l ? a.r < b.r : a.l < b.l;
	}
};
set<node> s;
int insert(int l, int r) {
	int ans = 0;
	auto it1 = s.lower_bound({ l, 0 });
	if (it1 != s.begin()) {
		it1--;
		if (it1->r < l) it1++;
	}
	if (it1 == s.end()) return 0;
	l = max(it1->l, l);
	if (l > r) return 0;
	if (r <= it1->r) {
		if (it1->l < l) s.insert({ it1->l,l - 1 });
		if (r < it1->r) s.insert({ r + 1,it1->r });
		s.erase(it1);
		for (int i = l; i <= r; ++i) ans += a[i];
		return ans;
	}
	auto it2 = s.upper_bound({ r, 0 });
	it2--;
	r = min(r, it2->r);
	if (it1 == it2) {
		if (it1->l < l) s.insert({ it1->l,l - 1 });
		if (r < it1->r) s.insert({ r + 1,it1->r });
		s.erase(it1);
		for (int i = l; i <= r; ++i) ans += a[i];
		return ans;
	}
	for (int i = l; i <= it1->r; ++i) ans += a[i];
	for (int i = it2->l; i <= r; ++i) ans += a[i];
	if (it1->l < l) s.insert({ it1->l,l - 1 });
	it1 = s.erase(it1);
	while (it1 != it2) {
		for (int i = it1->l; i <= it1->r; ++i) ans += a[i];
		it1 = s.erase(it1);
	}
	if (r < it2->r) s.insert({ r + 1,it2->r });
	s.erase(it2);
	return ans;
}
signed main() {
	freopen("change.in", "r", stdin);
	freopen("change.out", "w", stdout);
	cin >> n >> q >> z;
	for (int i = 1; i <= n; ++i)
		a[i] = gen();
	s.insert({ 1,n });
	int ans = 0;
	for (int i = 1; i <= q; ++i) {
		int l = gen() % n + 1, r = gen() % n + 1;
		if (l > r) swap(l, r);
		int res = insert(l, r);
		ans ^= res;
	}
	cout << ans << endl;
}