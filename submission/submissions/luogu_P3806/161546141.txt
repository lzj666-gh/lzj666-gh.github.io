//  OJ: 洛谷
//  提交ID: 161546141
//  题目ID: P3806
#include<bits/stdc++.h>
using namespace std;
int head[10000 + 10], idx;
struct Edge {
	int v, w, nxt;
}edge[20000 + 10];
void add(int u, int v, int w) {
	edge[++idx] = { v,w,head[u] };
	head[u] = idx;
}
int n, m, u, v, w, q[100 + 10];
bool vis[10000 + 10], qry[100 + 10], num[100000000 + 10];
namespace ROOT {
	int f[10000 + 10], g[10000 + 10], Vis[10000 + 10], O;
	void dfs(int x) {
		Vis[x] = 1;
		int p = head[x];
		while (p) {
			if (!vis[edge[p].v] && !Vis[edge[p].v]) {
				dfs(edge[p].v);
				g[x] += g[edge[p].v] + 1;
				f[x] = max(f[x], g[edge[p].v] + 1);
			}
			p = edge[p].nxt;
		}
		f[x] = max(f[x], n - g[x] - 1);
		Vis[x] = 0;
	}
	void Dfs(int k, int fa) {
		if (f[O] > f[k] && f[k]) O = k;
		for (int i = head[k]; i; i = edge[i].nxt) {
			if (edge[i].v == fa) continue;
			Dfs(edge[i].v, k);
		}
	}
	int gtrt(int rt) {
		memset(f, 0, sizeof f);
		memset(g, 0, sizeof g);
		dfs(rt);
		f[0] = INT_MAX;
		O = 0;
		Dfs(rt, -1);
		return O;
	}
}
int now_dis[10000 + 10];
vector<int>stk;
#define tp now_dis[0]
void sontree(int p, int dis, int fa) {
	now_dis[++tp] = dis;
	for (int i = head[p]; i; i = edge[i].nxt) {
		if (edge[i].v == fa || vis[edge[i].v]) continue;
		sontree(edge[i].v, dis + edge[i].w, p);
	}
}
void Now(int p) {
	stk.clear(); num[0] = 1;
	for (int k = head[p]; k; k = edge[k].nxt) {
		if (vis[edge[k].v]) continue; tp = 0;
		sontree(edge[k].v, edge[k].w, p);
		for (int i = 1; i <= tp; ++i)
			for (int j = m; j; --j)
				if (q[j] >= now_dis[i])
					qry[j] |= num[q[j] - now_dis[i]];
		for (int i = 1; i <= tp; ++i)
			if (!num[now_dis[i]])num[now_dis[i]] = 1, stk.push_back(now_dis[i]);
	}
	for (int i : stk) num[i] = 0;
}
void DFZ(int k) {
	vis[k] = 1; Now(k);
	for (int i = head[k]; i; i = edge[i].nxt)
		if (!vis[edge[i].v]) DFZ(ROOT::gtrt(edge[i].v));
}
signed main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i < n; ++i) cin >> u >> v >> w, add(u, v, w), add(v, u, w);
	for (int i = 1; i <= m; ++i) cin >> q[i];
	DFZ(ROOT::gtrt(1));
	for (int i = 1; i <= m; ++i) cout << (qry[i] ? "AYE\n" : "NAY\n");
	return 0;
}