//  OJ: 洛谷
//  提交ID: 179177452
//  题目ID: P3387
#include<bits/stdc++.h>
using namespace std;
struct Edge {
	int u, v, nxt;
}edge[20000 + 10];
int head[10000 + 10], idx, a[10000 + 10];
void add(int u, int v) {
	edge[++idx] = { u,v,head[u] };
	head[u] = idx;
}
int n, m, scc[10000 + 10], dfn[10000 + 10], low[10000 + 10], id, idk;
stack<int>st;
void tarjan(int x) {
	dfn[x] = low[x] = ++idk;
	st.push(x);
	for (int i = head[x]; i; i = edge[i].nxt) {
		if (!dfn[edge[i].v])
			tarjan(edge[i].v),
			low[x] = min(low[x], low[edge[i].v]);
		else if (!scc[edge[i].v])
			low[x] = min(low[x], dfn[edge[i].v]);
	}
	if (low[x] == dfn[x]) {
		id++;
		while (st.size()) {
			int now = st.top(); st.pop();
			scc[now] = id;
			if (now == x) break;
		}
	}
}
int cur[10000 + 10];
namespace SCCed {
	struct Edge {
		int v, nxt;
	}edge[100000 + 10];
	int head[10000 + 10], idx, fa[10000 + 10];
	void add(int u, int v) {
		edge[++idx] = { v,head[u] };
		head[u] = idx;
	}
	int n, l[100000 + 10];
	void main() {
		queue<int>q;
		n = ::id;

		for (int i = 1; i <= n; ++i) {
			if (fa[i] == 0) q.push(i);
			l[i] = ::cur[i];
		}

		while (!q.empty()) {
			int now = q.front(); q.pop(); /*cerr<<" "<<now<<" "<<l[now]<<endl;*/
			for (int i = head[now]; i; i = edge[i].nxt) {
				l[edge[i].v] = max(l[now] + ::cur[edge[i].v], l[edge[i].v]);
				--fa[edge[i].v];
				if (fa[edge[i].v] == 0) q.push(edge[i].v);
			}
		}

		int anss = 0;

		for (int i = 1; i <= n; ++i) anss = max(anss, l[i]);

		cout << anss << endl;
	}
}
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i <= n; ++i) cin >> a[i];
	for (int i = 1, u, v; i <= m; ++i) {
		cin >> u >> v;
		add(u, v);
	}
	for (int i = 1; i <= n; ++i) if (!dfn[i]) tarjan(i);
	for (int i = 1; i <= n; ++i) cur[scc[i]] += a[i];
	for (int i = 1; i <= idx; ++i)
		if (scc[edge[i].u] ^ scc[edge[i].v])
			SCCed::add(scc[edge[i].v], scc[edge[i].u]), SCCed::fa[scc[edge[i].u]]++;
	SCCed::main();
	return 0;
}