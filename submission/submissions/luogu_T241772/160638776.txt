//  OJ: 洛谷
//  提交ID: 160638776
//  题目ID: T241772
#include<bits/stdc++.h>
#define lblk(i) ((i) / m * m)
#define rblk(i) (((i) / m + 1) * m - 1)
#define smblk(i, j) ((i) / m == (j) / m)
#define gtblk(i) ((i) / m)
using namespace std;
int n, l, r, a[1000000], m, f[2000][2000], val[1000000], idx, cnt[1000000];
vector<int> v[1000000];
map<int, int> mp;
char buf[1 << 20], * p1, * p2;
#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1<<20,stdin), p1 == p2) ? 0 : *p1++)
inline void read(int& x) {
	bool f = 1; x = 0; char ch = getchar();
	while (ch < '0' || ch>'9') { if (ch == '-') f = !f; ch = getchar(); }
	while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }
	x = (f ? x : -x); return;
}
inline void write(int x) {
	if (x < 0) putchar('-'), x = -x;
	if (x > 9) write(x / 10);
	putchar(x % 10 + '0'); return;
}
signed main() {
	read(n);
	m = pow(n, 1.0 / 2.7) ^ log(sqrt(n));
	for (int i = 1; i <= n; ++i) {
		read(a[i]);
		if(!mp[a[i]]) mp[a[i]] = ++idx;
		val[mp[a[i]]] = a[i];
		a[i] = mp[a[i]];
		v[a[i]].push_back(i);
	}
	val[0] = 0x7f7f7f7f;
	for (int j = 0; j <= n / m; ++j) {
		memset(cnt, 0, sizeof cnt);
		int mx = 0, ans = 0;
		for (int i = j * m; i <= n; ++i) {
			cnt[a[i]]++;
			if (cnt[a[i]] > mx || (cnt[a[i]] == mx && val[a[i]] < val[ans])) {
				mx = cnt[a[i]];
				ans = a[i];
			}
			f[j][gtblk(i)] = ans;
		}
	}
	for (int cbc = 1; cbc <= n; ++cbc) {
		read(l); read(r);
		vector<int>may;
		for (int i = l; i <= rblk(l); ++i) may.push_back(a[i]);
		for (int i = lblk(r); i <= r; ++i) may.push_back(a[i]);
		if (gtblk(l) + 1 < gtblk(r)) {
			may.push_back(f[gtblk(l) + 1][gtblk(r) - 1]);
		}
		int mx = 0, ans = 0;
		for (int k : may) {
			int now = upper_bound(v[k].begin(), v[k].end(), r) - lower_bound(v[k].begin(), v[k].end(), l);
			if (now > mx || (now == mx && val[k] < val[ans])) {
				mx = now;
				ans = k;
			}
		}
		write(val[ans]);
		putchar(10);
	}
	return 0;
}
