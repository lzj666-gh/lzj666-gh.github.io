//  OJ: 洛谷
//  提交ID: 179966880
//  题目ID: T521045
#include<bits/stdc++.h>
//#pragma warning(disable:4996)
//#define ONLINE
using namespace std;
bool mem_begin = 0;
int n, m, a[1000000 + 5];
struct Seg_tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define ls(l, r) l, l + r >> 1
#define rs(l, r) (l + r >> 1) + 1, r
	struct Node {
		int l, r, top;
		long long mx, sum;
		bool use;
		bitset<65>lazy;
	}tree[1000000 << 2 | 2];
	void pushup(int p) {
		tree[p].mx = max(tree[lc(p)].mx, tree[rc(p)].mx);
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
	}
	void pushdown(int p) {
		if (tree[p].mx == 1) return;
		for (int i = 0; i < tree[p].top; ++i) {
			tree[lc(p)].lazy[tree[lc(p)].top] = tree[p].lazy[i];
			tree[lc(p)].top++;
			if (tree[lc(p)].top >= 2 && !tree[lc(p)].lazy[tree[lc(p)].top - 2] && tree[lc(p)].lazy[tree[lc(p)].top - 1])
				tree[lc(p)].top -= 2;
			tree[rc(p)].lazy[tree[rc(p)].top] = tree[p].lazy[i];
			tree[rc(p)].top++;
			if (tree[rc(p)].top >= 2 && !tree[rc(p)].lazy[tree[rc(p)].top - 2] && tree[rc(p)].lazy[tree[rc(p)].top - 1])
				tree[rc(p)].top -= 2;
		}
		if (tree[p].top) {
			tree[p].use = 0;
			if (tree[lc(p)].top) tree[lc(p)].use = 0;
			if (tree[rc(p)].top) tree[rc(p)].use = 0;
			tree[p].top = 0;
		}
	}
	void build(int p, int l, int r) {
		tree[p].l = l; tree[p].r = r;
		if (l == r) {
			tree[p].mx = tree[p].sum = a[l];
			return;
		}
		build(lc(p), ls(l, r));
		build(rc(p), rs(l, r));
		pushup(p);
		tree[p].use = 1;
	}
	void sqr(int p, int l, int r) {
		if (tree[p].r < l || r < tree[p].l) return;
		tree[p].use = 0;
		if (tree[p].l == tree[p].r) {
			if (tree[p].mx == 1) return;
			for (int i = 0; i < tree[p].top; ++i)
				if (tree[p].lazy[i])
					tree[p].mx = sqrt(tree[p].mx),
					tree[p].sum = sqrt(tree[p].sum);
				else
					tree[p].mx = tree[p].mx * tree[p].mx,
					tree[p].sum = tree[p].sum * tree[p].sum;
			tree[p].mx = sqrt(tree[p].mx);
			tree[p].sum = sqrt(tree[p].sum);
			tree[p].top = 0;
			tree[p].use = 1;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			if (tree[p].mx == 1) return;
			tree[p].lazy[tree[p].top] = 1;
			tree[p].top++;
			if (tree[p].top >= 2 && !tree[p].lazy[tree[p].top - 2] && tree[p].lazy[tree[p].top - 1])
				tree[p].top -= 2;
			return;
		}
		pushdown(p);
		sqr(lc(p), l, r);
		sqr(rc(p), l, r);
		if ((tree[lc(p)].use || tree[lc(p)].mx == 1) && (tree[rc(p)].use || tree[rc(p)].mx == 1)) pushup(p), tree[p].use = 1;
	}
	void pow(int p, int l, int r) {
		if (tree[p].r < l || r < tree[p].l) return;
		tree[p].use = 0;
		if (tree[p].l == tree[p].r) {
			if (tree[p].mx == 1) return;
			for (int i = 0; i < tree[p].top; ++i)
				if (tree[p].lazy[i])
					tree[p].mx = sqrt(tree[p].mx),
					tree[p].sum = sqrt(tree[p].sum);
				else
					tree[p].mx = tree[p].mx * tree[p].mx,
					tree[p].sum = tree[p].sum * tree[p].sum;
			tree[p].mx = tree[p].mx * tree[p].mx;
			tree[p].sum = tree[p].sum * tree[p].sum;
			tree[p].top = 0;
			tree[p].use = 1;
			return;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			if (tree[p].mx == 1) return;
			tree[p].lazy[tree[p].top] = 0;
			tree[p].top++;
			if (tree[p].top >= 2 && !tree[p].lazy[tree[p].top - 2] && tree[p].lazy[tree[p].top - 1])
				tree[p].top -= 2;
			return;
		}
		pushdown(p);
		pow(lc(p), l, r);
		pow(rc(p), l, r);
		if ((tree[lc(p)].use || tree[lc(p)].mx == 1) && (tree[rc(p)].use || tree[rc(p)].mx == 1)) pushup(p), tree[p].use = 1;
	}
	long long query(int p, int l, int r) {
		if (tree[p].r < l || r < tree[p].l) return 0;
		if (tree[p].l == tree[p].r) {
			if (tree[p].mx == 1) return tree[p].r - tree[p].l + 1;
			for (int i = 0; i < tree[p].top; ++i)
				if (tree[p].lazy[i])
					tree[p].mx = sqrt(tree[p].mx),
					tree[p].sum = sqrt(tree[p].sum);
				else
					tree[p].mx = tree[p].mx * tree[p].mx,
					tree[p].sum = tree[p].sum * tree[p].sum;
			tree[p].top = 0;
			tree[p].use = 1;
			return tree[p].sum;
		}
		if (l <= tree[p].l && tree[p].r <= r) {
			if (tree[p].use) return tree[p].sum;
			if (tree[p].mx == 1) return tree[p].r - tree[p].l + 1;
			pushdown(p);
			if (!tree[lc(p)].use && tree[lc(p)].mx != 1) query(lc(p), l, r);
			if (!tree[rc(p)].use && tree[rc(p)].mx != 1) query(rc(p), l, r);
			pushup(p);
			return tree[p].sum;
		}
		pushdown(p);
		return query(lc(p), l, r) + query(rc(p), l, r);
	}
}t;
bool mem_end = 1;
int main() {
#ifdef ONLINE
	freopen("sequence.in", "r", stdin);
	freopen("sequence.out", "w", stdout);
#endif
	ios_base::sync_with_stdio(false);
	cin >> n >> m;
	for (int i = 1; i <= n; ++i) cin >> a[i];
	t.build(1, 1, n);
	while (m--) {
		int opt, l, r;
		cin >> opt >> l >> r;
		if (opt == 1) t.sqr(1, l, r);
		else if (opt == 2) t.pow(1, l, r);
		else cout << t.query(1, l, r) << endl;
	}
	return 0;
}
//9:16 finish