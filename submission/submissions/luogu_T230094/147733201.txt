//  OJ: 洛谷
//  提交ID: 147733201
//  题目ID: T230094
#include<bits/stdc++.h>
using namespace std;
#pragma warning(disable:4244)
#pragma warning(disable:6262)
template<typename T1, typename T2>
ostream& operator << (ostream& out, pair<T1, T2>& p) {
	out << '{' << p.first << ',' << p.second << '}';
	return out;
}
template<typename T>
ostream& operator << (ostream& out, vector<T>p) {
	for (T t : p) out << t << ';';
	return out;
}
struct LZJ {
	int n, m;
	int num[64 + 10][64 + 10];
	LZJ() {
		memset(num, 0, sizeof num);
		n = m = 64 + 1;
	}
	LZJ(int nn) {
		memset(num, 0, sizeof num);
		n = m = nn;
		for (int i = 1; i <= n; ++i)
			num[i][i] = 1;
	}
	LZJ(int nn, int mm) {
		n = nn, m = mm;
		memset(num, 0, sizeof num);
	}
	friend LZJ operator * (const LZJ& a, const LZJ& b) {
		LZJ c = LZJ(a.n, b.m);
		if (a.m != b.n) exit(0);
		for (int i = 1; i <= a.n; ++i)
			for (int j = 1; j <= b.m; ++j)
				for (int k = 1; k <= a.m; ++k)
					c.num[i][j] += (a.num[i][k] * b.num[k][j]) % 1000000007, c.num[i][j] %= 1000000007;
		return c;
	}
	friend LZJ operator %(const LZJ& a, const int& m) {
		LZJ c = a;
		for (int i = 1; i <= a.n; ++i)
			for (int j = 1; j <= a.m; ++j)
				c.num[i][j] %= m;
		return c;
	}
	friend ostream& operator<<(ostream& out, const LZJ& a) {
		out << "is {" << a.n << " with " << a.m << "}\n";
		for (int i = 1; i <= a.n; ++i, out << endl)
			for (int j = 1; j <= a.m; ++j)
				out << a.num[i][j] << ' ';
		return out;
	}
}exam, lzJ, ans;
LZJ poww(LZJ a, long long x) {
	if (x == 0) return lzJ;
	LZJ t = poww(a, x / 2);
	t = (t * t);
	if (x & 1) t = (t * a);
	return t;
}
long long n, m, t, actt;
LZJ lzj[60 + 10];
string act[10][10];
string reall[10];
int cbc[10][10]; char jb;
int main() {
	ios_base::sync_with_stdio(false);
	cin >> n >> m >> t >> actt;
	exam.n = exam.m = lzJ.n = lzJ.m = n * m;
	for (int i = 1; i <= n * m; ++i)
		exam.num[i][i] = lzJ.num[i][i] = 1;
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j)
			cin >> jb, cbc[i][j] = jb ^ 48;
	for (int i = 0; i < actt; ++i)
		cin >> reall[i];
	for (int i = 1; i <= n; ++i)
		for (int j = 1; j <= m; ++j)
			act[i][j] = reall[cbc[i][j]];
	for (int k = 0; k < 60; ++k) {
		lzj[k].m = n * m, lzj[k].n = n * m;
		for (int i = 1; i <= n; ++i)
			for (int j = 1; j <= m; ++j) {
				char tmp = act[i][j][k % act[i][j].size()];
				if (tmp >= '0' && tmp <= '9') lzj[k].num[i * m + j - m][i * m + j - m] = 1, lzj[k].num[1][i * m + j - m] = tmp ^ 48;
				else if (tmp == 'D') 1 + 1 == 2;
				else {
					switch (tmp) {
					case 'W': {
						if (i * m + j - m - 1 < 1 || i * m + j - m - 1 > n * m)
							lzj[k].num[i * m + j - m][i * m + j - m] = 0;
						else
							lzj[k].num[i * m + j - m][i * m + j - m - 1] = 1,
							lzj[k].num[i * m + j - m - 1][i * m + j - m - 1] = 1;
						break;
					}
					case 'E': {
						if (i * m + j - m + 1 < 1 || i * m + j - m + 1 > n * m)
							lzj[k].num[i * m + j - m][i * m + j - m] = 0;
						else
							lzj[k].num[i * m + j - m][i * m + j - m + 1] = 1;
							lzj[k].num[i * m + j - m + 1][i * m + j - m + 1] = 1;
						break;
					}
					case 'S': {
						if (i * m + j - m - m < 1 || i * m + j - m - m > n * m)
							lzj[k].num[i * m + j - m][i * m + j - m] = 0;
						else
							lzj[k].num[i * m + j - m][i * m + j - m + m] = 1;
							lzj[k].num[i * m + j - m + m][i * m + j - m + m] = 1;
						break;
					}
					case 'N': {
						if (i * m + j - m + m < 1 || i * m + j - m + m > n * m)
							lzj[k].num[i * m + j - m][i * m + j - m] = 0;
						else
							lzj[k].num[i * m + j - m][i * m + j - m - m] = 1;
							lzj[k].num[i * m + j - m - m][i * m + j - m - m] = 1;
					}
					default: {
						cout << "cbcbcbcbcbcbcbcbcbcbcbcbcbccbcbcbcbcbcbcerrrrrrrrrrrrrrrrrrrrrrr" << endl;
						return 0;
					}
					}
				}
			}
		exam = exam * lzj[k];

	}
	ans.n = 1; ans.m = n * m;
	ans.num[1][1] = 1;
	ans = ans * poww(exam, t / 60);
	int lim = t % 60;
	for (int i = 0; i ^ lim; ++i)
		ans = ans * lzj[i]; 
	int anss = -1;
	for (int i = 1; i <= n * m + 1; ++i) anss = max(anss, ans.num[1][i]);
	cout << anss << endl;
	return 0;
}