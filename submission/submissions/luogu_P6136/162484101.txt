//  OJ: 洛谷
//  提交ID: 162484101
//  题目ID: P6136
#include<bits/stdc++.h>
#define int long long
using namespace std;
class Splay {
#define lc child[0]
#define rc child[1]
public:
	void ins(int x) {
		if (!root) {
			new_node<1>(x, 0);
			return;
		}
		int now = root, fa = 0;
		while (1) {
			if (x == tree[now].val) {
				tree[now].cnt++;
				push_up(now);
				push_up(fa);
				splay(now);
				return;
			}
			fa = now;
			now = tree[now].child[tree[now].val < x];
			if (!now) {
				if (tree[fa].val < x) new_node<1>(x, fa);
				else new_node<0>(x, fa);
				push_up(fa);
				splay(idx);
				return;
			}
		}
	}
	void del(int x) {
		ins(x);
		tree[root].cnt--;
		if (tree[root].cnt > 1) {
			tree[root].cnt--;
			push_up(root);
			return;
		}
		if (!tree[root].lc && !tree[root].rc) {
			tree[root] = Point();
			root = 0;
			return;
		}
		if (!tree[root].lc) {
			int Tmp = root;
			root = tree[root].rc;
			tree[root].fa = 0;
			tree[Tmp] = Point();
			return;
		}
		else if (!tree[root].rc) {
			int Tmp = root;
			root = tree[root].lc;
			tree[root].fa = 0;
			tree[Tmp] = Point();
			return;
		}
		int L = find(0), R = find(1);
		splay(L);
		splay(R, L);
		tree[tree[root].rc].lc=0;
		push_up(tree[root].rc);
		push_up(root);
	}
	int get_rank(int x) {
		ins(x);
		int ans = tree[tree[root].lc].size;
//		cout<<tree[find(0, find(0))].val<<' '<<tree[find(0)].val<<' '<<tree[root].val<<' '<<tree[find(1)].val<<endl;
		del(x);
		return ans + 1;
	}
	int get_val(int x) {
		int now = root;
		while (1) {
			if (tree[now].lc && x <= tree[tree[now].lc].size)
				now = tree[now].lc;
			else {
				int tmp = tree[now].cnt + tree[tree[now].lc].size;
				if (x <= tmp) {
					splay(now);
					return tree[now].val;
				}
				x -= tmp;
				now = tree[now].rc;
			}
		}
	}
	int get_pre(int x) {
		ins(x);
		int tmp = find(0);
		splay(tmp);
		int ans = tree[tmp].val;
		del(x);
		return ans;
	}
	int get_nxt(int x) {
		ins(x);
		int tmp = find(1);
		splay(tmp);
		int ans = tree[tmp].val;
		del(x);
		return ans;
	}
protected:
	struct Point {
		int child[2], size, val, fa, cnt;
		Point() :child{ 0,0 }, size(0), val(0), fa(0), cnt(0) {}
	}tree[1000000 + 100];
	int idx = 0, root = 0;
	template<bool lrc = 0>
	int new_node(int x, int fa) {
		if (!fa) {
			++idx;
			tree[idx].fa = tree[idx].lc = tree[idx].rc = 0;
			root = idx;
			tree[idx].val = x;
			tree[idx].cnt = tree[idx].size = 1;
			return idx;
		}
		++idx;
		tree[idx].fa = fa;
		tree[idx].size = 1;
		tree[idx].val = x;
		if (lrc)
			tree[fa].rc = idx;
		else
			tree[fa].lc = idx;
		tree[idx].cnt = 1;
		return idx;
	}
	void push_up(int p) {
		tree[p].size = tree[tree[p].lc].size + tree[tree[p].rc].size + tree[p].cnt;
	}
	void rotate(int x) {
		bool w = tree[tree[x].fa].rc == x;
		int y = tree[x].fa, z = tree[y].fa, b = tree[x].child[!w];
		if (b)
			tree[b].fa = y;
		tree[y].child[w] = b;
		tree[x].child[!w] = y;
		tree[y].fa = x;
		if (z) 
			tree[z].child[y == tree[z].rc] = x;
		tree[x].fa = z;
		push_up(y);
		push_up(x);
	}
	void splay(int x, int want = 0) {
		while (tree[x].fa ^ want) {
			int y = tree[x].fa, z = tree[y].fa;
			if (z ^ want)
				((tree[z].lc == y) ^ (tree[y].lc == x)) ? rotate(x) : rotate(y);
			rotate(x);
		}
		if (!want) root = x;
	}
	inline int find(bool cbc, int from = -1) {
		int now = tree[from ^ (-1) ? from : root].child[cbc];
		while (tree[now].child[!cbc]) now = tree[now].child[!cbc];
		return now;
	}
	int rank_get(int x) {
		int now = root, ans = 0;
		while (1) {
			if (!now) return -1;
			if (x < tree[now].val)
				now = tree[now].lc;
			else {
				ans += (tree[now].lc ? tree[tree[now].lc].size : 0);
				if (x == tree[now].val) {
					splay(now);
					return ans + 1;
				}
				ans += tree[now].cnt;
				now = tree[now].rc;
			}
		}
	}
}lzj;
int n, m, opt, x, lst, ans;
signed main() {
	ios_base::sync_with_stdio(false);
	srand(time(0));
	cin >> n >> m;
	for (int i = 1; i <= n; ++i) cin >> opt, lzj.ins(opt);
	while (m--) {
		cin >> opt >> x; x ^= lst;
		if (opt == 1)
			lzj.ins(x);
		else if (opt == 2)
			lzj.del(x);
		else if (opt == 3)
			ans ^= (lst = lzj.get_rank(x));
		else if (opt == 4)
			ans ^= (lst = lzj.get_val(x));
		else if (opt == 5)
			ans ^= (lst = lzj.get_pre(x));
		else
			ans ^= (lst = lzj.get_nxt(x));
	}
	cout << ans << endl;
	return 0;
}