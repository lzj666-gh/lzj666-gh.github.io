//  OJ: 洛谷
//  提交ID: 214038074
//  题目ID: U515079
#include<bits/stdc++.h>
#define int long long
using namespace std;
constexpr int inf = 1e16;
struct Martix {
	int a[2][2];
	Martix() {
		a[1][0] = a[0][1] = a[0][0] = a[1][1] = -inf;
	}
	Martix(int x) {
		a[0][0] = a[1][1] = 0;
		a[0][1] = -x;
		a[1][0] = x;
	}
	Martix operator*(const Martix& other) const {
		Martix res;
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				for (int k = 0; k < 2; k++)
					res.a[i][j] = max(res.a[i][j], a[i][k] + other.a[k][j]);
		return res;
	}
};
struct Seg_Tree {
#define lc (p << 1)
#define rc (p << 1 | 1)
#define mid ((l + r) >> 1)
#define lson lc, l, mid
#define rson rc, mid + 1, r
	struct Node {
		Martix sum;
		Node() {
			sum.a[0][0] = sum.a[1][1] = 0;
		}
	};
	vector<Node> tree;
	void build(int p, int l, int r, vector<int>& a) {
		if (l == r) {
			tree[p].sum = a[l];
			return;
		}
		build(lson, a);
		build(rson, a);
		tree[p].sum = tree[lc].sum * tree[rc].sum;
	}
	void change(int p, int l, int r, int x, int val) {
		if (l == r) {
			tree[p].sum = val;
			return;
		}
		if (x <= mid) change(lson, x, val);
		else change(rson, x, val);
		tree[p].sum = tree[lc].sum * tree[rc].sum;
	}
}seg;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, m;
	cin >> n >> m;
	vector<int> a(n + 1);
	for (int i = 1; i <= n; i++)
		cin >> a[i];
	seg.tree.resize(n + 1 << 2);
	seg.build(1, 1, n, a);
	while (m--) {
		int x, y;
		cin >> x >> y;
		seg.change(1, 1, n, x, y);
		Martix res;
		res.a[0][0] = 0;
		res = res * seg.tree[1].sum;
		cout << max(res.a[0][0], res.a[0][1]) << '\n';
	}
	return 0;
}