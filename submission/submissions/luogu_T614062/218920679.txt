//  OJ: 洛谷
//  提交ID: 218920679
//  题目ID: T614062
#include<bits/stdc++.h>
using namespace std;
using ll = long long;
struct Node {
	int x, state; ll dis; bool mode;
	Node(int x = 0, bool mode = 0, int state = 0, ll dis = 0) : x(x), mode(mode), state(state), dis(dis) {}
	bool operator<(const Node& other) const { return dis > other.dis; }
};
const ll inf = 0x3f3f3f3f3f3f3f3fll;
int n, m1, m2, t, o;
vector<int> op[100000 + 10], aff[100000 + 10];
bool vist[100000 + 10], vis[100000 + 10][2][1 << 10];
ll dis[100000 + 10][2][1 << 5];
struct Edge {
	int v, w, nxt;
	Edge(int v = 0, int w = 0, int nxt = 0) :v(v), w(w), nxt(nxt) {}
}edge[2][1000000 + 10];
int head[2][100000 + 10], idx[2];
template<bool mode>
void add(int u, int v, int w) {
	edge[mode][++idx[mode]] = { v,w,head[mode][u] };
	head[mode][u] = idx[mode];
}
int main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m1 >> m2 >> t >> o;
	for (int i = 0, x; i < t; ++i) cin >> x, vist[x] = 1;
	for (int i = 0, u, k; i < o; ++i)
		cin >> u >> k, op[u].push_back(i), aff[k].push_back(i);
	for (int i = 0, u, v, w; i < m1; ++i) cin >> w >> u >> v, add<0>(u, v, w);
	for (int i = 0, u, v, w; i < m2; ++i) cin >> w >> u >> v, add<1>(u, v, w);
	memset(dis, 0x3f, sizeof dis);
	priority_queue<Node>q;
	dis[1][0][0] = 0; q.emplace(1, 0, 0, 0);
	while (!q.empty()) {
		Node now = q.top(); q.pop();
		if (vis[now.x][now.mode][now.state]) continue;
		vis[now.x][now.mode][now.state] = 1;
		int gid = now.mode;
		for (int idx : aff[now.x]) gid ^= (now.state >> idx) & 1;
		for (int i = head[gid][now.x]; i; i = edge[gid][i].nxt){
			int w = now.dis + edge[gid][i].w; 
			if (w < dis[edge[gid][i].v][now.mode][now.state])
				dis[edge[gid][i].v][now.mode][now.state] = w, q.emplace(edge[gid][i].v, now.mode, now.state, w);
		}
		int nm = now.mode ^ 1; 
		if (vist[now.x])
			if (now.dis < dis[now.x][nm][now.state])
				dis[now.x][nm][now.state] = now.dis, q.emplace(now.x, nm, now.state, now.dis);;
		for (int idx : op[now.x]) {
			int ns = now.state ^ (1 << idx);
			if (now.dis < dis[now.x][now.mode][ns])
				dis[now.x][now.mode][ns] = now.dis, q.emplace(now.x, now.mode, ns, now.dis);
		}
	}
	ll ans = inf;
	for (int i = 0x3ff; i >= 0; --i) ans = min(ans, dis[n][1][i]);
	if (ans == inf) cout << -1 << endl;
	else cout << ans << endl;
}