//  OJ: 洛谷
//  提交ID: 121662367
//  题目ID: P2845
#include<bits/stdc++.h>
using namespace std;
struct big_num{
	short a[114514];
	friend void operator >> (big_num &a,long long b){
		int top=0;
		while(b){
			a.a[++top]=b%10;
			b/=10;
		}
		a.a[0]=top;
	}
	friend void operator << (big_num &a,short end_char){
		if(a.a[0]==0){
			putchar('0');
			if(end_char==1) putchar(' ');
			if(end_char==2) putchar('\n');
			return;
		}
		for(int i=a.a[0];i>=1;--i){
			putchar(a.a[i]+'0');
		}
		if(end_char==1) putchar(' ');
		if(end_char==2) putchar('\n');
	}
	string change_to_string(){
		string s;
		if(a[0]==0){
			s+='0';
			return s;
		}
		for(int i=a[0];i>=1;--i){
			s+=(a[i]+'0');
		}
		return s;
	}
	long long change_to_long_long(){
		long long s=0;
		if(a[0]==0){
			return s;
		}
		for(int i=a[0];i>=1;--i){
			s*=10;
			s+=a[i];
		}
		return s;
	}
	void string_to(string s){
		a[0]=s.size();
		for(int i=1,j=a[0]-1;i<=a[0];++i,--j) a[i]=s[j]-'0';
	}
	friend big_num operator + (big_num &a,big_num &b){
		big_num ans;
		ans.a[0]=a.a[0]>b.a[0]?a.a[0]:b.a[0];
		for(register int i=1;i<=ans.a[0];++i){
			ans.a[i]=a.a[i]+b.a[i];
			ans.a[i+1]=ans.a[i]/10;
			ans.a[i]%=10;
		}
		return ans;
	}
	friend void operator += (big_num &a,big_num &b){
		a=a+b;
	}
	friend big_num operator - (big_num &a,big_num &b){
		if(b>a) swap(a,b);
		big_num ans;
		ans.a[0]=a.a[0]>b.a[0]?a.a[0]:b.a[0];
		for(register int i=1;i<=ans.a[0];++i){
			ans.a[i]=a.a[i]-b.a[i];
			if(ans.a[i]<0) --ans.a[i+1];
		}
		while(ans.a[ans.a[0]]==0&&ans.a[0]>0) --ans.a[0];
		return ans;
	}
	friend void operator -= (big_num &a,big_num &b){
		a=a-b;
	}
	friend big_num operator * (big_num &a,big_num &b){
		big_num c;
		c.a[0]=a.a[0]+b.a[0];
		for(int i=1;i<=a.a[0];i++){
			for(int j=1;j<=b.a[0];j++){
				c.a[i+j-1]+=a.a[i]*b.a[j];
				if(c.a[i+j-1]>=10){
					c.a[i+j]+=c.a[i+j-1]/10;
					c.a[i+j-1]=c.a[i+j-1]%10;
				}
			}
		}
		while(c.a[c.a[0]]==0&&c.a[0]>1) c.a[0]--;
		return c;
	}
	friend void operator *= (big_num &a,big_num &b){
		a=a*b;
	}
	friend big_num operator / (big_num &a,long long &b){
		string a1=a.change_to_string();long long b1=b;
		string c1;
		int aa[10005],c[10005];
		int lena=a1.size(),lenc=1;
		for(int i=0;i<lena;i++){
			aa[i+1]=a1[i]-'0';
		}
		for(int i=1;i<=lena;i++){
			c[i]=aa[i]/b1;
			aa[i+1]+=aa[i]%b1*10;
		}
		while(lenc<lena&&c[lenc]==0) lenc++;
		while(lenc<=lena) c1+=c[lenc++]+'0';
		big_num ans;
		ans.string_to(c1);
		return ans;
	}
	friend void operator /= (big_num &a,long long &b){
		a=a/b;
	}
	friend big_num operator % (big_num &a,long long &b){
		big_num bb;
		bb>>b;
		big_num tmp=a/b;
		big_num tmp2=tmp*bb;
		return a-tmp2;
	}
	friend void operator %= (big_num &a,long long &b){
		a=a%b;
	}
	friend bool operator < (big_num &a,big_num &b){
		if(a.a[0]!=b.a[0]) return a.a[0]<b.a[0];
		for(int i=a.a[0];i>=1;--i){
			if(a.a[i]!=b.a[i]) return a.a[i]<b.a[i];
		}
	}
	friend bool operator > (big_num &a,big_num &b){
		if(a.a[0]!=b.a[0]) return a.a[0]>b.a[0];
		for(int i=a.a[0];i>=1;--i){
			if(a.a[i]!=b.a[i]) return a.a[i]>b.a[i];
		}
	}
	friend bool operator <= (big_num &a,big_num &b){
		if(a.a[0]!=b.a[0]) return a.a[0]<=b.a[0];
		for(int i=a.a[0];i>=1;--i){
			if(a.a[i]!=b.a[i]) return a.a[i]<=b.a[i];
		}
	}
	friend bool operator >= (big_num &a,big_num &b){
		if(a.a[0]!=b.a[0]) return a.a[0]>=b.a[0];
		for(int i=a.a[0];i>=1;--i){
			if(a.a[i]!=b.a[i]) return a.a[i]>=b.a[i];
		}
	}
	friend bool operator == (big_num &a,big_num &b){
		if(a.a[0]!=b.a[0]) return false;
		for(int i=a.a[0];i>=1;--i){
			if(a.a[i]!=b.a[i]) return false;
		}
		return true;
	}
	friend bool operator != (big_num &a,big_num &b){
		if(a.a[0]!=b.a[0]) return true;
		for(int i=a.a[0];i>=1;--i){
			if(a.a[i]!=b.a[i]) return true;
		}
		return false;
	}
	void get_num(){
		char tmp[10000];
		cin>>tmp;
		a[0]=strlen(tmp);
		for(int i=1,j=a[0]-1;i<=a[0];++i,--j) a[i]=tmp[j]-'0';
	}
};
