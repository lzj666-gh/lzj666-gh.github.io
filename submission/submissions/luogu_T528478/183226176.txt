//  OJ: 洛谷
//  提交ID: 183226176
//  题目ID: T528478
#include<bits/stdc++.h>
#define int long long
using namespace std;
struct Edge {
	int v, w, nxt;
}edge[300000 + 10];
int head[1000], idx;
void add(int u, int v, int w) {
	edge[++idx] = { v,w,head[u] };
	head[u] = idx;
}
int n, m, k, S, T;
namespace Done {
	int w[1000], idx, total, f[5500000 + 10];
	void add(int ww) {
		w[++idx] = ww;
	}
	void main() {
		using ll = long long;
		if (idx == 0) cout << (k == 1 ? total : -1) << endl;
		if (idx == 1) cout << (k - 1) * w[1] + total << endl;
		else if (idx == 2) {
			int X = w[1], Y = w[2];
			if (X < Y) swap(X, Y);
			int l = 1, r = 1e9;
			while (l < r) {
				int mid = (l + r) / 2;
				ll tp = k, cur = mid;
				for (int i = 0; i <= mid / X; ++i) {
					tp -= cur / Y + 1;
					cur -= X;
					if (tp <= 0 || cur < 0) break;
				}
				if (tp > 0) l = mid + 1;
				else r = mid;
			}
			cout << l + total << endl;
		}
		else {
			sort(w + 1, w + idx + 1);
			//for (int i = 1; i <= idx; ++i) cout << w[i] << ' '; cout << endl;
			int all = 5e6;
			f[0] = 1;
			//cerr << idx << ':' << endl;
			for (int j = 1; j <= idx; ++j) {
				int x = w[j];
				for (int i = x; i <= all; ++i) {
					assert(i - x >= 0);
					f[i] += f[i - x];
					if (f[i] >= k) {
						all = i;
						break;
					}
					//cerr << "debug: " << f[i] << ' ' << k << endl;
				}
				//cerr << x << endl;
				//cerr << idx << ':';
				//for (int i = 1; i <= idx; ++i) cout << w[i] << ' '; cout << endl;
			}
			for (int i = 0; i <= all; ++i) {
				k -= f[i];
				if (k <= 0) {
					cout << i + total << endl;
					return;
				}
			}
			cout << -1 << endl;
		}
	}
}
vector<int>path;
vector<int>val;
bool vis[1000];
bool Vis[1000];
bool findpath(int x) {
	if (vis[x]) return 0;
	vis[x] = 1;
	if (x == T) {
		path.push_back(x);
		return 1;
	}
	if (head[x])
		for (int i = head[x]; i; i = edge[i].nxt) {
			if (findpath(edge[i].v)) {
				path.push_back(x);
				val.push_back(edge[i].w);
				return 1;
			}
		}
	return 0;
}
int v[100][100];
short finded[1000];
void findcircle(int x, int f, int tot) {
	if (Vis[x]) return;
	Vis[x] = 1;
	if (vis[x]) {
		for (int i = head[x]; i; i = edge[i].nxt) {
			if (vis[edge[i].v]) findcircle(edge[i].v, -1, 0);
			else findcircle(edge[i].v, x, edge[i].w);
		}
	}
	else {
		for (int i = head[x]; i; i = edge[i].nxt) {
			if (vis[edge[i].v]) {
				Done::add(v[edge[i].v][f] + tot + edge[i].w);
				Done::total += v[edge[i].v][f];
				finded[edge[i].v]++;
				finded[f]++;
			}
			else findcircle(edge[i].v, f, tot + edge[i].w);
		}
	}
}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m >> k >> S >> T;
	memset(v, 0x3f, sizeof v);
	for (int i = 1, u, v, w; i <= m; ++i)
		cin >> u >> v >> w, add(u, v, w), ::v[u][v] = w;
	for (int k = 1; k <= n; ++k)
		for (int i = 1; i <= n; ++i)
			for (int j = 1; j <= n; ++j)
				v[i][j] = min(v[i][j], v[i][k] + v[k][j]);
	findpath(S);
	memset(vis, 0, sizeof vis);
	for (int k : path) vis[k] = 1;
	findcircle(S, -1, 0);
	int Lst = S;
	for (int i = path.size() - 1; i >= 0; --i) {
		if (finded[path[i]] == 1) {
			Done::total += v[Lst][path[i]];
			i--;
			while (finded[path[i]] != 1) i--;
			Lst = path[i];
		}
	}
	Done::total += v[Lst][T];
	Done::main();
	return 0;
}