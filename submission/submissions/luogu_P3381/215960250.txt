//  OJ: 洛谷
//  提交ID: 215960250
//  题目ID: P3381
#include<bits/stdc++.h>
#define int long long
using namespace std;
const int inf = 1145141919810ll;
struct Edge {
	int v, w, c, nxt;
	Edge(int v = 0, int w = 0, int c = 0, int nxt = 0) :v(v), w(w), c(c), nxt(nxt) {}
}edge[20000 + 10];
int head[200 + 10], idx = 1;
void add(int u, int v, int w, int c) {
	edge[++idx] = { v,w,c,head[u] };
	head[u] = idx;
}
int n, m, s, t, dis[200 + 10], h[200 + 10];
bool vis[200 + 10];
int val[200 + 10][200 + 10];
void BF() {
	for (int i = 1; i <= n; ++i) val[i][i] = 0;
	for (int k = 1; k <= n; ++k)
		for (int i = 1; i <= n; ++i)
			for (int j = 1; j <= n; ++j)
				val[i][j] = min(val[i][j], val[i][k] + val[k][j]);
	for (int i = 1; i <= n; ++i) h[i] = val[s][i];
}
pair<int, int>p[200 + 10];
int ans;
bool dij() {
	memset(p, 0, sizeof p);
	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>>q;
	for (int i = 1; i <= n; ++i) dis[i] = inf;
	memset(vis, 0, sizeof vis);
	dis[s] = 0; q.emplace(0, s);
	while (!q.empty()) {
		int now = q.top().second; q.pop();
		if (vis[now]) continue; vis[now] = 1;
		for (int i = head[now]; i; i = edge[i].nxt) {
			int v = edge[i].v, c = edge[i].c + h[now] - h[v];
			cerr << c << endl;
			if (edge[i].w > 0 && dis[now] + c < dis[v]) {
				dis[v] = dis[now] + c;
				p[v].first = now; p[v].second = i;
				q.emplace(dis[v], v);
			}
		}
	}
	return dis[t] != inf;
}
signed main() {
	memset(val, 0x3f, sizeof val);
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m >> s >> t;
	for (int i = 1, u, v, w, c; i <= m; ++i)
		cin >> u >> v >> w >> c, add(u, v, w, c), add(v, u, 0, -c), 
		val[u][v] = min(val[u][v], c);
	BF();
	int ans = 0;
	while (dij()) {
		int flow = inf;
		for (int i = 1; i <= n; ++i)
			if (dis[i] != inf)
				h[i] += dis[i];
		for (int i = t; i ^ s; i = p[i].first) flow = min(flow, edge[p[i].second].w);
		for (int i = t; i ^ s; i = p[i].first) edge[p[i].second].w -= flow, edge[p[i].second ^ 1].w += flow;
		ans += flow; ::ans += flow * h[t];
	}
	cout << ans << ' ' << ::ans << endl;
	return 0;
}