//  OJ: 洛谷
//  提交ID: 220206677
//  题目ID: P4145
#include<bits/stdc++.h>
#define int long long
using namespace std;
constexpr int N = 1e6 + 5;
struct Seg_Tree {
#define lc(p) (p << 1)
#define rc(p) (p << 1 | 1)
#define mid (l + r >> 1)
#define lson lc(p), l, mid
#define rson rc(p), mid + 1, r
	struct Node {
		int sum;
		bool lzy;
		Node(int sum = 0, bool lzy = 0) :sum(sum), lzy(lzy) {}
	}tree[N << 2];
	void pushup(int p) {
		tree[p].sum = tree[lc(p)].sum + tree[rc(p)].sum;
		tree[p].lzy = tree[lc(p)].lzy && tree[rc(p)].lzy;
	}
	void build(int p, int l, int r, vector<int>& a) {
		if (l == r) {
			tree[p].sum = a[l];
			tree[p].lzy = a[l] == 0 || a[l] == 1;
			return;
		}
		build(lson, a); build(rson, a);
		pushup(p);
	}
	int query(int p, int l, int r, int L, int R) {
		if (L <= l && r <= R) return tree[p].sum;
		int res = 0;
		if (L <= mid) res += query(lson, L, R);
		if (R > mid) res += query(rson, L, R);
		return res;
	}
	void update(int p, int l, int r, int L, int R) {
		if (tree[p].lzy) return;
		if (l == r) {
			tree[p].sum = sqrt(tree[p].sum);
			tree[p].lzy = tree[p].sum == 0 || tree[p].sum == 1;
			return;
		}
		if (L <= mid) update(lson, L, R);
		if (R > mid) update(rson, L, R);
		pushup(p);
	}
}t;
int n, m, k, l, r;
vector<int>a;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n;
	a.resize(n + 1);
	for (int i = 1; i <= n; ++i)  cin >> a[i];
	t.build(1, 1, n, a);
	cin >> m;
	while (m--) {
		cin >> k >> l >> r;
		if (l > r) swap(l, r);
		if (k) cout << t.query(1, 1, n, l, r) << endl;
		else t.update(1, 1, n, l, r);
	}
	return 0;
}