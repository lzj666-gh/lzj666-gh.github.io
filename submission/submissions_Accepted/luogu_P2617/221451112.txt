//  OJ: 洛谷
//  提交ID: 221451112
//  题目ID: P2617
#include<bits/stdc++.h>
using namespace std;
constexpr int N = 4e7;
int n, m;
struct Seg_Tree {
#define lc(p) (tree[p].ls)
#define rc(p) (tree[p].rs)
#define mid (l + r >> 1)
	struct Node {
		int sum = 0, ls = 0, rs = 0;
	}tree[N];
	int idx = 0, root[400005], a[100005];
	void add(int& p, int l, int r, int x, int val) {
		if (!p) p = ++idx;
		tree[p].sum += val;
		if (l == r) return;
		if (x <= mid) add(lc(p), l, mid, x, val);
		else add(rc(p), mid + 1, r, x, val);
	}
	int query(int p, int l, int r, int x, int y) {
		if (!p || y < l || x > r) return 0;
		if (x <= l && r <= y) return tree[p].sum;
		return query(lc(p), l, mid, x, y) + query(rc(p), mid + 1, r, x, y);
	}
	void merge(int& p, int lp, int rp, int l, int r) {
		if (!lp && !rp) return;
		tree[p = ++idx].sum = tree[lp].sum + tree[rp].sum;
		if (l == r) return;
		merge(lc(p), lc(lp), lc(rp), l, mid);
		merge(rc(p), rc(lp), rc(rp), mid + 1, r);
	}
	void build(int p, int l, int r) {
		if (l == r) return add(root[p], 0, 1e8, a[l], 1);
		build(p << 1, l, mid);
		build(p << 1 | 1, mid + 1, r);
		merge(root[p], root[p << 1], root[p << 1 | 1], 0, 1e8);
	}
	vector<int> tr;
	void get_roots(int p, int l, int r, int ql, int qr) {
		if (ql <= l && r <= qr) {
			tr.push_back(root[p]);
			return;
		}
		int m = mid;
		if (ql <= m) get_roots(p << 1, l, m, ql, qr);
		if (qr > m) get_roots(p << 1 | 1, m + 1, r, ql, qr);
	}
	int get_rank(int l, int r, int k) {
		tr.clear();
		get_roots(1, 1, n, l, r);
		int cnt = 0;
		for (int& rt : tr) cnt += query(rt, 0, 1e8, 0, k - 1);
		return cnt + 1;
	}
	int kth(int ql, int qr, int k) {
		if (k < 1) return -2147483647;
		if (k > qr - ql + 1) return 2147483647;
		tr.clear();
		get_roots(1, 1, n, ql, qr);
		int l = 0, r = 1e8;
		while (l < r) {
			int m = mid, sum = 0;
			for (int& rt : tr)  sum += tree[lc(rt)].sum;
			if (k <= sum) {
				r = m;
				for (int& rt : tr) rt = lc(rt);
			}
			else {
				l = m + 1; k -= sum;
				for (int& rt : tr) rt = rc(rt);
			}
		}
		return l;
	}
	void exchange(int p, int l, int r, int pos, int old, int val) {
		add(root[p], 0, 1e8, old, -1);
		add(root[p], 0, 1e8, val, 1);
		if (l == r) return;
		int m = mid;
		if (pos <= m) exchange(p << 1, l, m, pos, old, val);
		else exchange(p << 1 | 1, m + 1, r, pos, old, val);
	}
	void change(int pos, int val) {
		exchange(1, 1, n, pos, a[pos], val);
		a[pos] = val;
	}
	int pre(int l, int r, int k) {
		return kth(l, r, get_rank(l, r, k) - 1);
	}
	int nxt(int l, int r, int k) {
		return kth(l, r, get_rank(l, r, k + 1));
	}
	vector<int>v;
	int l[100000 + 5], r[100000 + 5], k[100000 + 5];
	char opt[100000 + 5];
	void init() {
		cin >> n >> m;
		for (int i = 1; i <= n; ++i) cin >> a[i], v.push_back(a[i]);
		for (int i = 1; i <= m; ++i) {
			cin >> opt[i];
			if (opt[i] == 'Q')
				cin >> l[i] >> r[i] >> k[i];
			else {
				cin >> l[i] >> k[i];
				v.push_back(k[i]);
			}
		}
		sort(v.begin(), v.end());
		v.erase(unique(v.begin(), v.end()), v.end());
		for (int i = 1; i <= n; ++i) a[i] = lower_bound(v.begin(), v.end(), a[i]) - v.begin();
		build(1, 1, n);
		for (int i = 1; i <= m; ++i)
			if (opt[i] == 'C')
				k[i] = lower_bound(v.begin(), v.end(), k[i]) - v.begin();
		for (int i = 1; i <= m; ++i) {
			if (opt[i] == 'Q')
				cout << v[kth(l[i], r[i], k[i])] << endl;
			else
				change(l[i], k[i]);
		}
	}
}t;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	t.init();
	return 0;
}