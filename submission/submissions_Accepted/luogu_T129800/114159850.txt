//  OJ: 洛谷
//  提交ID: 114159850
//  题目ID: T129800
#include <iostream>
#include <vector>

using namespace std;

int longestCommonSubsequence(string A, string B) {
    int n = A.length();
    int m = B.length();
    
    vector<vector<int> > dp(n + 1, vector<int>(m + 1, 0));
    
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            if (A[i - 1] == B[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + 1;
            } else {
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
            }
        }
    }
    
    return dp[n][m];
}

int main() {
    int n, m;
    cin >> n >> m;
    
    string A, B;
    cin >> A >> B;
    
    int maxLength = longestCommonSubsequence(A, B);
    
    cout << maxLength << endl;
    
    return 0;
}