//  OJ: 洛谷
//  提交ID: 213908897
//  题目ID: P5142
#include<bits/stdc++.h>
#define int long long
using namespace std;
constexpr int mod = 1e9 + 7;
namespace IO {
	const int SIZE = (1 << 20) + 1;
	char ibuf[SIZE], * iS, * iT, obuf[SIZE], * oS = obuf, * oT = obuf + SIZE - 1;
	char _st[55];
	int _qr = 0;
	inline char gc() {
		return (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, SIZE, stdin), (iS == iT ? EOF : *iS++) : *iS++);
	}
	inline void qread() {}
	template<class T1, class ...T2>
	inline void qread(T1& IEE, T2&... ls) {
		if (is_same<T1, char>::value) {
			IEE = gc();
			qread(ls...);
			return;
		}
		T1 __ = 0, ___ = 1;
		char ch;
		while (!isdigit(ch = gc())) ___ = (ch == '-') ? -___ : ___;
		do {
			__ = (__ << 1) + (__ << 3) + (ch ^ 48);
		} while (isdigit(ch = gc()));
		__ *= ___;
		IEE = __;
		qread(ls...);
		return;
	}
	inline void flush() {
		fwrite(obuf, 1, oS - obuf, stdout);
		oS = obuf;
		return;
	}
	inline void putc_(char _x) {
		*oS++ = _x;
		if (oS == oT) flush();
	}
	inline void qwrite() {}
	template<class T1, class ...T2>
	inline void qwrite(T1 IEE, T2... ls) {
		if (is_same<T1, char>::value) {
			putc_(IEE);
			qwrite(ls...);
			return;
		}
		if (!IEE) putc_('0');
		if (IEE < 0) putc_('-'), IEE = -IEE;
		while (IEE) _st[++_qr] = IEE % 10 + '0', IEE /= 10;
		while (_qr) putc_(_st[_qr--]);
		qwrite(ls...);
		return;
	}
	struct Flusher_ { ~Flusher_() { flush(); } }io_flusher;
}
using IO::qread;
using IO::qwrite;
struct BIT {
	int n;
	vector<int> bit;
	BIT() : n(0), bit() {}
	void build(int n, vector<int>& a) {
		this->n = n;
		bit.resize(n + 1);
		for (int i = 1; i <= n; ++i) add(i, a[i]);
	}
	void add(int x, int v) {
		for (; x <= n; x += x & -x)
			bit[x] += v,
			bit[x] %= mod;
	}
	int sum(int x) {
		int s = 0;
		for (; x; x -= x & -x) s += bit[x], s %= mod;
		return s;
	}
	int sum(int l, int r) {
		return sum(r) - sum(l - 1);
	}
}t1;
struct Seg_tree {
	int n;
	vector<int> tree;
	void build(int n, vector<int>& a) {
		this->n = n;
		tree.resize(n << 2);
		build(1, 1, n, a);
	}
	void build(int x, int l, int r, vector<int>& a) {
		if (l == r) {
			tree[x] = a[l] * a[l];
			tree[x] %= mod;
			return;
		}
		int mid = (l + r) >> 1;
		build(x << 1, l, mid, a);
		build(x << 1 | 1, mid + 1, r, a);
		tree[x] = tree[x << 1] + tree[x << 1 | 1];
		tree[x] %= mod;
	}
	void update(int x, int l, int r, int pos, int v) {
		if (l == r) {
			tree[x] = v * v;
			tree[x] %= mod;
			return;
		}
		int mid = (l + r) >> 1;
		if (pos <= mid) update(x << 1, l, mid, pos, v);
		else update(x << 1 | 1, mid + 1, r, pos, v);
		tree[x] = tree[x << 1] + tree[x << 1 | 1];
		tree[x] %= mod;
	}
	int query(int x, int l, int r, int L, int R) {
		if (L > R) return 0;
		if (L == l && R == r) return tree[x];
		int mid = (l + r) >> 1;
		return (query(x << 1, l, mid, L, min(R, mid)) +
			query(x << 1 | 1, mid + 1, r, max(L, mid + 1), R)) % mod;
	}
}t2;
long long qpow(long long a, long long b = mod - 2) {
	long long ans = 1;
	while (b) {
		if (b & 1) ans = ans * a % mod;
		a = a * a % mod;
		b >>= 1;
	}
	return ans;
}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	int n, m;
	qread(n, m);
	vector<int> a(n + 1);
	for (int i = 1; i <= n; ++i)
		qread(a[i]);
	t1.build(n, a);
	t2.build(n, a);
	while (m--) {
		int op, x, y;
		qread(op, x, y);
		if (op == 1) {
			t1.add(x, y - a[x]);
			t2.update(1, 1, n, x, y);
			a[x] = y;
		}
		else {
			int ans1 = t1.sum(x, y);
			int ans2 = t2.query(1, 1, n, x, y);
			int inv = qpow(y - x + 1);
			qwrite((inv * (ans2 - inv * ans1 % mod * ans1 % mod) % mod + mod) % mod, '\n');
		}
	}
	return 0;
}