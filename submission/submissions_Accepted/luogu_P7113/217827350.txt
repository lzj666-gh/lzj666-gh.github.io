//  OJ: 洛谷
//  提交ID: 217827350
//  题目ID: P7113
#include<bits/stdc++.h>
using namespace std;
using ll = __int128;
string int128_to_str(__int128 x) {
    if (x == 0) return "0";
    string res;
    bool neg = x < 0;
    if (neg) x = -x;
    while (x) {
        res += '0' + (x % 10);
        x /= 10;
    }
    if (neg) res += '-';
    reverse(res.begin(), res.end());
    return res;
}
ll gcd(ll a, ll b) {
    a = a < 0 ? -a : a;
    b = b < 0 ? -b : b;
    while (b) { ll t = b; b = a % b; a = t; }
    return a;
}
class fraction {
    ll z, m;
    void upd() {
        ll tmp = gcd(z, m);
        z /= tmp; m /= tmp;
        if (m < 0) { z = -z; m = -m; }
    }	double to_d() { return 1.0 * z / m; }
public:
    fraction() : z(0), m(1) {}
    template<typename T>
    fraction(T k) : z(k), m(1) {}
    template<typename T1, typename T2>
    fraction(T1 l, T2 r) : z(l), m(r) { upd(); }
    friend fraction operator+(const fraction& a, const fraction& b) { fraction c = fraction(a.z * b.m + a.m * b.z, a.m * b.m); c.upd(); return c; }
    friend fraction operator-(const fraction& a, const fraction& b) { fraction c = fraction(a.z * b.m + a.m * (-b.z), a.m * b.m); c.upd(); return c; }
    friend fraction operator*(const fraction& a, const fraction& b) { fraction c = fraction(a.z * b.z, a.m * b.m); c.upd(); return c; }
    friend fraction operator/(const fraction& a, const fraction& b) { fraction c = fraction(a.z * b.m, a.m * b.z); c.upd(); return c; }
    friend fraction operator+=(fraction& a, const fraction& b) { a = a + b; return a; }
    friend fraction operator-=(fraction& a, const fraction& b) { a = a - b; return a; }
    friend fraction operator*=(fraction& a, const fraction& b) { a = a * b; return a; }
    friend fraction operator/=(fraction& a, const fraction& b) { a = a / b; return a; }
    friend bool operator<(const fraction& a, const fraction& b) { return((a - b).to_d() < (0)); }
    friend bool operator>(const fraction& a, const fraction& b) { return((a - b).to_d() > (0)); }
    friend bool operator<=(const fraction& a, const fraction& b) { return((a - b).to_d() <= (0)); }
    friend bool operator>=(const fraction& a, const fraction& b) { return((a - b).to_d() >= (0)); }
    friend bool operator==(const fraction& a, const fraction& b) { return((a - b).to_d() == (0)); }
    friend bool operator!=(const fraction& a, const fraction& b) { return((a - b).to_d() != (0)); }
    friend istream& operator>>(istream& in, fraction& a) {
        string tmp;
        in >> tmp;
        size_t pos = tmp.find('/');
        if (pos != string::npos) {
            string sz = tmp.substr(0, pos), sm = tmp.substr(pos + 1);
            a.z = 0; a.m = 0;
            for (char c : sz) a.z = a.z * 10 + (c - '0');
            for (char c : sm) a.m = a.m * 10 + (c - '0');
        }
        else {
            a.z = 0;
            for (char c : tmp) a.z = a.z * 10 + (c - '0');
            a.m = 1;
        }
        a.upd();
        return in;
    }
    friend ostream& operator<<(ostream& out, const fraction& a) {
        if (a.z != 0)
            out << int128_to_str(a.z) << " " << int128_to_str(a.m) << "\n";
        return out;
    }
}ans[100000 + 10];
int n, m, r[100000 + 10];
vector<int>son[100000 + 10];
int main() {
    cin.tie(0)->sync_with_stdio(false);
    cin >> n >> m;
    for (int i = 1; i <= n; ++i) {
        int d; cin >> d;
        for (int j = 1, v; j <= d; ++j)
            cin >> v, son[i].push_back(v), r[v]++;
    }
    queue<int>q;
    for (int i = 1; i <= m; ++i) ans[i] = 1;
    for (int i = 1; i <= n; ++i) if (!r[i]) q.push(i);
    while (!q.empty()) {
        int now = q.front();
        q.pop();
        if (son[now].empty()) continue;
        ans[now] /= son[now].size();
        for (const int& s : son[now]) {
            ans[s] += ans[now];
            r[s]--;
            if (!r[s]) q.push(s);
        }
        ans[now] = 0;
    }
    for (int i = 1; i <= n; ++i)
        cout << ans[i];
    return 0;
}