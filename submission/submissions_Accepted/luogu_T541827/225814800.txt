//  OJ: 洛谷
//  提交ID: 225814800
//  题目ID: T541827
#include<bits/stdc++.h>
using namespace std;
const int N = 5e5 + 10;
int n, q; string s;
struct Seg_Tree {
#define mid ((l + r) >> 1)
#define lc (p << 1)
#define rc (p << 1 | 1)
#define get(st, len) ((st) ^ (((len) + 1) & 1))
#define lson lc, l, mid
#define rson rc, mid + 1, r
	struct Node {
		struct node {
			int len, l[2];
			bool st, can;
			node(int a = 0) { st = a, len = l[a] = 1, can = l[a ^ 1] = 0; }
			void rev() { st ^= 1; swap(l[0], l[1]); }
			friend node operator+(const node& a, const node& b) {
				node c = a;
				if (!a.len) c.st = b.st, c.len = b.len;
				else if (get(a.st, a.len) != b.st) c.len += b.len;
				else if (b.len > a.len) c.st = a.st ^ 1, c.len = b.len - a.len;
				else c.st = a.st, c.len = a.len - b.len;
				if (b.l[get(a.st, a.len)] >= a.len) c.can = 1;
				
				if (!a.len) c.l[0] = max(c.l[0], b.l[0]);
				else if (get(a.st, a.len)) c.l[a.st] = max(c.l[a.st], a.len + b.l[0]);
				else if (b.l[0] > a.len) c.l[a.st ^ 1] = max(c.l[a.st ^ 1], b.l[0] - a.len);
				
				if (!a.len) c.l[1] = max(c.l[1], b.l[1]);
				else if (!get(a.st, a.len)) c.l[a.st] = max(c.l[a.st], a.len + b.l[1]);
				else if (b.l[1] > a.len) c.l[a.st ^ 1] = max(c.l[a.st ^ 1], b.l[1] - a.len);
				return c;
			}
		}v;
		bool tg = 0;
	}t[N << 2];
	void pushup(int p) { t[p].v = t[lc].v + t[rc].v; }
	void rev(int p) { t[p].v.rev(); t[p].tg ^= 1; }
	void pushdown(int p) { if (t[p].tg) rev(lc), rev(rc), t[p].tg = 0; }
	void build(int p, int l, int r, string& s) {
		if (l == r) { t[p].v = s[l - 1] - '0'; return; }
		build(lson, s);
		build(rson, s);
		pushup(p);
	}
	void rev(int p, int l, int r, int ql, int qr) {
		if (ql <= l && r <= qr) return rev(p);
		if (r < ql || qr < l) return;
		pushdown(p);
		rev(lson, ql, qr);
		rev(rson, ql, qr);
		pushup(p);
	}
	int query(int p, int l, int r, int ql) {
		static Node::node now;
		if (r < ql) return 0;
		if (ql <= l) {
			Node::node cur;
			if (ql == l) cur = t[p].v;
			else cur = now + t[p].v;
			if (!cur.can) return now = cur, 0;
			if (l == r) return l;
		}
		pushdown(p);
		if (int tmp = query(lson, ql); tmp) return tmp;
		return query(rson, ql);
	}
	int query(int st) {
		int res = query(1, 1, n, st);
		return res ? res : n + 1;
	}
}t;
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> q >> s;
	t.build(1, 1, n ,s);
	for (int i = 1, op, l, r; i <= q; i++) {
		cin >> op >> l;
		if (op == 1) cin >> r, t.rev(1, 1, n, l, r);
		else cout << t.query(l) << endl;
	}
    return 0;
}