//  OJ: 洛谷
//  提交ID: 217844255
//  题目ID: P2403
#include<bits/stdc++.h>
using namespace std;
struct Edge {
	int u, v, nxt;
}edge[10000000 + 10];
int head[3000000 + 10], idx;
void add(int u, int v) {
	edge[++idx] = { u,v,head[u] };
	head[u] = idx;
}
int n, r, c, x[1000000 + 10], y[1000000 + 10], t[1000000 + 10];
unordered_map<int, vector<int>>R, C;
int idkr[1000000 + 10], idkc[1000000 + 10];
struct IDMAP {
	map<pair<int, int>, int>mp;
	int operator()(int x, int y) {
		if (auto t = mp.find({ x,y }); t != mp.end())
			return t->second;
		else
			return 0;
	}
}idmap;
namespace Tarjan {
	int low[3000000 + 10], dfn[3000000 + 10], idk;
	int id, scc[3000000 + 10];
	stack<int>st;
	int cur[3000000 + 10];
	namespace SCCed {
		struct Edge {
			int v, nxt;
		}edge[3000000 + 10];
		int head[3000000 + 10], idx;
		void add(int u, int v) {
			edge[++idx] = { v,head[u] };
			head[u] = idx;
		}
		int n, l[3000000 + 10], fa[3000000 + 10];
		void main() {
			queue<int>q;
			n = Tarjan::id;
			for (int i = 1; i <= n; ++i) {
				if (fa[i] == 0) q.push(i);
				l[i] = Tarjan::cur[i];
			}
			while (!q.empty()) {
				int now = q.front(); q.pop(); /*cerr<<" "<<now<<" "<<l[now]<<endl;*/
				for (int i = head[now]; i; i = edge[i].nxt) {
					l[edge[i].v] = max(l[now] + Tarjan::cur[edge[i].v], l[edge[i].v]);
					--fa[edge[i].v];
					if (fa[edge[i].v] == 0) q.push(edge[i].v);
				}
			}
			int anss = 0;
			for (int i = 1; i <= n; ++i) anss = max(anss, l[i]);
			cout << anss << endl;
		}
	}
	void tarjan(int x) {
		dfn[x] = low[x] = ++idk;
		st.push(x);
		for (int i = head[x]; i; i = edge[i].nxt) {
			if (!dfn[edge[i].v])
				tarjan(edge[i].v),
				low[x] = min(low[x], low[edge[i].v]);
			else if (!scc[edge[i].v])
				low[x] = min(low[x], dfn[edge[i].v]);
		}
		if (low[x] == dfn[x]) {
			id++;
			while (st.size()) {
				int now = st.top(); st.pop();
				scc[now] = id;
				if (now == x) break;
			}
		}
	}
	signed main() {
		for (int i = 1; i <= n; ++i)
			if (!dfn[i])
				tarjan(i);
		for (int i = 1; i <= n; ++i) cur[scc[i]]++;
		for (int i = 1; i <= idx; i++)
			if (scc[edge[i].u] ^ scc[edge[i].v])
				SCCed::add(scc[edge[i].v], scc[edge[i].u]);
		SCCed::main();
		return 0;
	}
}
signed main() {
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> r >> c;
	for (int i = 1; i <= n; ++i)
		cin >> x[i] >> y[i] >> t[i],
		R[x[i]].push_back(i), C[y[i]].push_back(i),
		idmap.mp[{x[i], y[i]}] = i;
	int l = 1;
	for (auto& p : R) {
		idkr[p.first] = n + l;
		sort(p.second.begin(), p.second.end());
		for (const int& q : p.second)
			add(n + l, q);
		l++;
	}
	for (auto& p : C) {
		idkc[p.first] = n + l;
		sort(p.second.begin(), p.second.end());
		for (const int& q : p.second)
			add(n + l, q);
		l++;
	}
	for (int i = 1; i <= n; ++i)
		if (t[i] == 1)
			add(i, idkr[x[i]]);
		else if (t[i] == 2)
			add(i, idkc[y[i]]);
		else {
			vector<int>tmp;
			tmp.push_back(idmap(x[i] - 1, y[i] - 1));
			tmp.push_back(idmap(x[i] - 1, y[i]    ));
			tmp.push_back(idmap(x[i] - 1, y[i] + 1));
			tmp.push_back(idmap(x[i]    , y[i] - 1));

			tmp.push_back(idmap(x[i]    , y[i] + 1));
			tmp.push_back(idmap(x[i] + 1, y[i] - 1));
			tmp.push_back(idmap(x[i] + 1, y[i]    ));
			tmp.push_back(idmap(x[i] + 1, y[i] + 1));
			/*
			auto k = R.find(x[i]);
			auto t = lower_bound(k->second.begin(), k->second.end(), y[i]);
			if (t != k->second.begin()) tmp.push_back(*(--t));
			if (t != k->second.end()) tmp.push_back(*(++t));
			if (t != k->second.end()) tmp.push_back(*(++t));
			if (k = R.find(x[i] - 1); k != R.end()) {
				t = lower_bound(k->second.begin(), k->second.end(), y[i]);
				if (t != k->second.begin()) tmp.push_back(*(--t));
				if (t != k->second.end()) tmp.push_back(*(++t));
				if (t != k->second.end()) tmp.push_back(*(++t));
			}
			if (k = R.find(x[i] + 1); k != R.end()) {
				t = lower_bound(k->second.begin(), k->second.end(), y[i]);
				if (t != k->second.begin()) tmp.push_back(*(--t));
				if (t != k->second.end()) tmp.push_back(*(++t));
				if (t != k->second.end()) tmp.push_back(*(++t));
			}
			*/
			for (const int& p : tmp)
				if (p && y[i] - 1 <= y[p] && y[p] <= y[i] + 1)
					add(i, p);
		}
	Tarjan::main();
	return 0;
}