//  OJ: 洛谷
//  提交ID: 198462685
//  题目ID: P3810
#include<bits/stdc++.h>
#include<unordered_map>
using namespace std;
typedef int ll;
namespace IO {
#ifdef ONLINE_JUDGE
#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf,1,1<<20,stdin), p1 == p2) ? 0 : *p1++)
#endif
	char buf[1 << 20], * p1, * p2;
	inline void read(int& x) {
		bool f = 1; x = 0; char ch = getchar();
		while (ch < '0' || ch>'9') { if (ch == '-') f = !f; ch = getchar(); }
		while (ch >= '0' && ch <= '9') { x = (x << 1) + (x << 3) + (ch ^ 48); ch = getchar(); }
		x = (f ? x : -x); return;
	}
	inline void write(int x) {
		if (x < 0) putchar('-'), x = -x;
		if (x > 9) write(x / 10);
		putchar(x % 10 + '0'); return;
	}
}
using namespace IO;
struct Node {
	int a, b, c, cnt, ans;
	Node() :a(0), b(0), c(0), cnt(0), ans(0) {}
	friend bool operator<(const Node& a, const Node& b) {
		return a.a == b.a ? a.b == b.b ? a.c < b.c : a.b < b.b : a.a < b.a;
	}
	friend bool operator!=(const Node& a, const Node& b) {
		return a.a != b.a || a.b != b.b || a.c != b.c;
	}
}t[100000 + 10];
int n, tot, cbcycycbc[100000 + 10], K;
class Tree_array {
public:
#define lb(x) (x & ~x + 1)
	ll query(ll x) {
		ll ans = 0;
		for (; x; x -= lb(x)) {
			ans += s[x];
		}
		return ans;
	}
	void add(int x, ll k) {
		for (; x <= K; x += lb(x)) {
			s[x] += k;
		}
	}
	Tree_array() :s(unordered_map<int, ll>()) {}
protected:
	unordered_map<int, ll>s;
}tr;
void CDQ(int l, int r) {
	if (l == r) return;
	int mid = l + r >> 1;
	CDQ(l, mid);
	CDQ(mid + 1, r);
	sort(&t[l], &t[mid + 1], [](const Node& a, const Node& b)->bool {return a.b == b.b ? a.c < b.c : a.b < b.b; });
	sort(&t[mid + 1], &t[r + 1], [](const Node& a, const Node& b)->bool {return a.b == b.b ? a.c < b.c : a.b < b.b; });
	int i = l, j = mid + 1;
	while (j <= r) {
		while (i <= mid && t[i].b <= t[j].b) {
			tr.add(t[i].c, t[i].cnt);
			++i;
		}
		t[j].ans += tr.query(t[j].c);
		++j;
	}
	tr = Tree_array();
}
signed main() {
	read(n); read(K); tot = 1;
	for (int i = 1; i <= n; ++i) read(t[i].a), read(t[i].b), read(t[i].c), t[i].cnt = 1;
	sort(&t[1], &t[n + 1]);
//	cout << "---" << endl;
//	for (int i = 1; i <= n; ++i) cout << t[i].a << ' ' << t[i].b << ' ' << t[i].c << ' ' << t[i].cnt << endl;
//	cout << "---" << endl;
	for (int i = 1; i <= n; ++i) {
		if (t[i] != t[i - 1]) t[tot++] = t[i];
		else t[tot - 1].cnt += 1;
	}
	tot--;
//	for (int i = 1; i <= tot; ++i) cout << t[i].a << ' ' << t[i].b << ' ' << t[i].c << ' ' << t[i].cnt << endl;
//	cout << "---" << endl;
	CDQ(1, tot);
	for (int i = 1; i <= tot; ++i) cbcycycbc[t[i].ans + t[i].cnt - 1] += t[i].cnt;
	for (int i = 0; i < n; ++i) cout << cbcycycbc[i] << endl;
	return 0;
}