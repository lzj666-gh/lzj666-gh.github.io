//  OJ: 洛谷
//  提交ID: 196389988
//  题目ID: P3690
#include<bits/stdc++.h>
#define __forceinline inline
#define ps(st) cout << "now is in function " << __FUNCTION__ << " : " << #st << endl;
#define po(st) cout << "now is in function " << __FUNCTION__ << " and print value " << st << endl;
using namespace std;
int n, m;
class LCT {
#define lc son[0]
#define rc son[1]
public:
	LCT() {
		Null = new iterator;
		Null->fa = Null;
		memset(pt, 0, sizeof pt);
	}
	void build() {
		for(int i = 1; i <= n; i++) {
			int x;
			cin >> x;
			pt[i] = new iterator;
			pt[i]->val = x;
			pt[i]->fa = pt[i]->lc = pt[i]->rc = Null;
		}
	}
	void link(int a, int b) {
		beroot(pt[a]);
		if((pt[a]) != find(pt[b]))
			pt[a]->fa = pt[b];
	}
	void cut(int a, int b) {
		belink(pt[a], pt[b]);
		if(pt[b]->lc == pt[a])
			pt[b]->lc = pt[a]->fa = Null;
	}
	int ask(int a, int b) {
		belink(pt[a], pt[b]);
		return pt[b]->ans;
	}
	void change(int a, int b) {
		beroot(pt[a]);
		pt[a]->val = b;
		pushup(pt[a]);
	}
protected:
	struct iterator {
		int val, ans;
		bool tag;
		iterator* fa, * son[2];
		iterator():val(0), ans(0), tag(0), fa(nullptr), son { nullptr,nullptr } { }
	}*pt[100000 + 10], * Null;
	void swap(iterator* p) {
		std::swap(p->lc, p->rc);
	}
	__forceinline void pushup(iterator* p) {
		p->ans = p->lc->ans ^ p->rc->ans ^ p->val;
	}
	__forceinline void pushdown(iterator* p) {
		if(p->tag) {
			if(p->lc != Null) 
				swap(p->lc), p->lc->tag ^= 1;
			if(p->rc != Null) 
				swap(p->rc), p->rc->tag ^= 1;
			p->tag = 0;
		}
	}
	void update(iterator* p) {
		if(notroot(p)) update(p->fa);
		pushdown(p);
	}
	__forceinline bool notroot(iterator* p) {
		if(p == Null) return 0;
		return p->fa->lc == p || p->fa->rc == p;
	}
	iterator* find(iterator* p) {
		access(p);
		splay(p);
		while(p->lc != Null) p = p->lc;
		splay(p);
		return p;
	}
	void beroot(iterator* p) {
		access(p);
		splay(p);
		swap(p);
		p->tag ^= 1;
	}
	void access(iterator* p) {
		iterator* q = Null;
		while(p != Null) {
			splay(p);
			p->rc = q;
			pushup(p);
			q = p; p = p->fa;
		}
	}
	void belink(iterator* p, iterator* q) {
		beroot(p);
		access(q);
		splay(q);
	}
	void rotate(iterator*&p) {
		bool w = p->fa->rc == p;
		iterator* fa = p->fa, * ffa = fa->fa, * s = p->son[!w];
		if(notroot(fa)) ffa->son[fa == ffa->rc] = p;
		if(s != Null) s->fa = fa;
		fa->son[w] = s;
		p->son[!w] = fa;
		fa->fa = p;
		p->fa = ffa;
		pushup(fa);
		pushup(p);
	}
	void splay(iterator* p) {
		update(p);
		while(notroot(p)) {
			iterator* y = p->fa, * z = y->fa;
			if(notroot(y))
				((z->lc == y) ^ (y->lc == p)) ? rotate(p) : rotate(y);
			rotate(p);
		}
	}
}t;
int main() {
// 	freopen("P3690_1.in", "r", stdin);
// 	freopen("P3690_1.my_ans", "w", stdout);
	cin.tie(0)->sync_with_stdio(false);
	cin >> n >> m;
	t.build();
	while(m--) {
		int opt, x, y;
		cin >> opt >> x >> y;
		if(opt == 0) 
			cout << t.ask(x, y) << endl;
		if(opt == 1) 
			t.link(x, y);
		if(opt == 2) 
			t.cut(x, y);
		if(opt == 3) 
			t.change(x, y);
	}
	return 0;
}